
/*
 * This file was generated by the SOM Compiler.
 * FileName: eda.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    COMPONENT_NAME: somp
 * 
 *    ORIGINS: 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1994,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMPEncoderDecoderAbstract_xh
#define SOM_SOMPEncoderDecoderAbstract_xh

class SOMPEncoderDecoderAbstract;

/*
 *  This is the abstract class for an EncoderDecoder.
 * 
 *  An encoder/decoder is an object which is paired with a persistent object
 *  and handles the reading/writing of that persistent object's instance
 *  data.  A class derived from this abstract class must be created and
 *  paired with a persistent object in order for that persistent object
 *  to be save/restored.
 * 
 *  The derived encoder/decoder class name is bound to a persistent
 *  object with the sompSetEncoderDecoderName method (see po.sc).
 * 
 *  A persistent object's encoder/decoder is instantiated by an
 *  IO Group Mgr at the moment that object is save/restored.
 */

#define SOMPEncoderDecoderAbstract_MajorVersion 2
#define SOMPEncoderDecoderAbstract_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef SOMPEncoderDecoderAbstract_API
#define SOMPEncoderDecoderAbstract_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class SOMPMediaInterfaceAbstract;
class SOMPPersistentObject;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the SOMPEncoderDecoderAbstract Class */
SOMEXTERN SOMClass * SOMLINK SOMPEncoderDecoderAbstractNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMPEncoderDecoderAbstract class object, and the methods it introduces. */
SOMEXTERN struct SOMPEncoderDecoderAbstractClassDataStructure {
	SOMClass *classObject;
	somMToken sompEDWrite;
	somMToken sompEDRead;
} SOMDLINK SOMPEncoderDecoderAbstractClassData;
#define _SOMPEncoderDecoderAbstract SOMPEncoderDecoderAbstractClassData.classObject

/* The API to parentMtabs for SOMPEncoderDecoderAbstract, and the instance data it introduces. */
SOMEXTERN struct SOMPEncoderDecoderAbstractCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMPEncoderDecoderAbstractCClassData;

/*
 * -- Typedefs for SOMPEncoderDecoderAbstract Method Procedures
 */
SOMEXTERN {
typedef void   SOMLINK somTP_SOMPEncoderDecoderAbstract_sompEDWrite(SOMPEncoderDecoderAbstract *somSelf, Environment *ev, 
		SOMPMediaInterfaceAbstract* thisMedia, 
		SOMPPersistentObject* thisObject);
typedef somTP_SOMPEncoderDecoderAbstract_sompEDWrite *somTD_SOMPEncoderDecoderAbstract_sompEDWrite;
typedef void   SOMLINK somTP_SOMPEncoderDecoderAbstract_sompEDRead(SOMPEncoderDecoderAbstract *somSelf, Environment *ev, 
		SOMPMediaInterfaceAbstract* thisMedia, 
		SOMPPersistentObject* thisObject);
typedef somTP_SOMPEncoderDecoderAbstract_sompEDRead *somTD_SOMPEncoderDecoderAbstract_sompEDRead;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_SOMPEncoderDecoderAbstract_somDefaultInit(SOMPEncoderDecoderAbstract *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_SOMPEncoderDecoderAbstract_somDefaultInit *somTD_SOMPEncoderDecoderAbstract_somDefaultInit;
typedef void   SOMLINK somTP_SOMPEncoderDecoderAbstract_somDestruct(SOMPEncoderDecoderAbstract *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_SOMPEncoderDecoderAbstract_somDestruct *somTD_SOMPEncoderDecoderAbstract_somDestruct;
typedef void   SOMLINK somTP_SOMPEncoderDecoderAbstract_somDefaultCopyInit(SOMPEncoderDecoderAbstract *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPEncoderDecoderAbstract_somDefaultCopyInit *somTD_SOMPEncoderDecoderAbstract_somDefaultCopyInit;
typedef SOMPEncoderDecoderAbstract*   SOMLINK somTP_SOMPEncoderDecoderAbstract_somDefaultAssign(SOMPEncoderDecoderAbstract *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPEncoderDecoderAbstract_somDefaultAssign *somTD_SOMPEncoderDecoderAbstract_somDefaultAssign;
typedef void   SOMLINK somTP_SOMPEncoderDecoderAbstract_somDefaultConstCopyInit(SOMPEncoderDecoderAbstract *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPEncoderDecoderAbstract_somDefaultConstCopyInit *somTD_SOMPEncoderDecoderAbstract_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_SOMPEncoderDecoderAbstract_somDefaultVCopyInit(SOMPEncoderDecoderAbstract *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPEncoderDecoderAbstract_somDefaultVCopyInit *somTD_SOMPEncoderDecoderAbstract_somDefaultVCopyInit;
typedef void   SOMLINK somTP_SOMPEncoderDecoderAbstract_somDefaultConstVCopyInit(SOMPEncoderDecoderAbstract *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPEncoderDecoderAbstract_somDefaultConstVCopyInit *somTD_SOMPEncoderDecoderAbstract_somDefaultConstVCopyInit;
typedef SOMPEncoderDecoderAbstract*   SOMLINK somTP_SOMPEncoderDecoderAbstract_somDefaultConstAssign(SOMPEncoderDecoderAbstract *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPEncoderDecoderAbstract_somDefaultConstAssign *somTD_SOMPEncoderDecoderAbstract_somDefaultConstAssign;
typedef SOMPEncoderDecoderAbstract*   SOMLINK somTP_SOMPEncoderDecoderAbstract_somDefaultVAssign(SOMPEncoderDecoderAbstract *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPEncoderDecoderAbstract_somDefaultVAssign *somTD_SOMPEncoderDecoderAbstract_somDefaultVAssign;
typedef SOMPEncoderDecoderAbstract*   SOMLINK somTP_SOMPEncoderDecoderAbstract_somDefaultConstVAssign(SOMPEncoderDecoderAbstract *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPEncoderDecoderAbstract_somDefaultConstVAssign *somTD_SOMPEncoderDecoderAbstract_somDefaultConstVAssign;
typedef void   SOMLINK somTP_SOMPEncoderDecoderAbstract_somInit(SOMPEncoderDecoderAbstract *somSelf);
typedef somTP_SOMPEncoderDecoderAbstract_somInit *somTD_SOMPEncoderDecoderAbstract_somInit;
typedef void   SOMLINK somTP_SOMPEncoderDecoderAbstract_somFree(SOMPEncoderDecoderAbstract *somSelf);
typedef somTP_SOMPEncoderDecoderAbstract_somFree *somTD_SOMPEncoderDecoderAbstract_somFree;
typedef void   SOMLINK somTP_SOMPEncoderDecoderAbstract_somUninit(SOMPEncoderDecoderAbstract *somSelf);
typedef somTP_SOMPEncoderDecoderAbstract_somUninit *somTD_SOMPEncoderDecoderAbstract_somUninit;
typedef SOMClass*   SOMLINK somTP_SOMPEncoderDecoderAbstract_somGetClass(SOMPEncoderDecoderAbstract *somSelf);
typedef somTP_SOMPEncoderDecoderAbstract_somGetClass *somTD_SOMPEncoderDecoderAbstract_somGetClass;
typedef string   SOMLINK somTP_SOMPEncoderDecoderAbstract_somGetClassName(SOMPEncoderDecoderAbstract *somSelf);
typedef somTP_SOMPEncoderDecoderAbstract_somGetClassName *somTD_SOMPEncoderDecoderAbstract_somGetClassName;
typedef long   SOMLINK somTP_SOMPEncoderDecoderAbstract_somGetSize(SOMPEncoderDecoderAbstract *somSelf);
typedef somTP_SOMPEncoderDecoderAbstract_somGetSize *somTD_SOMPEncoderDecoderAbstract_somGetSize;
typedef boolean   SOMLINK somTP_SOMPEncoderDecoderAbstract_somIsA(SOMPEncoderDecoderAbstract *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMPEncoderDecoderAbstract_somIsA *somTD_SOMPEncoderDecoderAbstract_somIsA;
typedef boolean   SOMLINK somTP_SOMPEncoderDecoderAbstract_somIsInstanceOf(SOMPEncoderDecoderAbstract *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMPEncoderDecoderAbstract_somIsInstanceOf *somTD_SOMPEncoderDecoderAbstract_somIsInstanceOf;
typedef boolean   SOMLINK somTP_SOMPEncoderDecoderAbstract_somRespondsTo(SOMPEncoderDecoderAbstract *somSelf, 
		somId mId);
typedef somTP_SOMPEncoderDecoderAbstract_somRespondsTo *somTD_SOMPEncoderDecoderAbstract_somRespondsTo;
typedef boolean   SOMLINK somTP_SOMPEncoderDecoderAbstract_somDispatch(SOMPEncoderDecoderAbstract *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMPEncoderDecoderAbstract_somDispatch *somTD_SOMPEncoderDecoderAbstract_somDispatch;
typedef boolean   SOMLINK somTP_SOMPEncoderDecoderAbstract_somClassDispatch(SOMPEncoderDecoderAbstract *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMPEncoderDecoderAbstract_somClassDispatch *somTD_SOMPEncoderDecoderAbstract_somClassDispatch;
typedef boolean   SOMLINK somTP_SOMPEncoderDecoderAbstract_somCastObj(SOMPEncoderDecoderAbstract *somSelf, 
		SOMClass* cls);
typedef somTP_SOMPEncoderDecoderAbstract_somCastObj *somTD_SOMPEncoderDecoderAbstract_somCastObj;
typedef boolean   SOMLINK somTP_SOMPEncoderDecoderAbstract_somResetObj(SOMPEncoderDecoderAbstract *somSelf);
typedef somTP_SOMPEncoderDecoderAbstract_somResetObj *somTD_SOMPEncoderDecoderAbstract_somResetObj;
typedef void   SOMLINK somTP_SOMPEncoderDecoderAbstract_somDispatchV(SOMPEncoderDecoderAbstract *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPEncoderDecoderAbstract_somDispatchV *somTD_SOMPEncoderDecoderAbstract_somDispatchV;
typedef long   SOMLINK somTP_SOMPEncoderDecoderAbstract_somDispatchL(SOMPEncoderDecoderAbstract *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPEncoderDecoderAbstract_somDispatchL *somTD_SOMPEncoderDecoderAbstract_somDispatchL;
typedef void*   SOMLINK somTP_SOMPEncoderDecoderAbstract_somDispatchA(SOMPEncoderDecoderAbstract *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPEncoderDecoderAbstract_somDispatchA *somTD_SOMPEncoderDecoderAbstract_somDispatchA;
typedef double   SOMLINK somTP_SOMPEncoderDecoderAbstract_somDispatchD(SOMPEncoderDecoderAbstract *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPEncoderDecoderAbstract_somDispatchD *somTD_SOMPEncoderDecoderAbstract_somDispatchD;
typedef SOMObject*   SOMLINK somTP_SOMPEncoderDecoderAbstract_somPrintSelf(SOMPEncoderDecoderAbstract *somSelf);
typedef somTP_SOMPEncoderDecoderAbstract_somPrintSelf *somTD_SOMPEncoderDecoderAbstract_somPrintSelf;
typedef void   SOMLINK somTP_SOMPEncoderDecoderAbstract_somDumpSelf(SOMPEncoderDecoderAbstract *somSelf, 
		long level);
typedef somTP_SOMPEncoderDecoderAbstract_somDumpSelf *somTD_SOMPEncoderDecoderAbstract_somDumpSelf;
typedef void   SOMLINK somTP_SOMPEncoderDecoderAbstract_somDumpSelfInt(SOMPEncoderDecoderAbstract *somSelf, 
		long level);
typedef somTP_SOMPEncoderDecoderAbstract_somDumpSelfInt *somTD_SOMPEncoderDecoderAbstract_somDumpSelfInt;
}

#endif /* SOMPEncoderDecoderAbstract_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMPEncoderDecoderAbstract
 */
class SOMPEncoderDecoderAbstract : public SOMObject
{
/*
 *  This is the abstract class for an EncoderDecoder.
 * 
 *  An encoder/decoder is an object which is paired with a persistent object
 *  and handles the reading/writing of that persistent object's instance
 *  data.  A class derived from this abstract class must be created and
 *  paired with a persistent object in order for that persistent object
 *  to be save/restored.
 * 
 *  The derived encoder/decoder class name is bound to a persistent
 *  object with the sompSetEncoderDecoderName method (see po.sc).
 * 
 *  A persistent object's encoder/decoder is instantiated by an
 *  IO Group Mgr at the moment that object is save/restored.
 */
public:

// SOMPEncoderDecoderAbstract::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMPEncoderDecoderAbstract) SOMPEncoderDecoderAbstractNewClass(SOMPEncoderDecoderAbstract_MajorVersion,SOMPEncoderDecoderAbstract_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMPEncoderDecoderAbstract,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMPEncoderDecoderAbstract));
}

// SOMPEncoderDecoderAbstract::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

SOMPEncoderDecoderAbstract& operator=(SOMPEncoderDecoderAbstract& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

SOMPEncoderDecoderAbstract()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMPEncoderDecoderAbstractCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMPEncoderDecoderAbstract(SOMPEncoderDecoderAbstract* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMPEncoderDecoderAbstractCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
SOMPEncoderDecoderAbstract(const SOMPEncoderDecoderAbstract* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMPEncoderDecoderAbstractCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: sompEDWrite */
void   sompEDWrite(Environment *ev, 
		SOMPMediaInterfaceAbstract* thisMedia, 
		SOMPPersistentObject* thisObject)
{
/*
 *  This method is responsible for writing out the persistent data of
 *  object <thisObject> in a format that is compatible with sompEDRead.
 *  This routine should make use of the media interface that is passed in
 *  as the first argument <thisMedia>.  This method should assume that
 *  the media interface has been initialized and opened.  This method
 *  should also assume that the media interface will be closed by the
 *  caller of this method.
 * 
 *  Refer to the class interface of the media interface passed in for
 *  the methods which can be used to write instance data.
 */
   SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMPEncoderDecoderAbstract,sompEDWrite)
	(this, ev,thisMedia,thisObject);
}


/* method: sompEDRead */
void   sompEDRead(Environment *ev, 
		SOMPMediaInterfaceAbstract* thisMedia, 
		SOMPPersistentObject* thisObject)
{
/*
 *  This method is responsible for reading in the persistent data of
 *  object <thisObject>.  It should expect the data to be in the format
 *  of sompEDWrite.  This routine should make use of the media interface
 *  that is passed in as the first argument <thisMedia>.  This method
 *  should assume that the media interface has been initialized and
 *  opened.  This method should also assume that the media interface will
 *  be closed by the caller of this method.
 * 
 *  Refer to the class interface of the media interface passed in for
 *  the methods which can be used to read instance data.
 */
   SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMPEncoderDecoderAbstract,sompEDRead)
	(this, ev,thisMedia,thisObject);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMPEncoderDecoderAbstract*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMPEncoderDecoderAbstract*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMPEncoderDecoderAbstract*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMPEncoderDecoderAbstract*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   SOMPEncoderDecoderAbstract_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   SOMPEncoderDecoderAbstract_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   SOMPEncoderDecoderAbstract_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   SOMPEncoderDecoderAbstract_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   SOMPEncoderDecoderAbstract_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   SOMPEncoderDecoderAbstract_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,SOMPEncoderDecoderAbstract,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* SOMPEncoderDecoderAbstract */



#endif       /* SOM_SOMPEncoderDecoderAbstract_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: thash.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    COMPONENT_NAME: somuc
 * 
 *    ORIGINS: 82, 81, 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *    Copyright © 1988, 1989 Apple Computer, Inc. All rights reserved.
 * 
 * CLASS_NAME: somf_THashTable
 * 
 * DESCRIPTION: Every Hash Table has a set of entries which associate a
 *              key to a value.  Hash tables provide for fast lookup of a
 *              value when given a key even if there are a large number of
 *              entries in the table.  Functions are provided for the usual
 *              things (insert, delete, etc.) as well as for controlling when
 *              rehashing will occur, and the growth of the table when a
 *              rehash occurs.
 * 
 */


#ifndef SOM_somf_THashTable_xh
#define SOM_somf_THashTable_xh

class somf_THashTable;

#define somf_THashTable_MajorVersion 2
#define somf_THashTable_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_somf_MCollectible_xh
#include <mcollect.xh>
#endif

#ifndef somf_THashTable_API
#define somf_THashTable_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class THAssoc;
#define somf_THashTable_kDefaultHashTableSize 23 /* 23 */
#define somf_THashTable_kDefaultGrowthRate 20 /* 20 */
#define somf_THashTable_kDefaultRehashThreshold 80 /* 80 */
typedef unsigned long somf_THashTable_ETableClassification;
#define somf_THashTable_kUnchecked 1UL
#define somf_THashTable_kNormal 2UL
#define somf_THashTable_kFast 3UL

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_kDefaultHashTableSize
    #ifdef kDefaultHashTableSize
        #undef kDefaultHashTableSize
        #define SOMTGD_kDefaultHashTableSize 1
    #else
        #define kDefaultHashTableSize somf_THashTable_kDefaultHashTableSize
    #endif /* kDefaultHashTableSize */
#endif /* SOMTGD_kDefaultHashTableSize */
#ifndef SOMTGD_kDefaultGrowthRate
    #ifdef kDefaultGrowthRate
        #undef kDefaultGrowthRate
        #define SOMTGD_kDefaultGrowthRate 1
    #else
        #define kDefaultGrowthRate somf_THashTable_kDefaultGrowthRate
    #endif /* kDefaultGrowthRate */
#endif /* SOMTGD_kDefaultGrowthRate */
#ifndef SOMTGD_kDefaultRehashThreshold
    #ifdef kDefaultRehashThreshold
        #undef kDefaultRehashThreshold
        #define SOMTGD_kDefaultRehashThreshold 1
    #else
        #define kDefaultRehashThreshold somf_THashTable_kDefaultRehashThreshold
    #endif /* kDefaultRehashThreshold */
#endif /* SOMTGD_kDefaultRehashThreshold */
#ifndef SOMTGD_ETableClassification
    #ifdef ETableClassification
        #undef ETableClassification
        #define SOMTGD_ETableClassification 1
    #else
        #define ETableClassification somf_THashTable_ETableClassification
    #endif /* ETableClassification */
#endif /* SOMTGD_ETableClassification */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the somf_THashTable Class */
SOMEXTERN SOMClass * SOMLINK somf_THashTableNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the somf_THashTable class object, and the methods it introduces. */
SOMEXTERN struct somf_THashTableClassDataStructure {
	SOMClass *classObject;
	somMToken somfCount;
	somMToken somfRemove;
	somMToken somfDelete;
	somMToken somfMember;
	somMToken somfRemoveAll;
	somMToken somfDeleteAll;
	somMToken somfDeleteAllKeys;
	somMToken somfDeleteAllValues;
	somMToken somfAddMMB;
	somMToken somfAddMM;
	somMToken somfGrow;
	somMToken somfRetrieve;
	somMToken somfSetGrowthRate;
	somMToken somfSetRehashThreshold;
	somMToken somfGetGrowthRate;
	somMToken somfGetRehashThreshold;
	somMToken somfSetHashFunction;
	somMToken somfGetHashFunction;
	somMToken somfFind;
	somMToken somfMakeNewTable;
	somMToken somfCopyIn;
	somMToken somfAssign;
	somMToken somfTHashTableInitFLLL;
	somMToken somfTHashTableInitFLL;
	somMToken somfTHashTableInitFL;
	somMToken somfTHashTableInitH;
} SOMDLINK somf_THashTableClassData;
#define _somf_THashTable somf_THashTableClassData.classObject

/* The API to parentMtabs for somf_THashTable, and the instance data it introduces. */
SOMEXTERN struct somf_THashTableCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK somf_THashTableCClassData;

/*
 * -- Typedefs for somf_THashTable Method Procedures
 */
SOMEXTERN {
typedef somf_THashTable*   SOMLINK somTP_somf_THashTable_somfTHashTableInitFLLL(somf_THashTable *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn, 
		long tablesize, 
		long rate, 
		long threshold);
typedef somTP_somf_THashTable_somfTHashTableInitFLLL *somTD_somf_THashTable_somfTHashTableInitFLLL;
typedef somf_THashTable*   SOMLINK somTP_somf_THashTable_somfTHashTableInitFLL(somf_THashTable *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn, 
		long tablesize, 
		long rate);
typedef somTP_somf_THashTable_somfTHashTableInitFLL *somTD_somf_THashTable_somfTHashTableInitFLL;
typedef somf_THashTable*   SOMLINK somTP_somf_THashTable_somfTHashTableInitFL(somf_THashTable *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn, 
		long tablesize);
typedef somTP_somf_THashTable_somfTHashTableInitFL *somTD_somf_THashTable_somfTHashTableInitFL;
typedef somf_THashTable*   SOMLINK somTP_somf_THashTable_somfTHashTableInitH(somf_THashTable *somSelf, Environment *ev, 
		somf_THashTable* h);
typedef somTP_somf_THashTable_somfTHashTableInitH *somTD_somf_THashTable_somfTHashTableInitH;
typedef void   SOMLINK somTP_somf_THashTable_somfAssign(somf_THashTable *somSelf, Environment *ev, 
		somf_THashTable* source);
typedef somTP_somf_THashTable_somfAssign *somTD_somf_THashTable_somfAssign;
typedef long   SOMLINK somTP_somf_THashTable_somfCount(somf_THashTable *somSelf, Environment *ev);
typedef somTP_somf_THashTable_somfCount *somTD_somf_THashTable_somfCount;
typedef somf_MCollectible*   SOMLINK somTP_somf_THashTable_somfRemove(somf_THashTable *somSelf, Environment *ev, 
		somf_MCollectible* key);
typedef somTP_somf_THashTable_somfRemove *somTD_somf_THashTable_somfRemove;
typedef somf_MCollectible*   SOMLINK somTP_somf_THashTable_somfDelete(somf_THashTable *somSelf, Environment *ev, 
		somf_MCollectible* key);
typedef somTP_somf_THashTable_somfDelete *somTD_somf_THashTable_somfDelete;
typedef somf_MCollectible*   SOMLINK somTP_somf_THashTable_somfMember(somf_THashTable *somSelf, Environment *ev, 
		somf_MCollectible* key);
typedef somTP_somf_THashTable_somfMember *somTD_somf_THashTable_somfMember;
typedef void   SOMLINK somTP_somf_THashTable_somfRemoveAll(somf_THashTable *somSelf, Environment *ev);
typedef somTP_somf_THashTable_somfRemoveAll *somTD_somf_THashTable_somfRemoveAll;
typedef void   SOMLINK somTP_somf_THashTable_somfDeleteAll(somf_THashTable *somSelf, Environment *ev);
typedef somTP_somf_THashTable_somfDeleteAll *somTD_somf_THashTable_somfDeleteAll;
typedef void   SOMLINK somTP_somf_THashTable_somfDeleteAllKeys(somf_THashTable *somSelf, Environment *ev);
typedef somTP_somf_THashTable_somfDeleteAllKeys *somTD_somf_THashTable_somfDeleteAllKeys;
typedef void   SOMLINK somTP_somf_THashTable_somfDeleteAllValues(somf_THashTable *somSelf, Environment *ev);
typedef somTP_somf_THashTable_somfDeleteAllValues *somTD_somf_THashTable_somfDeleteAllValues;
typedef somf_MCollectible*   SOMLINK somTP_somf_THashTable_somfAddMMB(somf_THashTable *somSelf, Environment *ev, 
		somf_MCollectible* key, 
		somf_MCollectible* value, 
		boolean replace);
typedef somTP_somf_THashTable_somfAddMMB *somTD_somf_THashTable_somfAddMMB;
typedef somf_MCollectible*   SOMLINK somTP_somf_THashTable_somfAddMM(somf_THashTable *somSelf, Environment *ev, 
		somf_MCollectible* key, 
		somf_MCollectible* value);
typedef somTP_somf_THashTable_somfAddMM *somTD_somf_THashTable_somfAddMM;
typedef void   SOMLINK somTP_somf_THashTable_somfGrow(somf_THashTable *somSelf, Environment *ev);
typedef somTP_somf_THashTable_somfGrow *somTD_somf_THashTable_somfGrow;
typedef somf_MCollectible*   SOMLINK somTP_somf_THashTable_somfRetrieve(somf_THashTable *somSelf, Environment *ev, 
		somf_MCollectible* key);
typedef somTP_somf_THashTable_somfRetrieve *somTD_somf_THashTable_somfRetrieve;
typedef void   SOMLINK somTP_somf_THashTable_somfSetGrowthRate(somf_THashTable *somSelf, Environment *ev, 
		long rate);
typedef somTP_somf_THashTable_somfSetGrowthRate *somTD_somf_THashTable_somfSetGrowthRate;
typedef void   SOMLINK somTP_somf_THashTable_somfSetRehashThreshold(somf_THashTable *somSelf, Environment *ev, 
		long threshold);
typedef somTP_somf_THashTable_somfSetRehashThreshold *somTD_somf_THashTable_somfSetRehashThreshold;
typedef long   SOMLINK somTP_somf_THashTable_somfGetGrowthRate(somf_THashTable *somSelf, Environment *ev);
typedef somTP_somf_THashTable_somfGetGrowthRate *somTD_somf_THashTable_somfGetGrowthRate;
typedef long   SOMLINK somTP_somf_THashTable_somfGetRehashThreshold(somf_THashTable *somSelf, Environment *ev);
typedef somTP_somf_THashTable_somfGetRehashThreshold *somTD_somf_THashTable_somfGetRehashThreshold;
typedef void   SOMLINK somTP_somf_THashTable_somfSetHashFunction(somf_THashTable *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleHashFn fn);
typedef somTP_somf_THashTable_somfSetHashFunction *somTD_somf_THashTable_somfSetHashFunction;
typedef somf_MCollectible_somf_MCollectibleHashFn   SOMLINK somTP_somf_THashTable_somfGetHashFunction(somf_THashTable *somSelf, Environment *ev);
typedef somTP_somf_THashTable_somfGetHashFunction *somTD_somf_THashTable_somfGetHashFunction;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef somf_MCollectible*   SOMLINK somTP_somf_THashTable_somfClone(somf_THashTable *somSelf, Environment *ev);
typedef somTP_somf_THashTable_somfClone *somTD_somf_THashTable_somfClone;
typedef somf_MCollectible*   SOMLINK somTP_somf_THashTable_somfClonePointer(somf_THashTable *somSelf, Environment *ev, 
		somf_MCollectible* clonee);
typedef somTP_somf_THashTable_somfClonePointer *somTD_somf_THashTable_somfClonePointer;
typedef long   SOMLINK somTP_somf_THashTable_somfHash(somf_THashTable *somSelf, Environment *ev);
typedef somTP_somf_THashTable_somfHash *somTD_somf_THashTable_somfHash;
typedef boolean   SOMLINK somTP_somf_THashTable_somfIsEqual(somf_THashTable *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_THashTable_somfIsEqual *somTD_somf_THashTable_somfIsEqual;
typedef boolean   SOMLINK somTP_somf_THashTable_somfIsSame(somf_THashTable *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_THashTable_somfIsSame *somTD_somf_THashTable_somfIsSame;
typedef boolean   SOMLINK somTP_somf_THashTable_somfIsNotEqual(somf_THashTable *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_THashTable_somfIsNotEqual *somTD_somf_THashTable_somfIsNotEqual;
typedef void   SOMLINK somTP_somf_THashTable_somDefaultInit(somf_THashTable *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_somf_THashTable_somDefaultInit *somTD_somf_THashTable_somDefaultInit;
typedef void   SOMLINK somTP_somf_THashTable_somDestruct(somf_THashTable *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_somf_THashTable_somDestruct *somTD_somf_THashTable_somDestruct;
typedef void   SOMLINK somTP_somf_THashTable_somDefaultCopyInit(somf_THashTable *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_THashTable_somDefaultCopyInit *somTD_somf_THashTable_somDefaultCopyInit;
typedef somf_THashTable*   SOMLINK somTP_somf_THashTable_somDefaultAssign(somf_THashTable *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_THashTable_somDefaultAssign *somTD_somf_THashTable_somDefaultAssign;
typedef void   SOMLINK somTP_somf_THashTable_somDefaultConstCopyInit(somf_THashTable *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_THashTable_somDefaultConstCopyInit *somTD_somf_THashTable_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_somf_THashTable_somDefaultVCopyInit(somf_THashTable *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_THashTable_somDefaultVCopyInit *somTD_somf_THashTable_somDefaultVCopyInit;
typedef void   SOMLINK somTP_somf_THashTable_somDefaultConstVCopyInit(somf_THashTable *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_THashTable_somDefaultConstVCopyInit *somTD_somf_THashTable_somDefaultConstVCopyInit;
typedef somf_THashTable*   SOMLINK somTP_somf_THashTable_somDefaultConstAssign(somf_THashTable *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_THashTable_somDefaultConstAssign *somTD_somf_THashTable_somDefaultConstAssign;
typedef somf_THashTable*   SOMLINK somTP_somf_THashTable_somDefaultVAssign(somf_THashTable *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_THashTable_somDefaultVAssign *somTD_somf_THashTable_somDefaultVAssign;
typedef somf_THashTable*   SOMLINK somTP_somf_THashTable_somDefaultConstVAssign(somf_THashTable *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_THashTable_somDefaultConstVAssign *somTD_somf_THashTable_somDefaultConstVAssign;
typedef void   SOMLINK somTP_somf_THashTable_somInit(somf_THashTable *somSelf);
typedef somTP_somf_THashTable_somInit *somTD_somf_THashTable_somInit;
typedef void   SOMLINK somTP_somf_THashTable_somFree(somf_THashTable *somSelf);
typedef somTP_somf_THashTable_somFree *somTD_somf_THashTable_somFree;
typedef void   SOMLINK somTP_somf_THashTable_somUninit(somf_THashTable *somSelf);
typedef somTP_somf_THashTable_somUninit *somTD_somf_THashTable_somUninit;
typedef SOMClass*   SOMLINK somTP_somf_THashTable_somGetClass(somf_THashTable *somSelf);
typedef somTP_somf_THashTable_somGetClass *somTD_somf_THashTable_somGetClass;
typedef string   SOMLINK somTP_somf_THashTable_somGetClassName(somf_THashTable *somSelf);
typedef somTP_somf_THashTable_somGetClassName *somTD_somf_THashTable_somGetClassName;
typedef long   SOMLINK somTP_somf_THashTable_somGetSize(somf_THashTable *somSelf);
typedef somTP_somf_THashTable_somGetSize *somTD_somf_THashTable_somGetSize;
typedef boolean   SOMLINK somTP_somf_THashTable_somIsA(somf_THashTable *somSelf, 
		SOMClass* aClassObj);
typedef somTP_somf_THashTable_somIsA *somTD_somf_THashTable_somIsA;
typedef boolean   SOMLINK somTP_somf_THashTable_somIsInstanceOf(somf_THashTable *somSelf, 
		SOMClass* aClassObj);
typedef somTP_somf_THashTable_somIsInstanceOf *somTD_somf_THashTable_somIsInstanceOf;
typedef boolean   SOMLINK somTP_somf_THashTable_somRespondsTo(somf_THashTable *somSelf, 
		somId mId);
typedef somTP_somf_THashTable_somRespondsTo *somTD_somf_THashTable_somRespondsTo;
typedef boolean   SOMLINK somTP_somf_THashTable_somDispatch(somf_THashTable *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_somf_THashTable_somDispatch *somTD_somf_THashTable_somDispatch;
typedef boolean   SOMLINK somTP_somf_THashTable_somClassDispatch(somf_THashTable *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_somf_THashTable_somClassDispatch *somTD_somf_THashTable_somClassDispatch;
typedef boolean   SOMLINK somTP_somf_THashTable_somCastObj(somf_THashTable *somSelf, 
		SOMClass* cls);
typedef somTP_somf_THashTable_somCastObj *somTD_somf_THashTable_somCastObj;
typedef boolean   SOMLINK somTP_somf_THashTable_somResetObj(somf_THashTable *somSelf);
typedef somTP_somf_THashTable_somResetObj *somTD_somf_THashTable_somResetObj;
typedef void   SOMLINK somTP_somf_THashTable_somDispatchV(somf_THashTable *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_THashTable_somDispatchV *somTD_somf_THashTable_somDispatchV;
typedef long   SOMLINK somTP_somf_THashTable_somDispatchL(somf_THashTable *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_THashTable_somDispatchL *somTD_somf_THashTable_somDispatchL;
typedef void*   SOMLINK somTP_somf_THashTable_somDispatchA(somf_THashTable *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_THashTable_somDispatchA *somTD_somf_THashTable_somDispatchA;
typedef double   SOMLINK somTP_somf_THashTable_somDispatchD(somf_THashTable *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_THashTable_somDispatchD *somTD_somf_THashTable_somDispatchD;
typedef SOMObject*   SOMLINK somTP_somf_THashTable_somPrintSelf(somf_THashTable *somSelf);
typedef somTP_somf_THashTable_somPrintSelf *somTD_somf_THashTable_somPrintSelf;
typedef void   SOMLINK somTP_somf_THashTable_somDumpSelf(somf_THashTable *somSelf, 
		long level);
typedef somTP_somf_THashTable_somDumpSelf *somTD_somf_THashTable_somDumpSelf;
typedef void   SOMLINK somTP_somf_THashTable_somDumpSelfInt(somf_THashTable *somSelf, 
		long level);
typedef somTP_somf_THashTable_somDumpSelfInt *somTD_somf_THashTable_somDumpSelfInt;
}

#endif /* somf_THashTable_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for somf_THashTable
 */
class somf_THashTable : public somf_MCollectible
{
public:

// somf_THashTable::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_somf_THashTable) somf_THashTableNewClass(somf_THashTable_MajorVersion,somf_THashTable_MinorVersion);
   return (void*)
      SOM_Resolve(_somf_THashTable,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_somf_THashTable));
}

// somf_THashTable::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

somf_THashTable& operator=(somf_THashTable& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

somf_THashTable()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_THashTableCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

somf_THashTable(somf_THashTable* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_THashTableCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
somf_THashTable(const somf_THashTable* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_THashTableCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: somfTHashTableInitFLLL */
somf_THashTable*   somfTHashTableInitFLLL(Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn, 
		long tablesize, 
		long rate, 
		long threshold)
{
/*
 *  Initializes the new hash table.
 */
   return SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfTHashTableInitFLLL)
	(this, ev,testfn,tablesize,rate,threshold);
}


/* method: somfTHashTableInitFLL */
somf_THashTable*   somfTHashTableInitFLL(Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn, 
		long tablesize, 
		long rate)
{
/*
 *  Initializes the new hash table.
 */
   return SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfTHashTableInitFLL)
	(this, ev,testfn,tablesize,rate);
}


/* method: somfTHashTableInitFL */
somf_THashTable*   somfTHashTableInitFL(Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn, 
		long tablesize)
{
/*
 *  Initializes the new hash table.
 */
   return SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfTHashTableInitFL)
	(this, ev,testfn,tablesize);
}


/* method: somfTHashTableInitH */
somf_THashTable*   somfTHashTableInitH(Environment *ev, 
		somf_THashTable* h)
{
/*
 *  Initializes the new hash table.
 */
   return SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfTHashTableInitH)
	(this, ev,h);
}


/* method: somfAssign */
void   somfAssign(Environment *ev, 
		somf_THashTable* source)
{
/*
 *  Assign the instance of this equal to the instance of source.
 */
   SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfAssign)
	(this, ev,source);
}


/* method: somfCount */
long   somfCount(Environment *ev)
{
/*
 *  Return the number of objects in this.
 */
   return SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfCount)
	(this, ev);
}


/* method: somfRemove */
somf_MCollectible*   somfRemove(Environment *ev, 
		somf_MCollectible* key)
{
/*
 *  Remove obj from this.  Return the object which was actually removed
 *  (which if you are using an IsSame test function may not be the same
 *  as the object passed in only "equal").
 */
   return SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfRemove)
	(this, ev,key);
}


/* method: somfDelete */
somf_MCollectible*   somfDelete(Environment *ev, 
		somf_MCollectible* key)
{
/*
 *  Remove key from this and deallocate the storage that these objects might
 *  have owned (that is, the destructor function is called for each object
 *  in the collection).  Return the object which was actually removed (which
 *  if you are using an IsSame test function may not be the same as the object
 *  passed in only "equal").
 */
   return SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfDelete)
	(this, ev,key);
}


/* method: somfMember */
somf_MCollectible*   somfMember(Environment *ev, 
		somf_MCollectible* key)
{
/*
 *  Each object in this is compared to obj using the function testFn.  Return the
 *  object for which testFn returned TRUE.  Return SOMF_NIL if not object was found.
 */
   return SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfMember)
	(this, ev,key);
}


/* method: somfRemoveAll */
void   somfRemoveAll(Environment *ev)
{
/*
 *  Remove all of the objects from this.
 */
   SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfRemoveAll)
	(this, ev);
}


/* method: somfDeleteAll */
void   somfDeleteAll(Environment *ev)
{
/*
 *  Remove all of the objects from this and deallocate the storage that these
 *  objects might have owned (that is, the destructor function is called
 *  for each object in the collection).
 */
   SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfDeleteAll)
	(this, ev);
}


/* method: somfDeleteAllKeys */
void   somfDeleteAllKeys(Environment *ev)
{
/*
 *  Remove all of the keys from this and deallocate the storage that these
 *  objects might have owned (that is, the destructor function is called
 *  for each object in the collection).
 */
   SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfDeleteAllKeys)
	(this, ev);
}


/* method: somfDeleteAllValues */
void   somfDeleteAllValues(Environment *ev)
{
/*
 *  Remove all of the values from this and deallocate the storage that these
 *  objects might have owned (that is, the destructor function is called
 *  for each object in the collection).
 */
   SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfDeleteAllValues)
	(this, ev);
}


/* method: somfAddMMB */
somf_MCollectible*   somfAddMMB(Environment *ev, 
		somf_MCollectible* key, 
		somf_MCollectible* value, 
		boolean replace)
{
/*
 *  Add key and value to this.  If replace = TRUE, replace a copy if it already
 *  exists.
 */
   return SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfAddMMB)
	(this, ev,key,value,replace);
}


/* method: somfAddMM */
somf_MCollectible*   somfAddMM(Environment *ev, 
		somf_MCollectible* key, 
		somf_MCollectible* value)
{
/*
 *  Add key and value to this.  Replace a copy if it already exists.
 */
   return SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfAddMM)
	(this, ev,key,value);
}


/* method: somfGrow */
void   somfGrow(Environment *ev)
{
/*
 *  Grow the Hash Table
 */
   SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfGrow)
	(this, ev);
}


/* method: somfRetrieve */
somf_MCollectible*   somfRetrieve(Environment *ev, 
		somf_MCollectible* key)
{
/*
 *  Retrieve and return the value associated with key.
 */
   return SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfRetrieve)
	(this, ev,key);
}


/* method: somfSetGrowthRate */
void   somfSetGrowthRate(Environment *ev, 
		long rate)
{
/*
 *  Set the growth rate of the hash table.
 */
   SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfSetGrowthRate)
	(this, ev,rate);
}


/* method: somfSetRehashThreshold */
void   somfSetRehashThreshold(Environment *ev, 
		long threshold)
{
/*
 *  Set the rehash threshold of the hash table.
 */
   SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfSetRehashThreshold)
	(this, ev,threshold);
}


/* method: somfGetGrowthRate */
long   somfGetGrowthRate(Environment *ev)
{
/*
 *  Return the growth rate of the hash table.
 */
   return SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfGetGrowthRate)
	(this, ev);
}


/* method: somfGetRehashThreshold */
long   somfGetRehashThreshold(Environment *ev)
{
/*
 *  Return the rehash threshold of the hash table.
 */
   return SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfGetRehashThreshold)
	(this, ev);
}


/* method: somfSetHashFunction */
void   somfSetHashFunction(Environment *ev, 
		somf_MCollectible_somf_MCollectibleHashFn fn)
{
/*
 *  Set the hash function to fn.
 */
   SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfSetHashFunction)
	(this, ev,fn);
}


/* method: somfGetHashFunction */
somf_MCollectible_somf_MCollectibleHashFn   somfGetHashFunction(Environment *ev)
{
/*
 *  Return the hash function.
 */
   return SOM_ResolveD(this,somf_THashTable,somf_THashTable,somfGetHashFunction)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: somfClone */
somf_MCollectible*   somfClone(Environment *ev)
{
/*
 *  somfClone provides a general function for creating a new instance of this.
 */
   return SOM_ResolveD(this,somf_THashTable,somf_MCollectible,somfClone)
	(this, ev);
}


/* method: somfClonePointer */
somf_MCollectible*   somfClonePointer(Environment *ev, 
		somf_MCollectible* clonee)
{
/*
 *  somfClonePointer returns a pointer to a Clone
 */
   return SOM_ResolveD(this,somf_THashTable,somf_MCollectible,somfClonePointer)
	(this, ev,clonee);
}


/* method: somfHash */
long   somfHash(Environment *ev)
{
/*
 *  somfHash returns a value suitable for use as a hashing probe for this.
 *  The default function will simply return the address of the object.
 *  The default function is almost certainly not adequate if you are overriding
 *  somfIsEqual because you need to make sure that all objects that "are equal"
 *  to each other return the same hash value.  For example, a TText object would
 *  return a hash value computed using the characters in the string instead of
 *  the address of the string.
 */
   return SOM_ResolveD(this,somf_THashTable,somf_MCollectible,somfHash)
	(this, ev);
}


/* method: somfIsEqual */
boolean   somfIsEqual(Environment *ev, 
		somf_MCollectible* obj)
{
/*
 *  somfIsEqual returns TRUE if obj is isomorphic to this.  The default function
 *  will give you a nasty message.  For example, the somfIsEqual method
 *  for TText objects will do a string comparison.  All of the utility classes
 *  allow you to specify what methods to use when comparing objects for
 *  insertion, deletion, etc.
 */
   return SOM_ResolveD(this,somf_THashTable,somf_MCollectible,somfIsEqual)
	(this, ev,obj);
}


/* method: somfIsSame */
boolean   somfIsSame(Environment *ev, 
		somf_MCollectible* obj)
{
/*
 *  The default function for somfIsSame is a pointer comparison
 */
   return SOM_ResolveD(this,somf_THashTable,somf_MCollectible,somfIsSame)
	(this, ev,obj);
}


/* method: somfIsNotEqual */
boolean   somfIsNotEqual(Environment *ev, 
		somf_MCollectible* obj)
{
/*
 *  somfIsNotEqual returns TRUE if obj is NOT isomorphic to this.  It uses
 *  somfIsEqual, so overriding somfIsEqual will handle the logic of somfIsNotEqual too.
 */
   return SOM_ResolveD(this,somf_THashTable,somf_MCollectible,somfIsNotEqual)
	(this, ev,obj);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,somf_THashTable,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,somf_THashTable,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,somf_THashTable,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
somf_THashTable*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,somf_THashTable,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,somf_THashTable,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,somf_THashTable,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,somf_THashTable,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
somf_THashTable*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,somf_THashTable,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
somf_THashTable*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,somf_THashTable,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
somf_THashTable*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,somf_THashTable,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,somf_THashTable,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,somf_THashTable,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,somf_THashTable,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,somf_THashTable,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,somf_THashTable,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,somf_THashTable,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,somf_THashTable,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,somf_THashTable,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,somf_THashTable,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   somf_THashTable_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,somf_THashTable,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,somf_THashTable,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   somf_THashTable_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,somf_THashTable,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,somf_THashTable,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,somf_THashTable,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,somf_THashTable,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   somf_THashTable_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,somf_THashTable,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,somf_THashTable,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   somf_THashTable_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,somf_THashTable,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,somf_THashTable,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   somf_THashTable_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,somf_THashTable,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,somf_THashTable,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   somf_THashTable_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,somf_THashTable,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,somf_THashTable,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,somf_THashTable,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,somf_THashTable,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,somf_THashTable,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* somf_THashTable */



#endif       /* SOM_somf_THashTable_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: scbase.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *   COMPONENT_NAME: some
 * 
 *   ORIGINS: 27
 * 
 * 
 *    25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1994,1996
 *   All Rights Reserved
 *   Licensed Materials - Property of IBM
 *   US Government Users Restricted Rights - Use, duplication or
 *   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *  @(#) somc/sctypes.h 2.7 12/26/95 16:26:17 [7/30/96 14:46:04]
 * 
 */


#ifndef SOM_SOMTBaseClassEntryC_xh
#define SOM_SOMTBaseClassEntryC_xh

class SOMTBaseClassEntryC;

#define SOMTBaseClassEntryC_MajorVersion 2
#define SOMTBaseClassEntryC_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMTEntryC_xh
#include <scentry.xh>
#endif

#ifndef SOMTBaseClassEntryC_API
#define SOMTBaseClassEntryC_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class SOMTEntryC;
class SOMTEmitC;
class SOMTMetaClassEntryC;
class SOMTAttributeEntryC;
class SOMTTypedefEntryC;
class SOMTBaseClassEntryC;
class SOMTPassthruEntryC;
class SOMTDataEntryC;
class SOMTMethodEntryC;
class SOMTClassEntryC;
class SOMTModuleEntryC;
class SOMTParameterEntryC;
class SOMTStructEntryC;
class SOMTUnionEntryC;
class SOMTEnumEntryC;
class SOMTConstEntryC;
class SOMTSequenceEntryC;
class SOMTStringEntryC;
class SOMTEnumNameEntryC;
class SOMTCommonEntryC;
class SOMTUserDefinedTypeEntryC;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the SOMTBaseClassEntryC Class */
SOMEXTERN SOMClass * SOMLINK SOMTBaseClassEntryCNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMTBaseClassEntryC class object, and the methods it introduces. */
SOMEXTERN struct SOMTBaseClassEntryCClassDataStructure {
	SOMClass *classObject;
	somMToken _get_somtBaseClassDef;
} SOMDLINK SOMTBaseClassEntryCClassData;
#define _SOMTBaseClassEntryC SOMTBaseClassEntryCClassData.classObject

/* The API to parentMtabs for SOMTBaseClassEntryC, and the instance data it introduces. */
SOMEXTERN struct SOMTBaseClassEntryCCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMTBaseClassEntryCCClassData;

/*
 * -- Typedefs for SOMTBaseClassEntryC Method Procedures
 */
SOMEXTERN {
typedef SOMTClassEntryC*   SOMLINK somTP_SOMTBaseClassEntryC__get_somtBaseClassDef(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC__get_somtBaseClassDef *somTD_SOMTBaseClassEntryC__get_somtBaseClassDef;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef string   SOMLINK somTP_SOMTBaseClassEntryC__get_somtEntryName(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC__get_somtEntryName *somTD_SOMTBaseClassEntryC__get_somtEntryName;
typedef void   SOMLINK somTP_SOMTBaseClassEntryC__set_somtEntryName(SOMTBaseClassEntryC *somSelf, 
		string somtEntryName);
typedef somTP_SOMTBaseClassEntryC__set_somtEntryName *somTD_SOMTBaseClassEntryC__set_somtEntryName;
typedef SOMTTypes   SOMLINK somTP_SOMTBaseClassEntryC__get_somtElementType(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC__get_somtElementType *somTD_SOMTBaseClassEntryC__get_somtElementType;
typedef void   SOMLINK somTP_SOMTBaseClassEntryC__set_somtElementType(SOMTBaseClassEntryC *somSelf, 
		SOMTTypes somtElementType);
typedef somTP_SOMTBaseClassEntryC__set_somtElementType *somTD_SOMTBaseClassEntryC__set_somtElementType;
typedef string   SOMLINK somTP_SOMTBaseClassEntryC__get_somtElementTypeName(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC__get_somtElementTypeName *somTD_SOMTBaseClassEntryC__get_somtElementTypeName;
typedef string   SOMLINK somTP_SOMTBaseClassEntryC__get_somtEntryComment(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC__get_somtEntryComment *somTD_SOMTBaseClassEntryC__get_somtEntryComment;
typedef unsigned long   SOMLINK somTP_SOMTBaseClassEntryC__get_somtSourceLineNumber(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC__get_somtSourceLineNumber *somTD_SOMTBaseClassEntryC__get_somtSourceLineNumber;
typedef TypeCode   SOMLINK somTP_SOMTBaseClassEntryC__get_somtTypeCode(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC__get_somtTypeCode *somTD_SOMTBaseClassEntryC__get_somtTypeCode;
typedef boolean   SOMLINK somTP_SOMTBaseClassEntryC__get_somtIsReference(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC__get_somtIsReference *somTD_SOMTBaseClassEntryC__get_somtIsReference;
typedef string   SOMLINK somTP_SOMTBaseClassEntryC__get_somtIDLScopedName(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC__get_somtIDLScopedName *somTD_SOMTBaseClassEntryC__get_somtIDLScopedName;
typedef string   SOMLINK somTP_SOMTBaseClassEntryC__get_somtCScopedName(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC__get_somtCScopedName *somTD_SOMTBaseClassEntryC__get_somtCScopedName;
typedef string   SOMLINK somTP_SOMTBaseClassEntryC_somtGetModifierValue(SOMTBaseClassEntryC *somSelf, 
		string modifierName);
typedef somTP_SOMTBaseClassEntryC_somtGetModifierValue *somTD_SOMTBaseClassEntryC_somtGetModifierValue;
typedef boolean   SOMLINK somTP_SOMTBaseClassEntryC_somtGetFirstModifier(SOMTBaseClassEntryC *somSelf, 
		string* modifierName, 
		string* modifierValue);
typedef somTP_SOMTBaseClassEntryC_somtGetFirstModifier *somTD_SOMTBaseClassEntryC_somtGetFirstModifier;
typedef boolean   SOMLINK somTP_SOMTBaseClassEntryC_somtGetNextModifier(SOMTBaseClassEntryC *somSelf, 
		string* modifierName, 
		string* modifierValue);
typedef somTP_SOMTBaseClassEntryC_somtGetNextModifier *somTD_SOMTBaseClassEntryC_somtGetNextModifier;
typedef long   SOMLINK somTP_SOMTBaseClassEntryC_somtFormatModifier(SOMTBaseClassEntryC *somSelf, 
		string buffer, 
		string name, 
		string value);
typedef somTP_SOMTBaseClassEntryC_somtFormatModifier *somTD_SOMTBaseClassEntryC_somtFormatModifier;
typedef long   SOMLINK somTP_SOMTBaseClassEntryC_somtGetModifierList(SOMTBaseClassEntryC *somSelf, 
		string buffer);
typedef somTP_SOMTBaseClassEntryC_somtGetModifierList *somTD_SOMTBaseClassEntryC_somtGetModifierList;
typedef long   SOMLINK somTP_SOMTBaseClassEntryC_somtSetSymbolsOnEntry(SOMTBaseClassEntryC *somSelf, 
		SOMTEmitC* emitter, 
		string prefix);
typedef somTP_SOMTBaseClassEntryC_somtSetSymbolsOnEntry *somTD_SOMTBaseClassEntryC_somtSetSymbolsOnEntry;
typedef void   SOMLINK somTP_SOMTBaseClassEntryC_somtSetEntryStruct(SOMTBaseClassEntryC *somSelf, 
		Entry* es);
typedef somTP_SOMTBaseClassEntryC_somtSetEntryStruct *somTD_SOMTBaseClassEntryC_somtSetEntryStruct;
typedef void   SOMLINK somTP_SOMTBaseClassEntryC_somInit(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC_somInit *somTD_SOMTBaseClassEntryC_somInit;
typedef void   SOMLINK somTP_SOMTBaseClassEntryC_somUninit(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC_somUninit *somTD_SOMTBaseClassEntryC_somUninit;
typedef SOMObject*   SOMLINK somTP_SOMTBaseClassEntryC_somPrintSelf(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC_somPrintSelf *somTD_SOMTBaseClassEntryC_somPrintSelf;
typedef void   SOMLINK somTP_SOMTBaseClassEntryC_somDumpSelfInt(SOMTBaseClassEntryC *somSelf, 
		long level);
typedef somTP_SOMTBaseClassEntryC_somDumpSelfInt *somTD_SOMTBaseClassEntryC_somDumpSelfInt;
typedef void   SOMLINK somTP_SOMTBaseClassEntryC_somDumpSelf(SOMTBaseClassEntryC *somSelf, 
		long level);
typedef somTP_SOMTBaseClassEntryC_somDumpSelf *somTD_SOMTBaseClassEntryC_somDumpSelf;
typedef void   SOMLINK somTP_SOMTBaseClassEntryC_somDefaultInit(SOMTBaseClassEntryC *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_SOMTBaseClassEntryC_somDefaultInit *somTD_SOMTBaseClassEntryC_somDefaultInit;
typedef void   SOMLINK somTP_SOMTBaseClassEntryC_somDestruct(SOMTBaseClassEntryC *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_SOMTBaseClassEntryC_somDestruct *somTD_SOMTBaseClassEntryC_somDestruct;
typedef void   SOMLINK somTP_SOMTBaseClassEntryC_somDefaultCopyInit(SOMTBaseClassEntryC *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTBaseClassEntryC_somDefaultCopyInit *somTD_SOMTBaseClassEntryC_somDefaultCopyInit;
typedef SOMTBaseClassEntryC*   SOMLINK somTP_SOMTBaseClassEntryC_somDefaultAssign(SOMTBaseClassEntryC *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTBaseClassEntryC_somDefaultAssign *somTD_SOMTBaseClassEntryC_somDefaultAssign;
typedef void   SOMLINK somTP_SOMTBaseClassEntryC_somDefaultConstCopyInit(SOMTBaseClassEntryC *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTBaseClassEntryC_somDefaultConstCopyInit *somTD_SOMTBaseClassEntryC_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_SOMTBaseClassEntryC_somDefaultVCopyInit(SOMTBaseClassEntryC *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTBaseClassEntryC_somDefaultVCopyInit *somTD_SOMTBaseClassEntryC_somDefaultVCopyInit;
typedef void   SOMLINK somTP_SOMTBaseClassEntryC_somDefaultConstVCopyInit(SOMTBaseClassEntryC *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTBaseClassEntryC_somDefaultConstVCopyInit *somTD_SOMTBaseClassEntryC_somDefaultConstVCopyInit;
typedef SOMTBaseClassEntryC*   SOMLINK somTP_SOMTBaseClassEntryC_somDefaultConstAssign(SOMTBaseClassEntryC *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTBaseClassEntryC_somDefaultConstAssign *somTD_SOMTBaseClassEntryC_somDefaultConstAssign;
typedef SOMTBaseClassEntryC*   SOMLINK somTP_SOMTBaseClassEntryC_somDefaultVAssign(SOMTBaseClassEntryC *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTBaseClassEntryC_somDefaultVAssign *somTD_SOMTBaseClassEntryC_somDefaultVAssign;
typedef SOMTBaseClassEntryC*   SOMLINK somTP_SOMTBaseClassEntryC_somDefaultConstVAssign(SOMTBaseClassEntryC *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTBaseClassEntryC_somDefaultConstVAssign *somTD_SOMTBaseClassEntryC_somDefaultConstVAssign;
typedef void   SOMLINK somTP_SOMTBaseClassEntryC_somFree(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC_somFree *somTD_SOMTBaseClassEntryC_somFree;
typedef SOMClass*   SOMLINK somTP_SOMTBaseClassEntryC_somGetClass(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC_somGetClass *somTD_SOMTBaseClassEntryC_somGetClass;
typedef string   SOMLINK somTP_SOMTBaseClassEntryC_somGetClassName(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC_somGetClassName *somTD_SOMTBaseClassEntryC_somGetClassName;
typedef long   SOMLINK somTP_SOMTBaseClassEntryC_somGetSize(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC_somGetSize *somTD_SOMTBaseClassEntryC_somGetSize;
typedef boolean   SOMLINK somTP_SOMTBaseClassEntryC_somIsA(SOMTBaseClassEntryC *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMTBaseClassEntryC_somIsA *somTD_SOMTBaseClassEntryC_somIsA;
typedef boolean   SOMLINK somTP_SOMTBaseClassEntryC_somIsInstanceOf(SOMTBaseClassEntryC *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMTBaseClassEntryC_somIsInstanceOf *somTD_SOMTBaseClassEntryC_somIsInstanceOf;
typedef boolean   SOMLINK somTP_SOMTBaseClassEntryC_somRespondsTo(SOMTBaseClassEntryC *somSelf, 
		somId mId);
typedef somTP_SOMTBaseClassEntryC_somRespondsTo *somTD_SOMTBaseClassEntryC_somRespondsTo;
typedef boolean   SOMLINK somTP_SOMTBaseClassEntryC_somDispatch(SOMTBaseClassEntryC *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMTBaseClassEntryC_somDispatch *somTD_SOMTBaseClassEntryC_somDispatch;
typedef boolean   SOMLINK somTP_SOMTBaseClassEntryC_somClassDispatch(SOMTBaseClassEntryC *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMTBaseClassEntryC_somClassDispatch *somTD_SOMTBaseClassEntryC_somClassDispatch;
typedef boolean   SOMLINK somTP_SOMTBaseClassEntryC_somCastObj(SOMTBaseClassEntryC *somSelf, 
		SOMClass* cls);
typedef somTP_SOMTBaseClassEntryC_somCastObj *somTD_SOMTBaseClassEntryC_somCastObj;
typedef boolean   SOMLINK somTP_SOMTBaseClassEntryC_somResetObj(SOMTBaseClassEntryC *somSelf);
typedef somTP_SOMTBaseClassEntryC_somResetObj *somTD_SOMTBaseClassEntryC_somResetObj;
typedef void   SOMLINK somTP_SOMTBaseClassEntryC_somDispatchV(SOMTBaseClassEntryC *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMTBaseClassEntryC_somDispatchV *somTD_SOMTBaseClassEntryC_somDispatchV;
typedef long   SOMLINK somTP_SOMTBaseClassEntryC_somDispatchL(SOMTBaseClassEntryC *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMTBaseClassEntryC_somDispatchL *somTD_SOMTBaseClassEntryC_somDispatchL;
typedef void*   SOMLINK somTP_SOMTBaseClassEntryC_somDispatchA(SOMTBaseClassEntryC *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMTBaseClassEntryC_somDispatchA *somTD_SOMTBaseClassEntryC_somDispatchA;
typedef double   SOMLINK somTP_SOMTBaseClassEntryC_somDispatchD(SOMTBaseClassEntryC *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMTBaseClassEntryC_somDispatchD *somTD_SOMTBaseClassEntryC_somDispatchD;
}

#endif /* SOMTBaseClassEntryC_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMTBaseClassEntryC
 */
class SOMTBaseClassEntryC : public SOMTEntryC
{
public:

// SOMTBaseClassEntryC::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMTBaseClassEntryC) SOMTBaseClassEntryCNewClass(SOMTBaseClassEntryC_MajorVersion,SOMTBaseClassEntryC_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMTBaseClassEntryC,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMTBaseClassEntryC));
}

// SOMTBaseClassEntryC::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

SOMTBaseClassEntryC& operator=(SOMTBaseClassEntryC& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

SOMTBaseClassEntryC()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMTBaseClassEntryCCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMTBaseClassEntryC(SOMTBaseClassEntryC* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMTBaseClassEntryCCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
SOMTBaseClassEntryC(const SOMTBaseClassEntryC* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMTBaseClassEntryCCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: _get_somtBaseClassDef */
SOMTClassEntryC*   _get_somtBaseClassDef()
{
/*
 *  Returns the class definition entry for the Base class named in
 *  this entry.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTBaseClassEntryC,_get_somtBaseClassDef)
	(this);
}


/*
 * Reintroduce inherited methods
 */

/* method: _get_somtEntryName */
string   _get_somtEntryName()
{
/*
 *  The name associated with this entry.  Eg, the name of
 *  the data item, the class, the method, the type, etc.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,_get_somtEntryName)
	(this);
}


/* method: _set_somtEntryName */
void   _set_somtEntryName(string somtEntryName)
{
/*
 *  The name associated with this entry.  Eg, the name of
 *  the data item, the class, the method, the type, etc.
 */
   SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,_set_somtEntryName)
	(this,somtEntryName);
}


/* method: _get_somtElementType */
SOMTTypes   _get_somtElementType()
{
/*
 *  Returns the type of this entry.
 *  This is not datatype, but entry type (method, class,
 *  passthru, etc.). The value is defined by SOMTTypes.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,_get_somtElementType)
	(this);
}


/* method: _set_somtElementType */
void   _set_somtElementType(SOMTTypes somtElementType)
{
/*
 *  Returns the type of this entry.
 *  This is not datatype, but entry type (method, class,
 *  passthru, etc.). The value is defined by SOMTTypes.
 */
   SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,_set_somtElementType)
	(this,somtElementType);
}


/* method: _get_somtElementTypeName */
string   _get_somtElementTypeName()
{
/*
 *  String version of somtElementType.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,_get_somtElementTypeName)
	(this);
}


/* method: _get_somtEntryComment */
string   _get_somtEntryComment()
{
/*
 *  Returns the comment associated with this entry, or NULL is this
 *  entry has no associated comment.  Comments will have comment
 *  delimitors removed, but will retain newline characters as
 *  specified in the source file. (use smLookupComment)
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,_get_somtEntryComment)
	(this);
}


/* method: _get_somtSourceLineNumber */
unsigned long   _get_somtSourceLineNumber()
{
/*
 *  Returns the line number in the source file where this entry's
 *  syntactic form ended.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,_get_somtSourceLineNumber)
	(this);
}


/* method: _get_somtTypeCode */
TypeCode   _get_somtTypeCode()
{
/*
 *  The typecode, if appropriate, or NULL.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,_get_somtTypeCode)
	(this);
}


/* method: _get_somtIsReference */
boolean   _get_somtIsReference()
{
/*
 *  Whether the entry is just a reference to the real type (TRUE)
 *  rather than a declaration of it (FALSE).
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,_get_somtIsReference)
	(this);
}


/* method: _get_somtIDLScopedName */
string   _get_somtIDLScopedName()
{
/*
 *  The IDL scoped name of the entry (using double colon as delimiter).
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,_get_somtIDLScopedName)
	(this);
}


/* method: _get_somtCScopedName */
string   _get_somtCScopedName()
{
/*
 *  The C scoped name of the entry (using underscore as delimiter).
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,_get_somtCScopedName)
	(this);
}


/* method: somtGetModifierValue */
string   somtGetModifierValue(string modifierName)
{
/*
 *  Returns the value of the named modifier if this entry has the
 *  named modifier and NULL otherwise. Note: if the modifier is
 *  present but does not have a value then a value of <'\1'> is
 *  returned.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,somtGetModifierValue)
	(this,modifierName);
}


/* method: somtGetFirstModifier */
boolean   somtGetFirstModifier(string* modifierName, 
		string* modifierValue)
{
/*
 *  Returns the first modifier associated with this entry.  1 (true)
 *  is returned if the entry has at least one modifier and 0 (false)
 *  otherwise.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,somtGetFirstModifier)
	(this,modifierName,modifierValue);
}


/* method: somtGetNextModifier */
boolean   somtGetNextModifier(string* modifierName, 
		string* modifierValue)
{
/*
 *  Returns the next modifier (with respect to the last call to
 *  <somtGetNextModifier> or <somtGetFirstModifier>)
 *  associated with this entry.  1 (true) is returned if the entry
 *  had another modifier and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,somtGetNextModifier)
	(this,modifierName,modifierValue);
}


/* method: somtFormatModifier */
long   somtFormatModifier(string buffer, 
		string name, 
		string value)
{
/*
 *  Formats the indicated name/value pair into buffer.  Buffer must
 *  be big enough to hold all the formatted pair, no checks are made.
 *  The number of characters added to buffer are returned (not
 *  including the trailing null character).
 *  Note: value may be null
 *  You will probably never call this method, it is provided so that
 *  you can override it to control the format returned in
 *  <somtGetModifierList>.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,somtFormatModifier)
	(this,buffer,name,value);
}


/* method: somtGetModifierList */
long   somtGetModifierList(string buffer)
{
/*
 *  The modifiers for this entry are placed in <buffer> in template
 *  list form (newline separated).  Buffer must be big enough to
 *  hold all the modifiers, no checks are made. The number of
 *  modifiers is returned.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,somtGetModifierList)
	(this,buffer);
}


/* method: somtSetSymbolsOnEntry */
long   somtSetSymbolsOnEntry(SOMTEmitC* emitter, 
		string prefix)
{
/*
 *  Places a number of symbol/value pairs in <t>.  All the symbols
 *  will begin with <prefix>.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,somtSetSymbolsOnEntry)
	(this,emitter,prefix);
}


/* method: somtSetEntryStruct */
void   somtSetEntryStruct(Entry* es)
{
/*
 *  Sets the entry struct data member.
 *  Note, when overridding this method, it is important to call the
 *  parent version of the method first and then do your processing.
 */
   SOM_ResolveD(this,SOMTBaseClassEntryC,SOMTEntryC,somtSetEntryStruct)
	(this,es);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somUninit)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDumpSelfInt)
	(this,level);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDumpSelf)
	(this,level);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMTBaseClassEntryC*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMTBaseClassEntryC*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMTBaseClassEntryC*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMTBaseClassEntryC*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   SOMTBaseClassEntryC_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   SOMTBaseClassEntryC_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   SOMTBaseClassEntryC_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   SOMTBaseClassEntryC_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   SOMTBaseClassEntryC_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   SOMTBaseClassEntryC_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,SOMTBaseClassEntryC,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}



};   /* SOMTBaseClassEntryC */



#endif       /* SOM_SOMTBaseClassEntryC_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: iogma.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    COMPONENT_NAME: somp
 * 
 *    ORIGINS: 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1994,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMPIOGroupMgrAbstract_xh
#define SOM_SOMPIOGroupMgrAbstract_xh

class SOMPIOGroupMgrAbstract;

/*
 *  This is the abstract class for an IO Group Manager object.  An IO Group
 *  Manager is a class which is used by the Persistent Storage Manager
 *  (see psm.sc) for storing/restoring persistent objects and groups of
 *  persistent objects.
 * 
 *  An IO Group Manager object is the principle object which knows the
 *  stored format of a group of objects stored on some media.  The IO
 *  Group Manager does not know how an individual object is formatted.
 *  The stored format of an individual object is known only by the
 *  encoder/decoder for that object. The encoder/decoder for an object
 *  is invoked by the IO Group Manager.
 * 
 *  There may be many IO Group Managers available in the system. The
 *  IO Group Manager which is used to store a given persistent object is
 *  determined by the persistent ID (see pid.sc) of that object. The
 *  class name of the IO Group Manager is part of the persistent ID.
 */

#define SOMPIOGroupMgrAbstract_MajorVersion 2
#define SOMPIOGroupMgrAbstract_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef SOMPIOGroupMgrAbstract_API
#define SOMPIOGroupMgrAbstract_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class SOMPMediaInterfaceAbstract;
class SOMPIOGroup;
class SOMPPersistentId;
class SOMPPersistentObject;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the SOMPIOGroupMgrAbstract Class */
SOMEXTERN SOMClass * SOMLINK SOMPIOGroupMgrAbstractNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMPIOGroupMgrAbstract class object, and the methods it introduces. */
SOMEXTERN struct SOMPIOGroupMgrAbstractClassDataStructure {
	SOMClass *classObject;
	somMToken sompNewMediaInterface;
	somMToken sompGetMediaInterface;
	somMToken sompFreeMediaInterface;
	somMToken sompInstantiateMediaInterface;
	somMToken sompWriteGroup;
	somMToken sompReadGroup;
	somMToken sompReadObjectData;
	somMToken sompGroupExists;
	somMToken sompObjectInGroup;
	somMToken sompMediaFormatOk;
	somMToken sompDeleteObjectFromGroup;
} SOMDLINK SOMPIOGroupMgrAbstractClassData;
#define _SOMPIOGroupMgrAbstract SOMPIOGroupMgrAbstractClassData.classObject

/* The API to parentMtabs for SOMPIOGroupMgrAbstract, and the instance data it introduces. */
SOMEXTERN struct SOMPIOGroupMgrAbstractCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMPIOGroupMgrAbstractCClassData;

/*
 * -- Typedefs for SOMPIOGroupMgrAbstract Method Procedures
 */
SOMEXTERN {
typedef void   SOMLINK somTP_SOMPIOGroupMgrAbstract_sompNewMediaInterface(SOMPIOGroupMgrAbstract *somSelf, Environment *ev, 
		string IOInfo);
typedef somTP_SOMPIOGroupMgrAbstract_sompNewMediaInterface *somTD_SOMPIOGroupMgrAbstract_sompNewMediaInterface;
typedef SOMPMediaInterfaceAbstract*   SOMLINK somTP_SOMPIOGroupMgrAbstract_sompGetMediaInterface(SOMPIOGroupMgrAbstract *somSelf, Environment *ev);
typedef somTP_SOMPIOGroupMgrAbstract_sompGetMediaInterface *somTD_SOMPIOGroupMgrAbstract_sompGetMediaInterface;
typedef void   SOMLINK somTP_SOMPIOGroupMgrAbstract_sompFreeMediaInterface(SOMPIOGroupMgrAbstract *somSelf, Environment *ev);
typedef somTP_SOMPIOGroupMgrAbstract_sompFreeMediaInterface *somTD_SOMPIOGroupMgrAbstract_sompFreeMediaInterface;
typedef SOMPMediaInterfaceAbstract*   SOMLINK somTP_SOMPIOGroupMgrAbstract_sompInstantiateMediaInterface(SOMPIOGroupMgrAbstract *somSelf, Environment *ev);
typedef somTP_SOMPIOGroupMgrAbstract_sompInstantiateMediaInterface *somTD_SOMPIOGroupMgrAbstract_sompInstantiateMediaInterface;
typedef boolean   SOMLINK somTP_SOMPIOGroupMgrAbstract_sompWriteGroup(SOMPIOGroupMgrAbstract *somSelf, Environment *ev, 
		SOMPPersistentObject* thisPo);
typedef somTP_SOMPIOGroupMgrAbstract_sompWriteGroup *somTD_SOMPIOGroupMgrAbstract_sompWriteGroup;
typedef SOMPPersistentObject*   SOMLINK somTP_SOMPIOGroupMgrAbstract_sompReadGroup(SOMPIOGroupMgrAbstract *somSelf, Environment *ev, 
		SOMPPersistentId* objectID);
typedef somTP_SOMPIOGroupMgrAbstract_sompReadGroup *somTD_SOMPIOGroupMgrAbstract_sompReadGroup;
typedef void   SOMLINK somTP_SOMPIOGroupMgrAbstract_sompReadObjectData(SOMPIOGroupMgrAbstract *somSelf, Environment *ev, 
		SOMPPersistentObject* thisPo);
typedef somTP_SOMPIOGroupMgrAbstract_sompReadObjectData *somTD_SOMPIOGroupMgrAbstract_sompReadObjectData;
typedef boolean   SOMLINK somTP_SOMPIOGroupMgrAbstract_sompGroupExists(SOMPIOGroupMgrAbstract *somSelf, Environment *ev, 
		string IOInfo);
typedef somTP_SOMPIOGroupMgrAbstract_sompGroupExists *somTD_SOMPIOGroupMgrAbstract_sompGroupExists;
typedef boolean   SOMLINK somTP_SOMPIOGroupMgrAbstract_sompObjectInGroup(SOMPIOGroupMgrAbstract *somSelf, Environment *ev, 
		SOMPPersistentId* objectID);
typedef somTP_SOMPIOGroupMgrAbstract_sompObjectInGroup *somTD_SOMPIOGroupMgrAbstract_sompObjectInGroup;
typedef boolean   SOMLINK somTP_SOMPIOGroupMgrAbstract_sompMediaFormatOk(SOMPIOGroupMgrAbstract *somSelf, Environment *ev, 
		string mediaFormatName);
typedef somTP_SOMPIOGroupMgrAbstract_sompMediaFormatOk *somTD_SOMPIOGroupMgrAbstract_sompMediaFormatOk;
typedef void   SOMLINK somTP_SOMPIOGroupMgrAbstract_sompDeleteObjectFromGroup(SOMPIOGroupMgrAbstract *somSelf, Environment *ev, 
		SOMPPersistentId* objectID);
typedef somTP_SOMPIOGroupMgrAbstract_sompDeleteObjectFromGroup *somTD_SOMPIOGroupMgrAbstract_sompDeleteObjectFromGroup;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_SOMPIOGroupMgrAbstract_somDefaultInit(SOMPIOGroupMgrAbstract *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_SOMPIOGroupMgrAbstract_somDefaultInit *somTD_SOMPIOGroupMgrAbstract_somDefaultInit;
typedef void   SOMLINK somTP_SOMPIOGroupMgrAbstract_somDestruct(SOMPIOGroupMgrAbstract *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_SOMPIOGroupMgrAbstract_somDestruct *somTD_SOMPIOGroupMgrAbstract_somDestruct;
typedef void   SOMLINK somTP_SOMPIOGroupMgrAbstract_somDefaultCopyInit(SOMPIOGroupMgrAbstract *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPIOGroupMgrAbstract_somDefaultCopyInit *somTD_SOMPIOGroupMgrAbstract_somDefaultCopyInit;
typedef SOMPIOGroupMgrAbstract*   SOMLINK somTP_SOMPIOGroupMgrAbstract_somDefaultAssign(SOMPIOGroupMgrAbstract *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPIOGroupMgrAbstract_somDefaultAssign *somTD_SOMPIOGroupMgrAbstract_somDefaultAssign;
typedef void   SOMLINK somTP_SOMPIOGroupMgrAbstract_somDefaultConstCopyInit(SOMPIOGroupMgrAbstract *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPIOGroupMgrAbstract_somDefaultConstCopyInit *somTD_SOMPIOGroupMgrAbstract_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_SOMPIOGroupMgrAbstract_somDefaultVCopyInit(SOMPIOGroupMgrAbstract *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPIOGroupMgrAbstract_somDefaultVCopyInit *somTD_SOMPIOGroupMgrAbstract_somDefaultVCopyInit;
typedef void   SOMLINK somTP_SOMPIOGroupMgrAbstract_somDefaultConstVCopyInit(SOMPIOGroupMgrAbstract *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPIOGroupMgrAbstract_somDefaultConstVCopyInit *somTD_SOMPIOGroupMgrAbstract_somDefaultConstVCopyInit;
typedef SOMPIOGroupMgrAbstract*   SOMLINK somTP_SOMPIOGroupMgrAbstract_somDefaultConstAssign(SOMPIOGroupMgrAbstract *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPIOGroupMgrAbstract_somDefaultConstAssign *somTD_SOMPIOGroupMgrAbstract_somDefaultConstAssign;
typedef SOMPIOGroupMgrAbstract*   SOMLINK somTP_SOMPIOGroupMgrAbstract_somDefaultVAssign(SOMPIOGroupMgrAbstract *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPIOGroupMgrAbstract_somDefaultVAssign *somTD_SOMPIOGroupMgrAbstract_somDefaultVAssign;
typedef SOMPIOGroupMgrAbstract*   SOMLINK somTP_SOMPIOGroupMgrAbstract_somDefaultConstVAssign(SOMPIOGroupMgrAbstract *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPIOGroupMgrAbstract_somDefaultConstVAssign *somTD_SOMPIOGroupMgrAbstract_somDefaultConstVAssign;
typedef void   SOMLINK somTP_SOMPIOGroupMgrAbstract_somInit(SOMPIOGroupMgrAbstract *somSelf);
typedef somTP_SOMPIOGroupMgrAbstract_somInit *somTD_SOMPIOGroupMgrAbstract_somInit;
typedef void   SOMLINK somTP_SOMPIOGroupMgrAbstract_somFree(SOMPIOGroupMgrAbstract *somSelf);
typedef somTP_SOMPIOGroupMgrAbstract_somFree *somTD_SOMPIOGroupMgrAbstract_somFree;
typedef void   SOMLINK somTP_SOMPIOGroupMgrAbstract_somUninit(SOMPIOGroupMgrAbstract *somSelf);
typedef somTP_SOMPIOGroupMgrAbstract_somUninit *somTD_SOMPIOGroupMgrAbstract_somUninit;
typedef SOMClass*   SOMLINK somTP_SOMPIOGroupMgrAbstract_somGetClass(SOMPIOGroupMgrAbstract *somSelf);
typedef somTP_SOMPIOGroupMgrAbstract_somGetClass *somTD_SOMPIOGroupMgrAbstract_somGetClass;
typedef string   SOMLINK somTP_SOMPIOGroupMgrAbstract_somGetClassName(SOMPIOGroupMgrAbstract *somSelf);
typedef somTP_SOMPIOGroupMgrAbstract_somGetClassName *somTD_SOMPIOGroupMgrAbstract_somGetClassName;
typedef long   SOMLINK somTP_SOMPIOGroupMgrAbstract_somGetSize(SOMPIOGroupMgrAbstract *somSelf);
typedef somTP_SOMPIOGroupMgrAbstract_somGetSize *somTD_SOMPIOGroupMgrAbstract_somGetSize;
typedef boolean   SOMLINK somTP_SOMPIOGroupMgrAbstract_somIsA(SOMPIOGroupMgrAbstract *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMPIOGroupMgrAbstract_somIsA *somTD_SOMPIOGroupMgrAbstract_somIsA;
typedef boolean   SOMLINK somTP_SOMPIOGroupMgrAbstract_somIsInstanceOf(SOMPIOGroupMgrAbstract *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMPIOGroupMgrAbstract_somIsInstanceOf *somTD_SOMPIOGroupMgrAbstract_somIsInstanceOf;
typedef boolean   SOMLINK somTP_SOMPIOGroupMgrAbstract_somRespondsTo(SOMPIOGroupMgrAbstract *somSelf, 
		somId mId);
typedef somTP_SOMPIOGroupMgrAbstract_somRespondsTo *somTD_SOMPIOGroupMgrAbstract_somRespondsTo;
typedef boolean   SOMLINK somTP_SOMPIOGroupMgrAbstract_somDispatch(SOMPIOGroupMgrAbstract *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMPIOGroupMgrAbstract_somDispatch *somTD_SOMPIOGroupMgrAbstract_somDispatch;
typedef boolean   SOMLINK somTP_SOMPIOGroupMgrAbstract_somClassDispatch(SOMPIOGroupMgrAbstract *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMPIOGroupMgrAbstract_somClassDispatch *somTD_SOMPIOGroupMgrAbstract_somClassDispatch;
typedef boolean   SOMLINK somTP_SOMPIOGroupMgrAbstract_somCastObj(SOMPIOGroupMgrAbstract *somSelf, 
		SOMClass* cls);
typedef somTP_SOMPIOGroupMgrAbstract_somCastObj *somTD_SOMPIOGroupMgrAbstract_somCastObj;
typedef boolean   SOMLINK somTP_SOMPIOGroupMgrAbstract_somResetObj(SOMPIOGroupMgrAbstract *somSelf);
typedef somTP_SOMPIOGroupMgrAbstract_somResetObj *somTD_SOMPIOGroupMgrAbstract_somResetObj;
typedef void   SOMLINK somTP_SOMPIOGroupMgrAbstract_somDispatchV(SOMPIOGroupMgrAbstract *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPIOGroupMgrAbstract_somDispatchV *somTD_SOMPIOGroupMgrAbstract_somDispatchV;
typedef long   SOMLINK somTP_SOMPIOGroupMgrAbstract_somDispatchL(SOMPIOGroupMgrAbstract *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPIOGroupMgrAbstract_somDispatchL *somTD_SOMPIOGroupMgrAbstract_somDispatchL;
typedef void*   SOMLINK somTP_SOMPIOGroupMgrAbstract_somDispatchA(SOMPIOGroupMgrAbstract *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPIOGroupMgrAbstract_somDispatchA *somTD_SOMPIOGroupMgrAbstract_somDispatchA;
typedef double   SOMLINK somTP_SOMPIOGroupMgrAbstract_somDispatchD(SOMPIOGroupMgrAbstract *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPIOGroupMgrAbstract_somDispatchD *somTD_SOMPIOGroupMgrAbstract_somDispatchD;
typedef SOMObject*   SOMLINK somTP_SOMPIOGroupMgrAbstract_somPrintSelf(SOMPIOGroupMgrAbstract *somSelf);
typedef somTP_SOMPIOGroupMgrAbstract_somPrintSelf *somTD_SOMPIOGroupMgrAbstract_somPrintSelf;
typedef void   SOMLINK somTP_SOMPIOGroupMgrAbstract_somDumpSelf(SOMPIOGroupMgrAbstract *somSelf, 
		long level);
typedef somTP_SOMPIOGroupMgrAbstract_somDumpSelf *somTD_SOMPIOGroupMgrAbstract_somDumpSelf;
typedef void   SOMLINK somTP_SOMPIOGroupMgrAbstract_somDumpSelfInt(SOMPIOGroupMgrAbstract *somSelf, 
		long level);
typedef somTP_SOMPIOGroupMgrAbstract_somDumpSelfInt *somTD_SOMPIOGroupMgrAbstract_somDumpSelfInt;
}

#endif /* SOMPIOGroupMgrAbstract_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMPIOGroupMgrAbstract
 */
class SOMPIOGroupMgrAbstract : public SOMObject
{
/*
 *  This is the abstract class for an IO Group Manager object.  An IO Group
 *  Manager is a class which is used by the Persistent Storage Manager
 *  (see psm.sc) for storing/restoring persistent objects and groups of
 *  persistent objects.
 * 
 *  An IO Group Manager object is the principle object which knows the
 *  stored format of a group of objects stored on some media.  The IO
 *  Group Manager does not know how an individual object is formatted.
 *  The stored format of an individual object is known only by the
 *  encoder/decoder for that object. The encoder/decoder for an object
 *  is invoked by the IO Group Manager.
 * 
 *  There may be many IO Group Managers available in the system. The
 *  IO Group Manager which is used to store a given persistent object is
 *  determined by the persistent ID (see pid.sc) of that object. The
 *  class name of the IO Group Manager is part of the persistent ID.
 */
public:

// SOMPIOGroupMgrAbstract::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMPIOGroupMgrAbstract) SOMPIOGroupMgrAbstractNewClass(SOMPIOGroupMgrAbstract_MajorVersion,SOMPIOGroupMgrAbstract_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMPIOGroupMgrAbstract,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMPIOGroupMgrAbstract));
}

// SOMPIOGroupMgrAbstract::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

SOMPIOGroupMgrAbstract& operator=(SOMPIOGroupMgrAbstract& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

SOMPIOGroupMgrAbstract()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMPIOGroupMgrAbstractCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMPIOGroupMgrAbstract(SOMPIOGroupMgrAbstract* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMPIOGroupMgrAbstractCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
SOMPIOGroupMgrAbstract(const SOMPIOGroupMgrAbstract* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMPIOGroupMgrAbstractCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: sompNewMediaInterface */
void   sompNewMediaInterface(Environment *ev, 
		string IOInfo)
{
/*
 *  Gets a new Media Interface for this IO Group Mgr and prepares it
 *  for I/O.  This method must be called prior to calling any of the
 *  other methods of this class since other methods rely on the media
 *  interface.
 */
   SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMPIOGroupMgrAbstract,sompNewMediaInterface)
	(this, ev,IOInfo);
}


/* method: sompGetMediaInterface */
SOMPMediaInterfaceAbstract*   sompGetMediaInterface(Environment *ev)
{
/*
 *  Returns this group's media interface. If sompNewMediaInterface
 *  has not been called first, this method returns NULL.
 *  This method also returns NULL after (the last) sompFreeMediaInterface.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMPIOGroupMgrAbstract,sompGetMediaInterface)
	(this, ev);
}


/* method: sompFreeMediaInterface */
void   sompFreeMediaInterface(Environment *ev)
{
/*
 *  Frees this IOGroup Mgr's media interface.
 */
   SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMPIOGroupMgrAbstract,sompFreeMediaInterface)
	(this, ev);
}


/* method: sompInstantiateMediaInterface */
SOMPMediaInterfaceAbstract*   sompInstantiateMediaInterface(Environment *ev)
{
/*
 *  Override this if you want to change the MediaInterface
 *  this IOGroupMananager uses to write out IO Groups.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMPIOGroupMgrAbstract,sompInstantiateMediaInterface)
	(this, ev);
}


/* method: sompWriteGroup */
boolean   sompWriteGroup(Environment *ev, 
		SOMPPersistentObject* thisPo)
{
/*
 *  Store the object and everything grouped with it or just store
 *  the object given. It is the choice of the IO Group Mgr implementor.
 * 
 *  To store the object and all the others grouped with,
 *  invoke _sompGetIOGroup(thisPo) to get the group and then
 *  iterate across the group, storing each object. If a group is
 *  stored this method must return TRUE.
 *  Note:
 *  Only objects in the IO Group which have been marked as "dirty"
 *  should be stored. (See po.idl for methods to get the state of a
 *  persistent object.)
 * 
 *  If the IO Group Mgr is written to store only the given object,
 *  this method must return FALSE.
 * 
 *  OLD INTERFACE...
 *  void sompWriteGroup(in SOMPIOGroup thisGroup) raises(SOMPError::sompException);
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMPIOGroupMgrAbstract,sompWriteGroup)
	(this, ev,thisPo);
}


/* method: sompReadGroup */
SOMPPersistentObject*   sompReadGroup(Environment *ev, 
		SOMPPersistentId* objectID)
{
/*
 *  At the very least, this method will instantiate the persistent object which
 *  is specified by the given objectID and return that object. This method
 *  may be implemented to instantiate all the objects stored in the same group
 *  as the specified object. It may restore objects and mark them as
 *  SOMP_STATE_STABLE, however this is typically accomplished via the
 *  sompReadObjectData.
 *  The returned object is NULL if an error is encountered and
 *  an exception is raised.
 *  OLD INTERFACE...
 *  SOMPIOGroup sompReadGroup(in string IOInfo) raises(SOMPError::sompException);
 *  Restores the IO Group with the name given in <IOInfo>.
 *  The instance data of the objects in the IO Group is not read.
 *  The returned IO Group is NULL if an error is encountered and
 *  an exception is raised.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMPIOGroupMgrAbstract,sompReadGroup)
	(this, ev,objectID);
}


/* method: sompReadObjectData */
void   sompReadObjectData(Environment *ev, 
		SOMPPersistentObject* thisPo)
{
/*
 *  Read the given persistent object's data from storage.
 */
   SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMPIOGroupMgrAbstract,sompReadObjectData)
	(this, ev,thisPo);
}


/* method: sompGroupExists */
boolean   sompGroupExists(Environment *ev, 
		string IOInfo)
{
/*
 *  See if the IO Group with the name given in <IOInfo> exists in persistent
 *  storage. Returns TRUE if group exists, FALSE otherwise.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMPIOGroupMgrAbstract,sompGroupExists)
	(this, ev,IOInfo);
}


/* method: sompObjectInGroup */
boolean   sompObjectInGroup(Environment *ev, 
		SOMPPersistentId* objectID)
{
/*
 *  See if the persisent object specified by <objectID> is in the group.
 *  If so, return TRUE, otherwise FALSE.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMPIOGroupMgrAbstract,sompObjectInGroup)
	(this, ev,objectID);
}


/* method: sompMediaFormatOk */
boolean   sompMediaFormatOk(Environment *ev, 
		string mediaFormatName)
{
/*
 *  Check to see if the given mediaFormatName is supported by this
 *  IO Group Manager. If it is, returns TRUE, otherwise returns FALSE.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMPIOGroupMgrAbstract,sompMediaFormatOk)
	(this, ev,mediaFormatName);
}


/* method: sompDeleteObjectFromGroup */
void   sompDeleteObjectFromGroup(Environment *ev, 
		SOMPPersistentId* objectID)
{
/*
 *  Delete the persisent object specified by <objectID>.
 */
   SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMPIOGroupMgrAbstract,sompDeleteObjectFromGroup)
	(this, ev,objectID);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMPIOGroupMgrAbstract*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMPIOGroupMgrAbstract*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMPIOGroupMgrAbstract*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMPIOGroupMgrAbstract*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   SOMPIOGroupMgrAbstract_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   SOMPIOGroupMgrAbstract_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   SOMPIOGroupMgrAbstract_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   SOMPIOGroupMgrAbstract_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   SOMPIOGroupMgrAbstract_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   SOMPIOGroupMgrAbstract_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,SOMPIOGroupMgrAbstract,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* SOMPIOGroupMgrAbstract */



#endif       /* SOM_SOMPIOGroupMgrAbstract_xh */

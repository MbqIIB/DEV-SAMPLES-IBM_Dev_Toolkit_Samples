
/*
 * This file was generated by the SOM Compiler.
 * FileName: scmethod.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *   COMPONENT_NAME: some
 * 
 *   ORIGINS: 27
 * 
 * 
 *    25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1994,1996
 *   All Rights Reserved
 *   Licensed Materials - Property of IBM
 *   US Government Users Restricted Rights - Use, duplication or
 *   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *  @(#) somc/sctypes.h 2.7 12/26/95 16:26:17 [7/30/96 14:46:04]
 * 
 */


#ifndef SOM_SOMTMethodEntryC_xh
#define SOM_SOMTMethodEntryC_xh

class SOMTMethodEntryC;

#define SOMTMethodEntryC_MajorVersion 2
#define SOMTMethodEntryC_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMTCommonEntryC_xh
#include <sccommon.xh>
#endif

#ifndef SOMTMethodEntryC_API
#define SOMTMethodEntryC_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class SOMTEntryC;
class SOMTEmitC;
class SOMTMetaClassEntryC;
class SOMTAttributeEntryC;
class SOMTTypedefEntryC;
class SOMTBaseClassEntryC;
class SOMTPassthruEntryC;
class SOMTDataEntryC;
class SOMTMethodEntryC;
class SOMTClassEntryC;
class SOMTModuleEntryC;
class SOMTParameterEntryC;
class SOMTStructEntryC;
class SOMTUnionEntryC;
class SOMTEnumEntryC;
class SOMTConstEntryC;
class SOMTSequenceEntryC;
class SOMTStringEntryC;
class SOMTEnumNameEntryC;
class SOMTCommonEntryC;
class SOMTUserDefinedTypeEntryC;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the SOMTMethodEntryC Class */
SOMEXTERN SOMClass * SOMLINK SOMTMethodEntryCNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMTMethodEntryC class object, and the methods it introduces. */
SOMEXTERN struct SOMTMethodEntryCClassDataStructure {
	SOMClass *classObject;
	somMToken _get_somtIsVarargs;
	somMToken _get_somtOriginalMethod;
	somMToken _get_somtOriginalClass;
	somMToken _get_somtMethodGroup;
	somMToken somtGetFirstParameter;
	somMToken somtGetNextParameter;
	somMToken somtGetArgList;
	somMToken somtGetParmList;
	somMToken _get_somtIsPrivateMethod;
	somMToken _get_somtIsOneway;
	somMToken _get_somtArgCount;
	somMToken somtGetFirstException;
	somMToken somtGetNextException;
	somMToken _get_somtContextArray;
	somMToken somtGetShortCPrototype;
	somMToken somtGetFullCPrototype;
	somMToken somtGetShortParmList;
	somMToken somtGetFullParmList;
	somMToken somtGetNthParameter;
	somMToken _get_somtCReturnType;
	somMToken somtGetIDLParamList;
	somMToken somtGetShortCParamList;
	somMToken somtGetFullCParamList;
	somMToken somtGetShortParamNameList;
	somMToken somtGetFullParamNameList;
} SOMDLINK SOMTMethodEntryCClassData;
#define _SOMTMethodEntryC SOMTMethodEntryCClassData.classObject

/* The API to parentMtabs for SOMTMethodEntryC, and the instance data it introduces. */
SOMEXTERN struct SOMTMethodEntryCCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMTMethodEntryCCClassData;

/*
 * -- Typedefs for SOMTMethodEntryC Method Procedures
 */
SOMEXTERN {
typedef boolean   SOMLINK somTP_SOMTMethodEntryC__get_somtIsVarargs(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtIsVarargs *somTD_SOMTMethodEntryC__get_somtIsVarargs;
typedef SOMTMethodEntryC*   SOMLINK somTP_SOMTMethodEntryC__get_somtOriginalMethod(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtOriginalMethod *somTD_SOMTMethodEntryC__get_somtOriginalMethod;
typedef SOMTClassEntryC*   SOMLINK somTP_SOMTMethodEntryC__get_somtOriginalClass(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtOriginalClass *somTD_SOMTMethodEntryC__get_somtOriginalClass;
typedef SOMTEntryC*   SOMLINK somTP_SOMTMethodEntryC__get_somtMethodGroup(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtMethodGroup *somTD_SOMTMethodEntryC__get_somtMethodGroup;
typedef boolean   SOMLINK somTP_SOMTMethodEntryC__get_somtIsPrivateMethod(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtIsPrivateMethod *somTD_SOMTMethodEntryC__get_somtIsPrivateMethod;
typedef boolean   SOMLINK somTP_SOMTMethodEntryC__get_somtIsOneway(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtIsOneway *somTD_SOMTMethodEntryC__get_somtIsOneway;
typedef short   SOMLINK somTP_SOMTMethodEntryC__get_somtArgCount(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtArgCount *somTD_SOMTMethodEntryC__get_somtArgCount;
typedef SOMTParameterEntryC*   SOMLINK somTP_SOMTMethodEntryC_somtGetFirstParameter(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC_somtGetFirstParameter *somTD_SOMTMethodEntryC_somtGetFirstParameter;
typedef SOMTParameterEntryC*   SOMLINK somTP_SOMTMethodEntryC_somtGetNextParameter(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC_somtGetNextParameter *somTD_SOMTMethodEntryC_somtGetNextParameter;
typedef string   SOMLINK somTP_SOMTMethodEntryC_somtGetIDLParamList(SOMTMethodEntryC *somSelf, 
		string buffer);
typedef somTP_SOMTMethodEntryC_somtGetIDLParamList *somTD_SOMTMethodEntryC_somtGetIDLParamList;
typedef string   SOMLINK somTP_SOMTMethodEntryC_somtGetShortCParamList(SOMTMethodEntryC *somSelf, 
		string buffer, 
		string selfParm, 
		string varargsParm);
typedef somTP_SOMTMethodEntryC_somtGetShortCParamList *somTD_SOMTMethodEntryC_somtGetShortCParamList;
typedef string   SOMLINK somTP_SOMTMethodEntryC_somtGetFullCParamList(SOMTMethodEntryC *somSelf, 
		string buffer, 
		string varargsParm);
typedef somTP_SOMTMethodEntryC_somtGetFullCParamList *somTD_SOMTMethodEntryC_somtGetFullCParamList;
typedef string   SOMLINK somTP_SOMTMethodEntryC_somtGetShortParamNameList(SOMTMethodEntryC *somSelf, 
		string buffer, 
		string selfParm, 
		string varargsParm);
typedef somTP_SOMTMethodEntryC_somtGetShortParamNameList *somTD_SOMTMethodEntryC_somtGetShortParamNameList;
typedef string   SOMLINK somTP_SOMTMethodEntryC_somtGetFullParamNameList(SOMTMethodEntryC *somSelf, 
		string buffer, 
		string varargsParm);
typedef somTP_SOMTMethodEntryC_somtGetFullParamNameList *somTD_SOMTMethodEntryC_somtGetFullParamNameList;
typedef SOMTParameterEntryC*   SOMLINK somTP_SOMTMethodEntryC_somtGetNthParameter(SOMTMethodEntryC *somSelf, 
		short n);
typedef somTP_SOMTMethodEntryC_somtGetNthParameter *somTD_SOMTMethodEntryC_somtGetNthParameter;
typedef SOMTStructEntryC*   SOMLINK somTP_SOMTMethodEntryC_somtGetFirstException(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC_somtGetFirstException *somTD_SOMTMethodEntryC_somtGetFirstException;
typedef SOMTStructEntryC*   SOMLINK somTP_SOMTMethodEntryC_somtGetNextException(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC_somtGetNextException *somTD_SOMTMethodEntryC_somtGetNextException;
typedef string*   SOMLINK somTP_SOMTMethodEntryC__get_somtContextArray(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtContextArray *somTD_SOMTMethodEntryC__get_somtContextArray;
typedef string   SOMLINK somTP_SOMTMethodEntryC__get_somtCReturnType(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtCReturnType *somTD_SOMTMethodEntryC__get_somtCReturnType;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef SOMTEntryC*   SOMLINK somTP_SOMTMethodEntryC__get_somtTypeObj(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtTypeObj *somTD_SOMTMethodEntryC__get_somtTypeObj;
typedef string   SOMLINK somTP_SOMTMethodEntryC__get_somtPtrs(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtPtrs *somTD_SOMTMethodEntryC__get_somtPtrs;
typedef string   SOMLINK somTP_SOMTMethodEntryC__get_somtArrayDimsString(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtArrayDimsString *somTD_SOMTMethodEntryC__get_somtArrayDimsString;
typedef unsigned long   SOMLINK somTP_SOMTMethodEntryC_somtGetFirstArrayDimension(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC_somtGetFirstArrayDimension *somTD_SOMTMethodEntryC_somtGetFirstArrayDimension;
typedef unsigned long   SOMLINK somTP_SOMTMethodEntryC_somtGetNextArrayDimension(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC_somtGetNextArrayDimension *somTD_SOMTMethodEntryC_somtGetNextArrayDimension;
typedef string   SOMLINK somTP_SOMTMethodEntryC__get_somtSourceText(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtSourceText *somTD_SOMTMethodEntryC__get_somtSourceText;
typedef string   SOMLINK somTP_SOMTMethodEntryC__get_somtType(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtType *somTD_SOMTMethodEntryC__get_somtType;
typedef somtVisibilityT   SOMLINK somTP_SOMTMethodEntryC__get_somtVisibility(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtVisibility *somTD_SOMTMethodEntryC__get_somtVisibility;
typedef boolean   SOMLINK somTP_SOMTMethodEntryC_somtIsArray(SOMTMethodEntryC *somSelf, 
		long* size);
typedef somTP_SOMTMethodEntryC_somtIsArray *somTD_SOMTMethodEntryC_somtIsArray;
typedef boolean   SOMLINK somTP_SOMTMethodEntryC_somtIsPointer(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC_somtIsPointer *somTD_SOMTMethodEntryC_somtIsPointer;
typedef void   SOMLINK somTP_SOMTMethodEntryC_somDumpSelfInt(SOMTMethodEntryC *somSelf, 
		long level);
typedef somTP_SOMTMethodEntryC_somDumpSelfInt *somTD_SOMTMethodEntryC_somDumpSelfInt;
typedef long   SOMLINK somTP_SOMTMethodEntryC_somtSetSymbolsOnEntry(SOMTMethodEntryC *somSelf, 
		SOMTEmitC* emitter, 
		string prefix);
typedef somTP_SOMTMethodEntryC_somtSetSymbolsOnEntry *somTD_SOMTMethodEntryC_somtSetSymbolsOnEntry;
typedef string   SOMLINK somTP_SOMTMethodEntryC__get_somtEntryName(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtEntryName *somTD_SOMTMethodEntryC__get_somtEntryName;
typedef void   SOMLINK somTP_SOMTMethodEntryC__set_somtEntryName(SOMTMethodEntryC *somSelf, 
		string somtEntryName);
typedef somTP_SOMTMethodEntryC__set_somtEntryName *somTD_SOMTMethodEntryC__set_somtEntryName;
typedef SOMTTypes   SOMLINK somTP_SOMTMethodEntryC__get_somtElementType(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtElementType *somTD_SOMTMethodEntryC__get_somtElementType;
typedef void   SOMLINK somTP_SOMTMethodEntryC__set_somtElementType(SOMTMethodEntryC *somSelf, 
		SOMTTypes somtElementType);
typedef somTP_SOMTMethodEntryC__set_somtElementType *somTD_SOMTMethodEntryC__set_somtElementType;
typedef string   SOMLINK somTP_SOMTMethodEntryC__get_somtElementTypeName(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtElementTypeName *somTD_SOMTMethodEntryC__get_somtElementTypeName;
typedef string   SOMLINK somTP_SOMTMethodEntryC__get_somtEntryComment(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtEntryComment *somTD_SOMTMethodEntryC__get_somtEntryComment;
typedef unsigned long   SOMLINK somTP_SOMTMethodEntryC__get_somtSourceLineNumber(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtSourceLineNumber *somTD_SOMTMethodEntryC__get_somtSourceLineNumber;
typedef TypeCode   SOMLINK somTP_SOMTMethodEntryC__get_somtTypeCode(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtTypeCode *somTD_SOMTMethodEntryC__get_somtTypeCode;
typedef boolean   SOMLINK somTP_SOMTMethodEntryC__get_somtIsReference(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtIsReference *somTD_SOMTMethodEntryC__get_somtIsReference;
typedef string   SOMLINK somTP_SOMTMethodEntryC__get_somtIDLScopedName(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtIDLScopedName *somTD_SOMTMethodEntryC__get_somtIDLScopedName;
typedef string   SOMLINK somTP_SOMTMethodEntryC__get_somtCScopedName(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC__get_somtCScopedName *somTD_SOMTMethodEntryC__get_somtCScopedName;
typedef string   SOMLINK somTP_SOMTMethodEntryC_somtGetModifierValue(SOMTMethodEntryC *somSelf, 
		string modifierName);
typedef somTP_SOMTMethodEntryC_somtGetModifierValue *somTD_SOMTMethodEntryC_somtGetModifierValue;
typedef boolean   SOMLINK somTP_SOMTMethodEntryC_somtGetFirstModifier(SOMTMethodEntryC *somSelf, 
		string* modifierName, 
		string* modifierValue);
typedef somTP_SOMTMethodEntryC_somtGetFirstModifier *somTD_SOMTMethodEntryC_somtGetFirstModifier;
typedef boolean   SOMLINK somTP_SOMTMethodEntryC_somtGetNextModifier(SOMTMethodEntryC *somSelf, 
		string* modifierName, 
		string* modifierValue);
typedef somTP_SOMTMethodEntryC_somtGetNextModifier *somTD_SOMTMethodEntryC_somtGetNextModifier;
typedef long   SOMLINK somTP_SOMTMethodEntryC_somtFormatModifier(SOMTMethodEntryC *somSelf, 
		string buffer, 
		string name, 
		string value);
typedef somTP_SOMTMethodEntryC_somtFormatModifier *somTD_SOMTMethodEntryC_somtFormatModifier;
typedef long   SOMLINK somTP_SOMTMethodEntryC_somtGetModifierList(SOMTMethodEntryC *somSelf, 
		string buffer);
typedef somTP_SOMTMethodEntryC_somtGetModifierList *somTD_SOMTMethodEntryC_somtGetModifierList;
typedef void   SOMLINK somTP_SOMTMethodEntryC_somtSetEntryStruct(SOMTMethodEntryC *somSelf, 
		Entry* es);
typedef somTP_SOMTMethodEntryC_somtSetEntryStruct *somTD_SOMTMethodEntryC_somtSetEntryStruct;
typedef void   SOMLINK somTP_SOMTMethodEntryC_somInit(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC_somInit *somTD_SOMTMethodEntryC_somInit;
typedef void   SOMLINK somTP_SOMTMethodEntryC_somUninit(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC_somUninit *somTD_SOMTMethodEntryC_somUninit;
typedef SOMObject*   SOMLINK somTP_SOMTMethodEntryC_somPrintSelf(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC_somPrintSelf *somTD_SOMTMethodEntryC_somPrintSelf;
typedef void   SOMLINK somTP_SOMTMethodEntryC_somDumpSelf(SOMTMethodEntryC *somSelf, 
		long level);
typedef somTP_SOMTMethodEntryC_somDumpSelf *somTD_SOMTMethodEntryC_somDumpSelf;
typedef void   SOMLINK somTP_SOMTMethodEntryC_somDefaultInit(SOMTMethodEntryC *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_SOMTMethodEntryC_somDefaultInit *somTD_SOMTMethodEntryC_somDefaultInit;
typedef void   SOMLINK somTP_SOMTMethodEntryC_somDestruct(SOMTMethodEntryC *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_SOMTMethodEntryC_somDestruct *somTD_SOMTMethodEntryC_somDestruct;
typedef void   SOMLINK somTP_SOMTMethodEntryC_somDefaultCopyInit(SOMTMethodEntryC *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTMethodEntryC_somDefaultCopyInit *somTD_SOMTMethodEntryC_somDefaultCopyInit;
typedef SOMTMethodEntryC*   SOMLINK somTP_SOMTMethodEntryC_somDefaultAssign(SOMTMethodEntryC *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTMethodEntryC_somDefaultAssign *somTD_SOMTMethodEntryC_somDefaultAssign;
typedef void   SOMLINK somTP_SOMTMethodEntryC_somDefaultConstCopyInit(SOMTMethodEntryC *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTMethodEntryC_somDefaultConstCopyInit *somTD_SOMTMethodEntryC_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_SOMTMethodEntryC_somDefaultVCopyInit(SOMTMethodEntryC *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTMethodEntryC_somDefaultVCopyInit *somTD_SOMTMethodEntryC_somDefaultVCopyInit;
typedef void   SOMLINK somTP_SOMTMethodEntryC_somDefaultConstVCopyInit(SOMTMethodEntryC *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTMethodEntryC_somDefaultConstVCopyInit *somTD_SOMTMethodEntryC_somDefaultConstVCopyInit;
typedef SOMTMethodEntryC*   SOMLINK somTP_SOMTMethodEntryC_somDefaultConstAssign(SOMTMethodEntryC *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTMethodEntryC_somDefaultConstAssign *somTD_SOMTMethodEntryC_somDefaultConstAssign;
typedef SOMTMethodEntryC*   SOMLINK somTP_SOMTMethodEntryC_somDefaultVAssign(SOMTMethodEntryC *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTMethodEntryC_somDefaultVAssign *somTD_SOMTMethodEntryC_somDefaultVAssign;
typedef SOMTMethodEntryC*   SOMLINK somTP_SOMTMethodEntryC_somDefaultConstVAssign(SOMTMethodEntryC *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTMethodEntryC_somDefaultConstVAssign *somTD_SOMTMethodEntryC_somDefaultConstVAssign;
typedef void   SOMLINK somTP_SOMTMethodEntryC_somFree(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC_somFree *somTD_SOMTMethodEntryC_somFree;
typedef SOMClass*   SOMLINK somTP_SOMTMethodEntryC_somGetClass(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC_somGetClass *somTD_SOMTMethodEntryC_somGetClass;
typedef string   SOMLINK somTP_SOMTMethodEntryC_somGetClassName(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC_somGetClassName *somTD_SOMTMethodEntryC_somGetClassName;
typedef long   SOMLINK somTP_SOMTMethodEntryC_somGetSize(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC_somGetSize *somTD_SOMTMethodEntryC_somGetSize;
typedef boolean   SOMLINK somTP_SOMTMethodEntryC_somIsA(SOMTMethodEntryC *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMTMethodEntryC_somIsA *somTD_SOMTMethodEntryC_somIsA;
typedef boolean   SOMLINK somTP_SOMTMethodEntryC_somIsInstanceOf(SOMTMethodEntryC *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMTMethodEntryC_somIsInstanceOf *somTD_SOMTMethodEntryC_somIsInstanceOf;
typedef boolean   SOMLINK somTP_SOMTMethodEntryC_somRespondsTo(SOMTMethodEntryC *somSelf, 
		somId mId);
typedef somTP_SOMTMethodEntryC_somRespondsTo *somTD_SOMTMethodEntryC_somRespondsTo;
typedef boolean   SOMLINK somTP_SOMTMethodEntryC_somDispatch(SOMTMethodEntryC *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMTMethodEntryC_somDispatch *somTD_SOMTMethodEntryC_somDispatch;
typedef boolean   SOMLINK somTP_SOMTMethodEntryC_somClassDispatch(SOMTMethodEntryC *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMTMethodEntryC_somClassDispatch *somTD_SOMTMethodEntryC_somClassDispatch;
typedef boolean   SOMLINK somTP_SOMTMethodEntryC_somCastObj(SOMTMethodEntryC *somSelf, 
		SOMClass* cls);
typedef somTP_SOMTMethodEntryC_somCastObj *somTD_SOMTMethodEntryC_somCastObj;
typedef boolean   SOMLINK somTP_SOMTMethodEntryC_somResetObj(SOMTMethodEntryC *somSelf);
typedef somTP_SOMTMethodEntryC_somResetObj *somTD_SOMTMethodEntryC_somResetObj;
typedef void   SOMLINK somTP_SOMTMethodEntryC_somDispatchV(SOMTMethodEntryC *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMTMethodEntryC_somDispatchV *somTD_SOMTMethodEntryC_somDispatchV;
typedef long   SOMLINK somTP_SOMTMethodEntryC_somDispatchL(SOMTMethodEntryC *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMTMethodEntryC_somDispatchL *somTD_SOMTMethodEntryC_somDispatchL;
typedef void*   SOMLINK somTP_SOMTMethodEntryC_somDispatchA(SOMTMethodEntryC *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMTMethodEntryC_somDispatchA *somTD_SOMTMethodEntryC_somDispatchA;
typedef double   SOMLINK somTP_SOMTMethodEntryC_somDispatchD(SOMTMethodEntryC *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMTMethodEntryC_somDispatchD *somTD_SOMTMethodEntryC_somDispatchD;
}

#endif /* SOMTMethodEntryC_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMTMethodEntryC
 */
class SOMTMethodEntryC : public SOMTCommonEntryC
{
public:

// SOMTMethodEntryC::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMTMethodEntryC) SOMTMethodEntryCNewClass(SOMTMethodEntryC_MajorVersion,SOMTMethodEntryC_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMTMethodEntryC,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMTMethodEntryC));
}

// SOMTMethodEntryC::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

SOMTMethodEntryC& operator=(SOMTMethodEntryC& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

SOMTMethodEntryC()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMTMethodEntryCCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMTMethodEntryC(SOMTMethodEntryC* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMTMethodEntryCCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
SOMTMethodEntryC(const SOMTMethodEntryC* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMTMethodEntryCCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: _get_somtIsVarargs */
boolean   _get_somtIsVarargs()
{
/*
 *  Returns 1 (true) if this method definition has a variable length
 *  parameter list.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,_get_somtIsVarargs)
	(this);
}


/* method: _get_somtOriginalMethod */
SOMTMethodEntryC*   _get_somtOriginalMethod()
{
/*
 *  If this is an override method definition (<SOMTOverrideMethodE>)
 *  then this is the method definition entry that orginially
 *  introduced the method.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,_get_somtOriginalMethod)
	(this);
}


/* method: _get_somtOriginalClass */
SOMTClassEntryC*   _get_somtOriginalClass()
{
/*
 *  If this is an override method definition (<SOMTOverrideMethodE>)
 *  then this is the class definition entry that orginially
 *  introduced the method.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,_get_somtOriginalClass)
	(this);
}


/* method: _get_somtMethodGroup */
SOMTEntryC*   _get_somtMethodGroup()
{
/*
 *  The group this method is defined in within a class definition.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,_get_somtMethodGroup)
	(this);
}


/* method: _get_somtIsPrivateMethod */
boolean   _get_somtIsPrivateMethod()
{
/*
 *  Whether or not the method is private.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,_get_somtIsPrivateMethod)
	(this);
}


/* method: _get_somtIsOneway */
boolean   _get_somtIsOneway()
{
/*
 *  Whether or not the method is oneway.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,_get_somtIsOneway)
	(this);
}


/* method: _get_somtArgCount */
short   _get_somtArgCount()
{
/*
 *  The number of arguments for the method.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,_get_somtArgCount)
	(this);
}


/* method: somtGetFirstParameter */
SOMTParameterEntryC*   somtGetFirstParameter()
{
/*
 *  Returns the first formal parameter entry for this method if it
 *  has one and NULL otherwise.  Note: the target object parameter is
 *  not included, therefore the first parameter is really the second
 *  parameter from a SOM runtime perspective.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,somtGetFirstParameter)
	(this);
}


/* method: somtGetNextParameter */
SOMTParameterEntryC*   somtGetNextParameter()
{
/*
 *  Returns the next formal parameter entry for this method if it has
 *  one and NULL otherwise.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,somtGetNextParameter)
	(this);
}


/* method: somtGetIDLParamList */
string   somtGetIDLParamList(string buffer)
{
/*
 *  Returns the formal parameter list (in IDL syntax) for this method.
 *  The parameter list is built in <buffer> and the address of <buffer>
 *  is returned.
 *  Parameters are delimited with newlines.
 *  The method receiver and any implicit method arguments are NOT included.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,somtGetIDLParamList)
	(this,buffer);
}


/* method: somtGetShortCParamList */
string   somtGetShortCParamList(string buffer, 
		string selfParm, 
		string varargsParm)
{
/*
 *  Returns the formal parameter list (in ANSI C function prototype
 *  form, with types) for this method. The parameter list is built in
 *  <buffer> and the address of <buffer> is returned.
 *  Parameters are delimited with newlines.
 *  If this method takes a variable number of arguments then the
 *  final parameter substring is replaced by <varargsParm>, unless
 *  <varargsParm> is NULL in which case the final parameter is
 *  removed.
 *  If <selfParm> is not null then it is added as an initial
 *  parameter. (The <selfParm> string may actually contain multiple
 *  parameters, delimited by newline characters.)
 *  The method receiver and any implicit method arguments are NOT
 *  included.
 *  The types of the method parameters are given in C form (with pointer
 *  stars, where needed) rather than in the IDL form.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,somtGetShortCParamList)
	(this,buffer,selfParm,varargsParm);
}


/* method: somtGetFullCParamList */
string   somtGetFullCParamList(string buffer, 
		string varargsParm)
{
/*
 *  Same as somtGetShortCParamList except that the method receiver and
 *  any implicit method arguments (Environment and Context) are included.
 *  The types of the method parameters are given in C form (with pointer
 *  stars, where needed) rather than in the IDL form.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,somtGetFullCParamList)
	(this,buffer,varargsParm);
}


/* method: somtGetShortParamNameList */
string   somtGetShortParamNameList(string buffer, 
		string selfParm, 
		string varargsParm)
{
/*
 *  Returns the parameter list for this method in call form (without
 *  types). The argument list is built in <buffer> and the address of
 *  <buffer> is returned. Parameters are delimited with newlines.
 *  If this method takes a variable number of arguments then the
 *  final parameter is replaced by <varargsParm>, unless
 *  <varargsParm> is NULL in which case the final parameter is removed.
 *  If <selfParm> is not null then it is added as an initial
 *  parameter. (The <selfParm> string may actually contain multiple
 *  parameters, delimited by newline characters.)
 *  The method receiver and any implicit method arguments are NOT
 *  included.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,somtGetShortParamNameList)
	(this,buffer,selfParm,varargsParm);
}


/* method: somtGetFullParamNameList */
string   somtGetFullParamNameList(string buffer, 
		string varargsParm)
{
/*
 *  Same as somtGetParamNameList except that the method receiver and
 *  any implicit method arguments (Environment and Context) are included.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,somtGetFullParamNameList)
	(this,buffer,varargsParm);
}


/* method: somtGetNthParameter */
SOMTParameterEntryC*   somtGetNthParameter(short n)
{
/*
 *  Returns the object representing the nth explicit method parameter.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,somtGetNthParameter)
	(this,n);
}


/* method: somtGetFirstException */
SOMTStructEntryC*   somtGetFirstException()
{
/*
 *  The first exception this method raises.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,somtGetFirstException)
	(this);
}


/* method: somtGetNextException */
SOMTStructEntryC*   somtGetNextException()
{
/*
 *  The next exception this method raises,
 *  relative to the previous call to this method or to
 *  somtGetFirstException.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,somtGetNextException)
	(this);
}


/* method: _get_somtContextArray */
string*   _get_somtContextArray()
{
/*
 *  An array of the context string-literals for the method.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,_get_somtContextArray)
	(this);
}


/* method: _get_somtCReturnType */
string   _get_somtCReturnType()
{
/*
 *  The C datatype the method returns. This may not correspond to the
 *  IDL data type (in particular, pointer stars may be added).
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTMethodEntryC,_get_somtCReturnType)
	(this);
}


/*
 * Reintroduce inherited methods
 */

/* method: _get_somtTypeObj */
SOMTEntryC*   _get_somtTypeObj()
{
/*
 *  The object representing the base type of the entry.
 *  This does not include pointer stars or array declarators.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTCommonEntryC,_get_somtTypeObj)
	(this);
}


/* method: _get_somtPtrs */
string   _get_somtPtrs()
{
/*
 *  The string of stars associated with the entry's type.
 *  For example, an object of type "foo" would have somtPtrs = NULL,
 *  type "foo *" would have somtPtrs = "*", type
 *  "foo **" would have somtPtrs = "**", etc.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTCommonEntryC,_get_somtPtrs)
	(this);
}


/* method: _get_somtArrayDimsString */
string   _get_somtArrayDimsString()
{
/*
 *  Array dimensions in string form.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTCommonEntryC,_get_somtArrayDimsString)
	(this);
}


/* method: somtGetFirstArrayDimension */
unsigned long   somtGetFirstArrayDimension()
{
/*
 *  The first array dimension, for items of type array.
 *  Zero indicates that the item is not an array.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTCommonEntryC,somtGetFirstArrayDimension)
	(this);
}


/* method: somtGetNextArrayDimension */
unsigned long   somtGetNextArrayDimension()
{
/*
 *  The next array dimension, for items of type array,
 *  relative to the previous call to this method or to
 *  somtGetFirstArrayDimension.  Zero indicates no more dimensions.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTCommonEntryC,somtGetNextArrayDimension)
	(this);
}


/* method: _get_somtSourceText */
string   _get_somtSourceText()
{
/*
 *  The un-parsed source text for this entry, with leading and
 *  trailing white space removed.  For attribute/typedef declarators
 *  and for user-defined types, this attribute only provides the
 *  source text for the entry's name.  For methods, arguments,
 *  and instance variables, however, this attribute provides the
 *  full definition.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTCommonEntryC,_get_somtSourceText)
	(this);
}


/* method: _get_somtType */
string   _get_somtType()
{
/*
 *  The IDL type for this entry in string form. For methods this is the
 *  return type.  For data or parameters this is the type of the data
 *  item or parameter. For user-defined types, this is the type specification.
 *  It is of the form:   <typename><pointer-stars> <array-declarators>
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTCommonEntryC,_get_somtType)
	(this);
}


/* method: _get_somtVisibility */
somtVisibilityT   _get_somtVisibility()
{
/*
 *  The visibility of this entry.  Note: the visibility of
 *  parameter entries will always be public, and methods can never be
 *  internal.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTCommonEntryC,_get_somtVisibility)
	(this);
}


/* method: somtIsArray */
boolean   somtIsArray(long* size)
{
/*
 *  Returns 1 (true) if the type involves an array.  When the type
 *  involves an array then <size> is set to be the size of the
 *  array.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTCommonEntryC,somtIsArray)
	(this,size);
}


/* method: somtIsPointer */
boolean   somtIsPointer()
{
/*
 *  Returns 1 (true) if the type involves a pointer, and 0 (false)
 *  otherwise
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTCommonEntryC,somtIsPointer)
	(this);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDumpSelfInt)
	(this,level);
}


/* method: somtSetSymbolsOnEntry */
long   somtSetSymbolsOnEntry(SOMTEmitC* emitter, 
		string prefix)
{
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,somtSetSymbolsOnEntry)
	(this,emitter,prefix);
}


/* method: _get_somtEntryName */
string   _get_somtEntryName()
{
/*
 *  The name associated with this entry.  Eg, the name of
 *  the data item, the class, the method, the type, etc.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,_get_somtEntryName)
	(this);
}


/* method: _set_somtEntryName */
void   _set_somtEntryName(string somtEntryName)
{
/*
 *  The name associated with this entry.  Eg, the name of
 *  the data item, the class, the method, the type, etc.
 */
   SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,_set_somtEntryName)
	(this,somtEntryName);
}


/* method: _get_somtElementType */
SOMTTypes   _get_somtElementType()
{
/*
 *  Returns the type of this entry.
 *  This is not datatype, but entry type (method, class,
 *  passthru, etc.). The value is defined by SOMTTypes.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,_get_somtElementType)
	(this);
}


/* method: _set_somtElementType */
void   _set_somtElementType(SOMTTypes somtElementType)
{
/*
 *  Returns the type of this entry.
 *  This is not datatype, but entry type (method, class,
 *  passthru, etc.). The value is defined by SOMTTypes.
 */
   SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,_set_somtElementType)
	(this,somtElementType);
}


/* method: _get_somtElementTypeName */
string   _get_somtElementTypeName()
{
/*
 *  String version of somtElementType.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,_get_somtElementTypeName)
	(this);
}


/* method: _get_somtEntryComment */
string   _get_somtEntryComment()
{
/*
 *  Returns the comment associated with this entry, or NULL is this
 *  entry has no associated comment.  Comments will have comment
 *  delimitors removed, but will retain newline characters as
 *  specified in the source file. (use smLookupComment)
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,_get_somtEntryComment)
	(this);
}


/* method: _get_somtSourceLineNumber */
unsigned long   _get_somtSourceLineNumber()
{
/*
 *  Returns the line number in the source file where this entry's
 *  syntactic form ended.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,_get_somtSourceLineNumber)
	(this);
}


/* method: _get_somtTypeCode */
TypeCode   _get_somtTypeCode()
{
/*
 *  The typecode, if appropriate, or NULL.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,_get_somtTypeCode)
	(this);
}


/* method: _get_somtIsReference */
boolean   _get_somtIsReference()
{
/*
 *  Whether the entry is just a reference to the real type (TRUE)
 *  rather than a declaration of it (FALSE).
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,_get_somtIsReference)
	(this);
}


/* method: _get_somtIDLScopedName */
string   _get_somtIDLScopedName()
{
/*
 *  The IDL scoped name of the entry (using double colon as delimiter).
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,_get_somtIDLScopedName)
	(this);
}


/* method: _get_somtCScopedName */
string   _get_somtCScopedName()
{
/*
 *  The C scoped name of the entry (using underscore as delimiter).
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,_get_somtCScopedName)
	(this);
}


/* method: somtGetModifierValue */
string   somtGetModifierValue(string modifierName)
{
/*
 *  Returns the value of the named modifier if this entry has the
 *  named modifier and NULL otherwise. Note: if the modifier is
 *  present but does not have a value then a value of <'\1'> is
 *  returned.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,somtGetModifierValue)
	(this,modifierName);
}


/* method: somtGetFirstModifier */
boolean   somtGetFirstModifier(string* modifierName, 
		string* modifierValue)
{
/*
 *  Returns the first modifier associated with this entry.  1 (true)
 *  is returned if the entry has at least one modifier and 0 (false)
 *  otherwise.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,somtGetFirstModifier)
	(this,modifierName,modifierValue);
}


/* method: somtGetNextModifier */
boolean   somtGetNextModifier(string* modifierName, 
		string* modifierValue)
{
/*
 *  Returns the next modifier (with respect to the last call to
 *  <somtGetNextModifier> or <somtGetFirstModifier>)
 *  associated with this entry.  1 (true) is returned if the entry
 *  had another modifier and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,somtGetNextModifier)
	(this,modifierName,modifierValue);
}


/* method: somtFormatModifier */
long   somtFormatModifier(string buffer, 
		string name, 
		string value)
{
/*
 *  Formats the indicated name/value pair into buffer.  Buffer must
 *  be big enough to hold all the formatted pair, no checks are made.
 *  The number of characters added to buffer are returned (not
 *  including the trailing null character).
 *  Note: value may be null
 *  You will probably never call this method, it is provided so that
 *  you can override it to control the format returned in
 *  <somtGetModifierList>.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,somtFormatModifier)
	(this,buffer,name,value);
}


/* method: somtGetModifierList */
long   somtGetModifierList(string buffer)
{
/*
 *  The modifiers for this entry are placed in <buffer> in template
 *  list form (newline separated).  Buffer must be big enough to
 *  hold all the modifiers, no checks are made. The number of
 *  modifiers is returned.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,somtGetModifierList)
	(this,buffer);
}


/* method: somtSetEntryStruct */
void   somtSetEntryStruct(Entry* es)
{
/*
 *  Sets the entry struct data member.
 *  Note, when overridding this method, it is important to call the
 *  parent version of the method first and then do your processing.
 */
   SOM_ResolveD(this,SOMTMethodEntryC,SOMTEntryC,somtSetEntryStruct)
	(this,es);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somUninit)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDumpSelf)
	(this,level);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMTMethodEntryC*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMTMethodEntryC*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMTMethodEntryC*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMTMethodEntryC*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   SOMTMethodEntryC_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   SOMTMethodEntryC_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   SOMTMethodEntryC_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   SOMTMethodEntryC_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   SOMTMethodEntryC_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   SOMTMethodEntryC_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,SOMTMethodEntryC,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}



};   /* SOMTMethodEntryC */



#endif       /* SOM_SOMTMethodEntryC_xh */

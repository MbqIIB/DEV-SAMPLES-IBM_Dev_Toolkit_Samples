
/*
 * This file was generated by the SOM Compiler.
 * FileName: tdeq.h.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emith: 2.47
 */

/*
 *    COMPONENT_NAME: somuc
 * 
 *    ORIGINS: 82, 81, 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *    Copyright © 1988, 1989 Apple Computer, Inc. All rights reserved.
 * 
 * CLASS_NAME: somf_TDeque
 * 
 * DESCRIPTION: A TDeque is a TSequence.  It is ordered based on the order
 *              elements are added to, or removed from, the collection.
 *              A TDeque can also be used as a queue, or a stack.
 * 
 */


#ifndef SOM_somf_TDeque_h
#define SOM_somf_TDeque_h


#include <som.h>

/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * Define the class name as an object type
 */
#ifndef somf_TDeque
#define somf_TDeque SOMObject
#endif
#include <tseq.h>

/*
 * Start of bindings for IDL types
 */

#ifndef SOMClass
    #define SOMClass SOMObject
#endif /* SOMClass */
#ifndef somf_TIterator
    #define somf_TIterator SOMObject
#endif /* somf_TIterator */
#ifndef somf_TSequenceIterator
    #define somf_TSequenceIterator SOMObject
#endif /* somf_TSequenceIterator */
#ifndef somf_TDequeLinkable
    #define somf_TDequeLinkable SOMObject
#endif /* somf_TDequeLinkable */
#ifndef somf_TPrimitiveLinkedList
    #define somf_TPrimitiveLinkedList SOMObject
#endif /* somf_TPrimitiveLinkedList */

/*
 * End of bindings for IDL types.
 */

/*
 * Passthru lines: File: "C.h", "after"
 */

#include <mcollect.h>
#include <tseqitr.h>
#include <tdeqlink.h>


#define somf_TDeque_MajorVersion 2
#define somf_TDeque_MinorVersion 1

/*
 * External name shortening if required
 */
#ifdef SOM_USE_SHORT_EXTERNAL_NAMES
#define somf_TDequeNewClass c
#pragma linkage(c, system)
#define somf_TDequeClassData d
#define somf_TDequeCClassData x
#endif /* SOM_USE_SHORT_EXTERNAL_NAMES */
/*--------------Migration------------*/
#define somf_TDeque_classObj somf_TDequeClassData.classObject
#define _somf_TDeque somf_TDeque_classObj

/*
 * Declare the class creation procedure
 */
SOMEXTERN SOMClass * SOMLINK somf_TDequeNewClass(integer4 somtmajorVersion,
		integer4 somtminorVersion);
#pragma linkage(somf_TDequeNewClass, system)

/*
 * Declare the class data structure
 */
SOMEXTERN struct somf_TDequeClassDataStructure {
	SOMClass *classObject;
	somMToken somfAddAfter;
	somMToken somfAddBefore;
	somMToken somfAddLast;
	somMToken somfAddFirst;
	somMToken somfRemoveLast;
	somMToken somfRemoveFirst;
	somMToken somfCreateSequenceIterator;
	somMToken somfRemoveQ;
	somMToken somfInsert;
	somMToken somfPop;
	somMToken somfPush;
	somMToken somfCreateNewLink;
	somMToken somfAssign;
	somMToken somfTDequeInitF;
	somMToken somfTDequeInitD;
} SOMDLINK somf_TDequeClassData;

/*
 * Declare the C specific class data structure
 */
SOMEXTERN struct somf_TDequeCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} SOMDLINK somf_TDequeCClassData;

/*
 * New and Renew macros for somf_TDeque
 */
#define somf_TDequeNew() \
   ( _somf_TDeque ? \
	_somNew(_somf_TDeque) \
	: ( somf_TDequeNewClass(\
		somf_TDeque_MajorVersion, \
		somf_TDeque_MinorVersion),\
	   _somNew(_somf_TDeque)))
#define somf_TDequeRenew(buf) \
   ( _somf_TDeque ? \
	_somRenew(_somf_TDeque, buf) \
	: ( somf_TDequeNewClass(\
		somf_TDeque_MajorVersion, \
		somf_TDeque_MinorVersion),\
	   _somRenew(_somf_TDeque, buf)))

/*
 * Override method: somInit
 */
#define somf_TDeque_somInit(somSelf) \
	SOMObject_somInit(somSelf)

/*
 * Override method: somUninit
 */
#define somf_TDeque_somUninit(somSelf) \
	SOMObject_somUninit(somSelf)

/*
 * Override method: somfAdd
 */
#define somf_TDeque_somfAdd(somSelf,ev,obj) \
	somf_TCollection_somfAdd(somSelf,ev,obj)

/*
 * Override method: somfRemove
 */
#define somf_TDeque_somfRemove(somSelf,ev,obj) \
	somf_TCollection_somfRemove(somSelf,ev,obj)

/*
 * Override method: somfDeleteAll
 */
#define somf_TDeque_somfDeleteAll(somSelf,ev) \
	somf_TCollection_somfDeleteAll(somSelf,ev)

/*
 * Override method: somfRemoveAll
 */
#define somf_TDeque_somfRemoveAll(somSelf,ev) \
	somf_TCollection_somfRemoveAll(somSelf,ev)

/*
 * Override method: somfCount
 */
#define somf_TDeque_somfCount(somSelf,ev) \
	somf_TCollection_somfCount(somSelf,ev)

/*
 * Override method: somfAfter
 */
#define somf_TDeque_somfAfter(somSelf,ev,obj) \
	somf_TSequence_somfAfter(somSelf,ev,obj)

/*
 * Override method: somfBefore
 */
#define somf_TDeque_somfBefore(somSelf,ev,obj) \
	somf_TSequence_somfBefore(somSelf,ev,obj)

/*
 * Override method: somfLast
 */
#define somf_TDeque_somfLast(somSelf,ev) \
	somf_TSequence_somfLast(somSelf,ev)

/*
 * Override method: somfFirst
 */
#define somf_TDeque_somfFirst(somSelf,ev) \
	somf_TSequence_somfFirst(somSelf,ev)

/*
 * Override method: somfMember
 */
#define somf_TDeque_somfMember(somSelf,ev,obj) \
	somf_TCollection_somfMember(somSelf,ev,obj)

/*
 * Override method: somfCreateIterator
 */
#define somf_TDeque_somfCreateIterator(somSelf,ev) \
	somf_TCollection_somfCreateIterator(somSelf,ev)

/*
 * New Method: somfTDequeInitF
 */
typedef somf_TDeque*   SOMLINK somTP_somf_TDeque_somfTDequeInitF(somf_TDeque *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn);
#pragma linkage(somTP_somf_TDeque_somfTDequeInitF, system)
typedef somTP_somf_TDeque_somfTDequeInitF *somTD_somf_TDeque_somfTDequeInitF;
/*
 *  Initializes the new deque.
 */
#define somMD_somf_TDeque_somfTDequeInitF "::somf_TDeque::somfTDequeInitF"
#define somf_TDeque_somfTDequeInitF(somSelf,ev,testfn) \
    (SOM_Resolve(somSelf, somf_TDeque, somfTDequeInitF) \
	(somSelf,ev,testfn))
#ifndef SOMGD_somfTDequeInitF
    #if (defined(_somfTDequeInitF) || defined(__somfTDequeInitF))
        #undef _somfTDequeInitF
        #undef __somfTDequeInitF
        #define SOMGD_somfTDequeInitF 1
    #else
        #define _somfTDequeInitF somf_TDeque_somfTDequeInitF
    #endif /* _somfTDequeInitF */
#endif /* SOMGD_somfTDequeInitF */

/*
 * New Method: somfTDequeInitD
 */
typedef somf_TDeque*   SOMLINK somTP_somf_TDeque_somfTDequeInitD(somf_TDeque *somSelf, Environment *ev, 
		somf_TDeque* s);
#pragma linkage(somTP_somf_TDeque_somfTDequeInitD, system)
typedef somTP_somf_TDeque_somfTDequeInitD *somTD_somf_TDeque_somfTDequeInitD;
/*
 *  Initializes the new deque.
 */
#define somMD_somf_TDeque_somfTDequeInitD "::somf_TDeque::somfTDequeInitD"
#define somf_TDeque_somfTDequeInitD(somSelf,ev,s) \
    (SOM_Resolve(somSelf, somf_TDeque, somfTDequeInitD) \
	(somSelf,ev,s))
#ifndef SOMGD_somfTDequeInitD
    #if (defined(_somfTDequeInitD) || defined(__somfTDequeInitD))
        #undef _somfTDequeInitD
        #undef __somfTDequeInitD
        #define SOMGD_somfTDequeInitD 1
    #else
        #define _somfTDequeInitD somf_TDeque_somfTDequeInitD
    #endif /* _somfTDequeInitD */
#endif /* SOMGD_somfTDequeInitD */

/*
 * New Method: somfAssign
 */
typedef void   SOMLINK somTP_somf_TDeque_somfAssign(somf_TDeque *somSelf, Environment *ev, 
		somf_TDeque* s);
#pragma linkage(somTP_somf_TDeque_somfAssign, system)
typedef somTP_somf_TDeque_somfAssign *somTD_somf_TDeque_somfAssign;
/*
 *  Assign the instance of this equal to the instance of source.
 */
#define somMD_somf_TDeque_somfAssign "::somf_TDeque::somfAssign"
#define somf_TDeque_somfAssign(somSelf,ev,s) \
    (SOM_Resolve(somSelf, somf_TDeque, somfAssign) \
	(somSelf,ev,s))
#ifndef SOMGD_somfAssign
    #if (defined(_somfAssign) || defined(__somfAssign))
        #undef _somfAssign
        #undef __somfAssign
        #define SOMGD_somfAssign 1
    #else
        #define _somfAssign somf_TDeque_somfAssign
    #endif /* _somfAssign */
#endif /* SOMGD_somfAssign */

/*
 * New Method: somfAddAfter
 */
typedef void   SOMLINK somTP_somf_TDeque_somfAddAfter(somf_TDeque *somSelf, Environment *ev, 
		somf_MCollectible* existingobj, 
		somf_MCollectible* tobeadded);
#pragma linkage(somTP_somf_TDeque_somfAddAfter, system)
typedef somTP_somf_TDeque_somfAddAfter *somTD_somf_TDeque_somfAddAfter;
/*
 *  Add the obj object into the List after the existing object.
 */
#define somMD_somf_TDeque_somfAddAfter "::somf_TDeque::somfAddAfter"
#define somf_TDeque_somfAddAfter(somSelf,ev,existingobj,tobeadded) \
    (SOM_Resolve(somSelf, somf_TDeque, somfAddAfter) \
	(somSelf,ev,existingobj,tobeadded))
#ifndef SOMGD_somfAddAfter
    #if (defined(_somfAddAfter) || defined(__somfAddAfter))
        #undef _somfAddAfter
        #undef __somfAddAfter
        #define SOMGD_somfAddAfter 1
    #else
        #define _somfAddAfter somf_TDeque_somfAddAfter
    #endif /* _somfAddAfter */
#endif /* SOMGD_somfAddAfter */

/*
 * New Method: somfAddBefore
 */
typedef void   SOMLINK somTP_somf_TDeque_somfAddBefore(somf_TDeque *somSelf, Environment *ev, 
		somf_MCollectible* existingobj, 
		somf_MCollectible* tobeadded);
#pragma linkage(somTP_somf_TDeque_somfAddBefore, system)
typedef somTP_somf_TDeque_somfAddBefore *somTD_somf_TDeque_somfAddBefore;
/*
 *  Add the obj object into the List before the existing object.
 */
#define somMD_somf_TDeque_somfAddBefore "::somf_TDeque::somfAddBefore"
#define somf_TDeque_somfAddBefore(somSelf,ev,existingobj,tobeadded) \
    (SOM_Resolve(somSelf, somf_TDeque, somfAddBefore) \
	(somSelf,ev,existingobj,tobeadded))
#ifndef SOMGD_somfAddBefore
    #if (defined(_somfAddBefore) || defined(__somfAddBefore))
        #undef _somfAddBefore
        #undef __somfAddBefore
        #define SOMGD_somfAddBefore 1
    #else
        #define _somfAddBefore somf_TDeque_somfAddBefore
    #endif /* _somfAddBefore */
#endif /* SOMGD_somfAddBefore */

/*
 * New Method: somfAddLast
 */
typedef void   SOMLINK somTP_somf_TDeque_somfAddLast(somf_TDeque *somSelf, Environment *ev, 
		somf_MCollectible* obj);
#pragma linkage(somTP_somf_TDeque_somfAddLast, system)
typedef somTP_somf_TDeque_somfAddLast *somTD_somf_TDeque_somfAddLast;
/*
 *  Add the obj object as the last object in the List.
 */
#define somMD_somf_TDeque_somfAddLast "::somf_TDeque::somfAddLast"
#define somf_TDeque_somfAddLast(somSelf,ev,obj) \
    (SOM_Resolve(somSelf, somf_TDeque, somfAddLast) \
	(somSelf,ev,obj))
#ifndef SOMGD_somfAddLast
    #if (defined(_somfAddLast) || defined(__somfAddLast))
        #undef _somfAddLast
        #undef __somfAddLast
        #define SOMGD_somfAddLast 1
    #else
        #define _somfAddLast somf_TDeque_somfAddLast
    #endif /* _somfAddLast */
#endif /* SOMGD_somfAddLast */

/*
 * New Method: somfAddFirst
 */
typedef void   SOMLINK somTP_somf_TDeque_somfAddFirst(somf_TDeque *somSelf, Environment *ev, 
		somf_MCollectible* obj);
#pragma linkage(somTP_somf_TDeque_somfAddFirst, system)
typedef somTP_somf_TDeque_somfAddFirst *somTD_somf_TDeque_somfAddFirst;
/*
 *  Add the obj object as the first object in the List.
 */
#define somMD_somf_TDeque_somfAddFirst "::somf_TDeque::somfAddFirst"
#define somf_TDeque_somfAddFirst(somSelf,ev,obj) \
    (SOM_Resolve(somSelf, somf_TDeque, somfAddFirst) \
	(somSelf,ev,obj))
#ifndef SOMGD_somfAddFirst
    #if (defined(_somfAddFirst) || defined(__somfAddFirst))
        #undef _somfAddFirst
        #undef __somfAddFirst
        #define SOMGD_somfAddFirst 1
    #else
        #define _somfAddFirst somf_TDeque_somfAddFirst
    #endif /* _somfAddFirst */
#endif /* SOMGD_somfAddFirst */

/*
 * New Method: somfRemoveLast
 */
typedef somf_MCollectible*   SOMLINK somTP_somf_TDeque_somfRemoveLast(somf_TDeque *somSelf, Environment *ev);
#pragma linkage(somTP_somf_TDeque_somfRemoveLast, system)
typedef somTP_somf_TDeque_somfRemoveLast *somTD_somf_TDeque_somfRemoveLast;
/*
 *  Remove the last object in the List.
 */
#define somMD_somf_TDeque_somfRemoveLast "::somf_TDeque::somfRemoveLast"
#define somf_TDeque_somfRemoveLast(somSelf,ev) \
    (SOM_Resolve(somSelf, somf_TDeque, somfRemoveLast) \
	(somSelf,ev))
#ifndef SOMGD_somfRemoveLast
    #if (defined(_somfRemoveLast) || defined(__somfRemoveLast))
        #undef _somfRemoveLast
        #undef __somfRemoveLast
        #define SOMGD_somfRemoveLast 1
    #else
        #define _somfRemoveLast somf_TDeque_somfRemoveLast
    #endif /* _somfRemoveLast */
#endif /* SOMGD_somfRemoveLast */

/*
 * New Method: somfRemoveFirst
 */
typedef somf_MCollectible*   SOMLINK somTP_somf_TDeque_somfRemoveFirst(somf_TDeque *somSelf, Environment *ev);
#pragma linkage(somTP_somf_TDeque_somfRemoveFirst, system)
typedef somTP_somf_TDeque_somfRemoveFirst *somTD_somf_TDeque_somfRemoveFirst;
/*
 *  Remove the first object in the deque.
 */
#define somMD_somf_TDeque_somfRemoveFirst "::somf_TDeque::somfRemoveFirst"
#define somf_TDeque_somfRemoveFirst(somSelf,ev) \
    (SOM_Resolve(somSelf, somf_TDeque, somfRemoveFirst) \
	(somSelf,ev))
#ifndef SOMGD_somfRemoveFirst
    #if (defined(_somfRemoveFirst) || defined(__somfRemoveFirst))
        #undef _somfRemoveFirst
        #undef __somfRemoveFirst
        #define SOMGD_somfRemoveFirst 1
    #else
        #define _somfRemoveFirst somf_TDeque_somfRemoveFirst
    #endif /* _somfRemoveFirst */
#endif /* SOMGD_somfRemoveFirst */

/*
 * New Method: somfCreateSequenceIterator
 */
typedef somf_TSequenceIterator*   SOMLINK somTP_somf_TDeque_somfCreateSequenceIterator(somf_TDeque *somSelf, Environment *ev);
#pragma linkage(somTP_somf_TDeque_somfCreateSequenceIterator, system)
typedef somTP_somf_TDeque_somfCreateSequenceIterator *somTD_somf_TDeque_somfCreateSequenceIterator;
/*
 *  This method returns a new iterator which is suitable for use in iterating
 *  over the objects in this collection.
 */
#define somMD_somf_TDeque_somfCreateSequenceIterator "::somf_TDeque::somfCreateSequenceIterator"
#define somf_TDeque_somfCreateSequenceIterator(somSelf,ev) \
    (SOM_Resolve(somSelf, somf_TDeque, somfCreateSequenceIterator) \
	(somSelf,ev))
#ifndef SOMGD_somfCreateSequenceIterator
    #if (defined(_somfCreateSequenceIterator) || defined(__somfCreateSequenceIterator))
        #undef _somfCreateSequenceIterator
        #undef __somfCreateSequenceIterator
        #define SOMGD_somfCreateSequenceIterator 1
    #else
        #define _somfCreateSequenceIterator somf_TDeque_somfCreateSequenceIterator
    #endif /* _somfCreateSequenceIterator */
#endif /* SOMGD_somfCreateSequenceIterator */

/*
 * New Method: somfRemoveQ
 */
typedef somf_MCollectible*   SOMLINK somTP_somf_TDeque_somfRemoveQ(somf_TDeque *somSelf, Environment *ev);
#pragma linkage(somTP_somf_TDeque_somfRemoveQ, system)
typedef somTP_somf_TDeque_somfRemoveQ *somTD_somf_TDeque_somfRemoveQ;
/*
 *  Remove the object on the deque/queue
 *  (This call can be used to simulate a queue)
 */
#define somMD_somf_TDeque_somfRemoveQ "::somf_TDeque::somfRemoveQ"
#define somf_TDeque_somfRemoveQ(somSelf,ev) \
    (SOM_Resolve(somSelf, somf_TDeque, somfRemoveQ) \
	(somSelf,ev))
#ifndef SOMGD_somfRemoveQ
    #if (defined(_somfRemoveQ) || defined(__somfRemoveQ))
        #undef _somfRemoveQ
        #undef __somfRemoveQ
        #define SOMGD_somfRemoveQ 1
    #else
        #define _somfRemoveQ somf_TDeque_somfRemoveQ
    #endif /* _somfRemoveQ */
#endif /* SOMGD_somfRemoveQ */

/*
 * New Method: somfInsert
 */
typedef void   SOMLINK somTP_somf_TDeque_somfInsert(somf_TDeque *somSelf, Environment *ev, 
		somf_MCollectible* obj);
#pragma linkage(somTP_somf_TDeque_somfInsert, system)
typedef somTP_somf_TDeque_somfInsert *somTD_somf_TDeque_somfInsert;
/*
 *  Add the object to the deque/queue
 *  (This call can be used to simulate a queue)
 */
#define somMD_somf_TDeque_somfInsert "::somf_TDeque::somfInsert"
#define somf_TDeque_somfInsert(somSelf,ev,obj) \
    (SOM_Resolve(somSelf, somf_TDeque, somfInsert) \
	(somSelf,ev,obj))
#ifndef SOMGD_somfInsert
    #if (defined(_somfInsert) || defined(__somfInsert))
        #undef _somfInsert
        #undef __somfInsert
        #define SOMGD_somfInsert 1
    #else
        #define _somfInsert somf_TDeque_somfInsert
    #endif /* _somfInsert */
#endif /* SOMGD_somfInsert */

/*
 * New Method: somfPop
 */
typedef somf_MCollectible*   SOMLINK somTP_somf_TDeque_somfPop(somf_TDeque *somSelf, Environment *ev);
#pragma linkage(somTP_somf_TDeque_somfPop, system)
typedef somTP_somf_TDeque_somfPop *somTD_somf_TDeque_somfPop;
/*
 *  Remove the object on the top of the deque/stack
 *  (This call can be used to simulate a stack)
 */
#define somMD_somf_TDeque_somfPop "::somf_TDeque::somfPop"
#define somf_TDeque_somfPop(somSelf,ev) \
    (SOM_Resolve(somSelf, somf_TDeque, somfPop) \
	(somSelf,ev))
#ifndef SOMGD_somfPop
    #if (defined(_somfPop) || defined(__somfPop))
        #undef _somfPop
        #undef __somfPop
        #define SOMGD_somfPop 1
    #else
        #define _somfPop somf_TDeque_somfPop
    #endif /* _somfPop */
#endif /* SOMGD_somfPop */

/*
 * New Method: somfPush
 */
typedef void   SOMLINK somTP_somf_TDeque_somfPush(somf_TDeque *somSelf, Environment *ev, 
		somf_MCollectible* obj);
#pragma linkage(somTP_somf_TDeque_somfPush, system)
typedef somTP_somf_TDeque_somfPush *somTD_somf_TDeque_somfPush;
/*
 *  Add the object to the top of the deque/stack
 *  (This call can be used to simulate a stack)
 */
#define somMD_somf_TDeque_somfPush "::somf_TDeque::somfPush"
#define somf_TDeque_somfPush(somSelf,ev,obj) \
    (SOM_Resolve(somSelf, somf_TDeque, somfPush) \
	(somSelf,ev,obj))
#ifndef SOMGD_somfPush
    #if (defined(_somfPush) || defined(__somfPush))
        #undef _somfPush
        #undef __somfPush
        #define SOMGD_somfPush 1
    #else
        #define _somfPush somf_TDeque_somfPush
    #endif /* _somfPush */
#endif /* SOMGD_somfPush */

/*
 * New Method: somfCreateNewLink
 */
typedef somf_TDequeLinkable*   SOMLINK somTP_somf_TDeque_somfCreateNewLink(somf_TDeque *somSelf, Environment *ev, 
		somf_TDequeLinkable* p, 
		somf_TDequeLinkable* n, 
		somf_MCollectible* v);
#pragma linkage(somTP_somf_TDeque_somfCreateNewLink, system)
typedef somTP_somf_TDeque_somfCreateNewLink *somTD_somf_TDeque_somfCreateNewLink;
/*
 *  Create a new TDeque link, using a TDequeLinkable instance.
 */
#define somMD_somf_TDeque_somfCreateNewLink "::somf_TDeque::somfCreateNewLink"
#define somf_TDeque_somfCreateNewLink(somSelf,ev,p,n,v) \
    (SOM_Resolve(somSelf, somf_TDeque, somfCreateNewLink) \
	(somSelf,ev,p,n,v))
#ifndef SOMGD_somfCreateNewLink
    #if (defined(_somfCreateNewLink) || defined(__somfCreateNewLink))
        #undef _somfCreateNewLink
        #undef __somfCreateNewLink
        #define SOMGD_somfCreateNewLink 1
    #else
        #define _somfCreateNewLink somf_TDeque_somfCreateNewLink
    #endif /* _somfCreateNewLink */
#endif /* SOMGD_somfCreateNewLink */
#ifndef SOM_DONT_USE_INHERITED_MACROS
#define somf_TDeque_somfOccurrencesOf somf_TSequence_somfOccurrencesOf
#define somf_TDeque_somfTSequenceInit somf_TSequence_somfTSequenceInit
#define somf_TDeque_somfAddAll somf_TCollection_somfAddAll
#define somf_TDeque_somfTestFunction somf_TCollection_somfTestFunction
#define somf_TDeque_somfSetTestFunction somf_TCollection_somfSetTestFunction
#define somf_TDeque_somfTCollectionInit somf_TCollection_somfTCollectionInit
#define somf_TDeque_somfIsEqual somf_MCollectible_somfIsEqual
#define somf_TDeque_somfClone somf_MCollectible_somfClone
#define somf_TDeque_somfClonePointer somf_MCollectible_somfClonePointer
#define somf_TDeque_somfHash somf_MCollectible_somfHash
#define somf_TDeque_somfIsSame somf_MCollectible_somfIsSame
#define somf_TDeque_somfIsNotEqual somf_MCollectible_somfIsNotEqual
#define somf_TDeque_somDefaultInit SOMObject_somDefaultInit
#define somf_TDeque_somDestruct SOMObject_somDestruct
#define somf_TDeque_somDefaultCopyInit SOMObject_somDefaultCopyInit
#define somf_TDeque_somDefaultAssign SOMObject_somDefaultAssign
#define somf_TDeque_somDefaultConstCopyInit SOMObject_somDefaultConstCopyInit
#define somf_TDeque_somDefaultVCopyInit SOMObject_somDefaultVCopyInit
#define somf_TDeque_somDefaultConstVCopyInit SOMObject_somDefaultConstVCopyInit
#define somf_TDeque_somDefaultConstAssign SOMObject_somDefaultConstAssign
#define somf_TDeque_somDefaultVAssign SOMObject_somDefaultVAssign
#define somf_TDeque_somDefaultConstVAssign SOMObject_somDefaultConstVAssign
#define somf_TDeque_somFree SOMObject_somFree
#define somf_TDeque_somGetClass SOMObject_somGetClass
#define somf_TDeque_somGetClassName SOMObject_somGetClassName
#define somf_TDeque_somGetSize SOMObject_somGetSize
#define somf_TDeque_somIsA SOMObject_somIsA
#define somf_TDeque_somIsInstanceOf SOMObject_somIsInstanceOf
#define somf_TDeque_somRespondsTo SOMObject_somRespondsTo
#define somf_TDeque_somDispatch SOMObject_somDispatch
#define somf_TDeque_somClassDispatch SOMObject_somClassDispatch
#define somf_TDeque_somCastObj SOMObject_somCastObj
#define somf_TDeque_somResetObj SOMObject_somResetObj
#define somf_TDeque_somDispatchV SOMObject_somDispatchV
#define somf_TDeque_somDispatchL SOMObject_somDispatchL
#define somf_TDeque_somDispatchA SOMObject_somDispatchA
#define somf_TDeque_somDispatchD SOMObject_somDispatchD
#define somf_TDeque_somPrintSelf SOMObject_somPrintSelf
#define somf_TDeque_somDumpSelf SOMObject_somDumpSelf
#define somf_TDeque_somDumpSelfInt SOMObject_somDumpSelfInt
#endif /* SOM_DONT_USE_INHERITED_MACROS */

#endif       /* SOM_somf_TDeque_h */

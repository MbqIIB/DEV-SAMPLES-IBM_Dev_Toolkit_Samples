
/*
 * This file was generated by the SOM Compiler.
 * FileName: iogrp.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    COMPONENT_NAME: somp
 * 
 *    ORIGINS: 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1994,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMPIOGroup_xh
#define SOM_SOMPIOGroup_xh

class SOMPIOGroup;

/*
 *  An IOGroup is a collection of objects which have been grouped
 *  together with the intention that they will be written/read to/from
 *  a storage media at the same time. For example, the group of objects
 *  could be stored in the same file.
 * 
 *  Objects are added, located and removed from the group via an integer
 *  key.
 */

#define SOMPIOGroup_MajorVersion 2
#define SOMPIOGroup_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMPKeyedSet_xh
#include <srkset.xh>
#endif

#ifndef SOMPIOGroup_API
#define SOMPIOGroup_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class SOMPPersistentId;
class SOMPPersistentObject;
class SOMPIteratorHandle;
typedef
long  SOMPIOGroup_SOMPIOGroupKey;

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_SOMPIOGroupKey
    #ifdef SOMPIOGroupKey
        #undef SOMPIOGroupKey
        #define SOMTGD_SOMPIOGroupKey 1
    #else
        #define SOMPIOGroupKey SOMPIOGroup_SOMPIOGroupKey
    #endif /* SOMPIOGroupKey */
#endif /* SOMTGD_SOMPIOGroupKey */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the SOMPIOGroup Class */
SOMEXTERN SOMClass * SOMLINK SOMPIOGroupNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMPIOGroup class object, and the methods it introduces. */
SOMEXTERN struct SOMPIOGroupClassDataStructure {
	SOMClass *classObject;
	somMToken sompGetLastOffset;
	somMToken sompGetNextAvailableOffset;
	somMToken sompSetLastOffset;
	somMToken sompFindById;
	somMToken sompSetGroupName;
	somMToken sompGetGroupName;
	somMToken sompCount;
	somMToken sompFirst;
	somMToken sompNewIterator;
	somMToken sompNextObjectInGroup;
	somMToken sompFreeIterator;
	somMToken sompAddToGroup;
	somMToken sompRemoveFromGroup;
	somMToken sompFindByKey;
} SOMDLINK SOMPIOGroupClassData;
#define _SOMPIOGroup SOMPIOGroupClassData.classObject

/* The API to parentMtabs for SOMPIOGroup, and the instance data it introduces. */
SOMEXTERN struct SOMPIOGroupCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMPIOGroupCClassData;

/*
 * -- Typedefs for SOMPIOGroup Method Procedures
 */
SOMEXTERN {
typedef long   SOMLINK somTP_SOMPIOGroup_sompCount(SOMPIOGroup *somSelf, Environment *ev);
typedef somTP_SOMPIOGroup_sompCount *somTD_SOMPIOGroup_sompCount;
typedef SOMObject*   SOMLINK somTP_SOMPIOGroup_sompFirst(SOMPIOGroup *somSelf, Environment *ev);
typedef somTP_SOMPIOGroup_sompFirst *somTD_SOMPIOGroup_sompFirst;
typedef SOMPIteratorHandle*   SOMLINK somTP_SOMPIOGroup_sompNewIterator(SOMPIOGroup *somSelf, Environment *ev);
typedef somTP_SOMPIOGroup_sompNewIterator *somTD_SOMPIOGroup_sompNewIterator;
typedef SOMObject*   SOMLINK somTP_SOMPIOGroup_sompNextObjectInGroup(SOMPIOGroup *somSelf, Environment *ev, 
		SOMPIteratorHandle* iteratorHandle);
typedef somTP_SOMPIOGroup_sompNextObjectInGroup *somTD_SOMPIOGroup_sompNextObjectInGroup;
typedef void   SOMLINK somTP_SOMPIOGroup_sompFreeIterator(SOMPIOGroup *somSelf, Environment *ev, 
		SOMPIteratorHandle* iteratorHandle);
typedef somTP_SOMPIOGroup_sompFreeIterator *somTD_SOMPIOGroup_sompFreeIterator;
typedef void   SOMLINK somTP_SOMPIOGroup_sompAddToGroup(SOMPIOGroup *somSelf, Environment *ev, 
		SOMObject* newObject, 
		SOMPIOGroup_SOMPIOGroupKey key);
typedef somTP_SOMPIOGroup_sompAddToGroup *somTD_SOMPIOGroup_sompAddToGroup;
typedef SOMObject*   SOMLINK somTP_SOMPIOGroup_sompRemoveFromGroup(SOMPIOGroup *somSelf, Environment *ev, 
		SOMPIOGroup_SOMPIOGroupKey key);
typedef somTP_SOMPIOGroup_sompRemoveFromGroup *somTD_SOMPIOGroup_sompRemoveFromGroup;
typedef SOMObject*   SOMLINK somTP_SOMPIOGroup_sompFindByKey(SOMPIOGroup *somSelf, Environment *ev, 
		SOMPIOGroup_SOMPIOGroupKey key);
typedef somTP_SOMPIOGroup_sompFindByKey *somTD_SOMPIOGroup_sompFindByKey;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef SOMObject*   SOMLINK somTP_SOMPIOGroup_sompGetFirstObject(SOMPIOGroup *somSelf, Environment *ev);
typedef somTP_SOMPIOGroup_sompGetFirstObject *somTD_SOMPIOGroup_sompGetFirstObject;
typedef void   SOMLINK somTP_SOMPIOGroup_somDefaultInit(SOMPIOGroup *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_SOMPIOGroup_somDefaultInit *somTD_SOMPIOGroup_somDefaultInit;
typedef void   SOMLINK somTP_SOMPIOGroup_somDestruct(SOMPIOGroup *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_SOMPIOGroup_somDestruct *somTD_SOMPIOGroup_somDestruct;
typedef void   SOMLINK somTP_SOMPIOGroup_somDefaultCopyInit(SOMPIOGroup *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPIOGroup_somDefaultCopyInit *somTD_SOMPIOGroup_somDefaultCopyInit;
typedef SOMPIOGroup*   SOMLINK somTP_SOMPIOGroup_somDefaultAssign(SOMPIOGroup *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPIOGroup_somDefaultAssign *somTD_SOMPIOGroup_somDefaultAssign;
typedef void   SOMLINK somTP_SOMPIOGroup_somDefaultConstCopyInit(SOMPIOGroup *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPIOGroup_somDefaultConstCopyInit *somTD_SOMPIOGroup_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_SOMPIOGroup_somDefaultVCopyInit(SOMPIOGroup *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPIOGroup_somDefaultVCopyInit *somTD_SOMPIOGroup_somDefaultVCopyInit;
typedef void   SOMLINK somTP_SOMPIOGroup_somDefaultConstVCopyInit(SOMPIOGroup *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPIOGroup_somDefaultConstVCopyInit *somTD_SOMPIOGroup_somDefaultConstVCopyInit;
typedef SOMPIOGroup*   SOMLINK somTP_SOMPIOGroup_somDefaultConstAssign(SOMPIOGroup *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPIOGroup_somDefaultConstAssign *somTD_SOMPIOGroup_somDefaultConstAssign;
typedef SOMPIOGroup*   SOMLINK somTP_SOMPIOGroup_somDefaultVAssign(SOMPIOGroup *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPIOGroup_somDefaultVAssign *somTD_SOMPIOGroup_somDefaultVAssign;
typedef SOMPIOGroup*   SOMLINK somTP_SOMPIOGroup_somDefaultConstVAssign(SOMPIOGroup *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPIOGroup_somDefaultConstVAssign *somTD_SOMPIOGroup_somDefaultConstVAssign;
typedef void   SOMLINK somTP_SOMPIOGroup_somInit(SOMPIOGroup *somSelf);
typedef somTP_SOMPIOGroup_somInit *somTD_SOMPIOGroup_somInit;
typedef void   SOMLINK somTP_SOMPIOGroup_somFree(SOMPIOGroup *somSelf);
typedef somTP_SOMPIOGroup_somFree *somTD_SOMPIOGroup_somFree;
typedef void   SOMLINK somTP_SOMPIOGroup_somUninit(SOMPIOGroup *somSelf);
typedef somTP_SOMPIOGroup_somUninit *somTD_SOMPIOGroup_somUninit;
typedef SOMClass*   SOMLINK somTP_SOMPIOGroup_somGetClass(SOMPIOGroup *somSelf);
typedef somTP_SOMPIOGroup_somGetClass *somTD_SOMPIOGroup_somGetClass;
typedef string   SOMLINK somTP_SOMPIOGroup_somGetClassName(SOMPIOGroup *somSelf);
typedef somTP_SOMPIOGroup_somGetClassName *somTD_SOMPIOGroup_somGetClassName;
typedef long   SOMLINK somTP_SOMPIOGroup_somGetSize(SOMPIOGroup *somSelf);
typedef somTP_SOMPIOGroup_somGetSize *somTD_SOMPIOGroup_somGetSize;
typedef boolean   SOMLINK somTP_SOMPIOGroup_somIsA(SOMPIOGroup *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMPIOGroup_somIsA *somTD_SOMPIOGroup_somIsA;
typedef boolean   SOMLINK somTP_SOMPIOGroup_somIsInstanceOf(SOMPIOGroup *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMPIOGroup_somIsInstanceOf *somTD_SOMPIOGroup_somIsInstanceOf;
typedef boolean   SOMLINK somTP_SOMPIOGroup_somRespondsTo(SOMPIOGroup *somSelf, 
		somId mId);
typedef somTP_SOMPIOGroup_somRespondsTo *somTD_SOMPIOGroup_somRespondsTo;
typedef boolean   SOMLINK somTP_SOMPIOGroup_somDispatch(SOMPIOGroup *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMPIOGroup_somDispatch *somTD_SOMPIOGroup_somDispatch;
typedef boolean   SOMLINK somTP_SOMPIOGroup_somClassDispatch(SOMPIOGroup *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMPIOGroup_somClassDispatch *somTD_SOMPIOGroup_somClassDispatch;
typedef boolean   SOMLINK somTP_SOMPIOGroup_somCastObj(SOMPIOGroup *somSelf, 
		SOMClass* cls);
typedef somTP_SOMPIOGroup_somCastObj *somTD_SOMPIOGroup_somCastObj;
typedef boolean   SOMLINK somTP_SOMPIOGroup_somResetObj(SOMPIOGroup *somSelf);
typedef somTP_SOMPIOGroup_somResetObj *somTD_SOMPIOGroup_somResetObj;
typedef void   SOMLINK somTP_SOMPIOGroup_somDispatchV(SOMPIOGroup *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPIOGroup_somDispatchV *somTD_SOMPIOGroup_somDispatchV;
typedef long   SOMLINK somTP_SOMPIOGroup_somDispatchL(SOMPIOGroup *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPIOGroup_somDispatchL *somTD_SOMPIOGroup_somDispatchL;
typedef void*   SOMLINK somTP_SOMPIOGroup_somDispatchA(SOMPIOGroup *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPIOGroup_somDispatchA *somTD_SOMPIOGroup_somDispatchA;
typedef double   SOMLINK somTP_SOMPIOGroup_somDispatchD(SOMPIOGroup *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPIOGroup_somDispatchD *somTD_SOMPIOGroup_somDispatchD;
typedef SOMObject*   SOMLINK somTP_SOMPIOGroup_somPrintSelf(SOMPIOGroup *somSelf);
typedef somTP_SOMPIOGroup_somPrintSelf *somTD_SOMPIOGroup_somPrintSelf;
typedef void   SOMLINK somTP_SOMPIOGroup_somDumpSelf(SOMPIOGroup *somSelf, 
		long level);
typedef somTP_SOMPIOGroup_somDumpSelf *somTD_SOMPIOGroup_somDumpSelf;
typedef void   SOMLINK somTP_SOMPIOGroup_somDumpSelfInt(SOMPIOGroup *somSelf, 
		long level);
typedef somTP_SOMPIOGroup_somDumpSelfInt *somTD_SOMPIOGroup_somDumpSelfInt;
}

#endif /* SOMPIOGroup_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMPIOGroup
 */
class SOMPIOGroup : public SOMPKeyedSet
{
/*
 *  An IOGroup is a collection of objects which have been grouped
 *  together with the intention that they will be written/read to/from
 *  a storage media at the same time. For example, the group of objects
 *  could be stored in the same file.
 * 
 *  Objects are added, located and removed from the group via an integer
 *  key.
 */
public:

// SOMPIOGroup::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMPIOGroup) SOMPIOGroupNewClass(SOMPIOGroup_MajorVersion,SOMPIOGroup_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMPIOGroup,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMPIOGroup));
}

// SOMPIOGroup::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

SOMPIOGroup& operator=(SOMPIOGroup& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

SOMPIOGroup()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMPIOGroupCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMPIOGroup(SOMPIOGroup* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMPIOGroupCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
SOMPIOGroup(const SOMPIOGroup* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMPIOGroupCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: sompCount */
long   sompCount(Environment *ev)
{
/*
 *  Returns the number of objects in this group
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMPIOGroup,sompCount)
	(this, ev);
}


/* method: sompFirst */
SOMObject*   sompFirst(Environment *ev)
{
/*
 *  Returns the first available object in the group. The object returned
 *  is not based on any ordering, it is simply the one closest at hand.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMPIOGroup,sompFirst)
	(this, ev);
}


/* method: sompNewIterator */
SOMPIteratorHandle*   sompNewIterator(Environment *ev)
{
/*
 *  Returns a handle which can be used with the sompNextObjectInGroup
 *  method of this class to iterate through all the objects contained
 *  by an instance of this class.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMPIOGroup,sompNewIterator)
	(this, ev);
}


/* method: sompNextObjectInGroup */
SOMObject*   sompNextObjectInGroup(Environment *ev, 
		SOMPIteratorHandle* iteratorHandle)
{
/*
 *  Return the next object in the group. If there are no more objects left,
 *  it returns NULL.
 * 
 *  Example use:
 * 
 *  hit = _sompNewIterator(myGroup)
 *  while (obj = _sompNextObjectInGroup(hit)) {
 *     ...
 *     use obj
 *     ...
 *     }
 *  _sompFreeIterator(hit);
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMPIOGroup,sompNextObjectInGroup)
	(this, ev,iteratorHandle);
}


/* method: sompFreeIterator */
void   sompFreeIterator(Environment *ev, 
		SOMPIteratorHandle* iteratorHandle)
{
/*
 *  Free the resources used by the given iterator.
 */
   SOM_ResolveD(this,SOMPIOGroup,SOMPIOGroup,sompFreeIterator)
	(this, ev,iteratorHandle);
}


/* method: sompAddToGroup */
void   sompAddToGroup(Environment *ev, 
		SOMObject* newObject, 
		SOMPIOGroup_SOMPIOGroupKey key)
{
/*
 *  Adds the given object to this group of objects. The given key for
 *  the new object must be unique among all the other objects in
 *  this group.
 */
   SOM_ResolveD(this,SOMPIOGroup,SOMPIOGroup,sompAddToGroup)
	(this, ev,newObject,key);
}


/* method: sompRemoveFromGroup */
SOMObject*   sompRemoveFromGroup(Environment *ev, 
		SOMPIOGroup_SOMPIOGroupKey key)
{
/*
 *  Remove from the group and return the object with the given key value.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMPIOGroup,sompRemoveFromGroup)
	(this, ev,key);
}


/* method: sompFindByKey */
SOMObject*   sompFindByKey(Environment *ev, 
		SOMPIOGroup_SOMPIOGroupKey key)
{
/*
 *  Return the object with the given key value.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMPIOGroup,sompFindByKey)
	(this, ev,key);
}


/*
 * Reintroduce inherited methods
 */

/* method: sompGetFirstObject */
SOMObject*   sompGetFirstObject(Environment *ev)
{
/*
 *  Get first object in this set.
 *  If set is empty, returns NULL.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMPKeyedSet,sompGetFirstObject)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMPIOGroup*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMPIOGroup*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMPIOGroup*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMPIOGroup*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,SOMPIOGroup,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,SOMPIOGroup,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,SOMPIOGroup,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   SOMPIOGroup_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   SOMPIOGroup_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMPIOGroup,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   SOMPIOGroup_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   SOMPIOGroup_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   SOMPIOGroup_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   SOMPIOGroup_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,SOMPIOGroup,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,SOMPIOGroup,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* SOMPIOGroup */



#endif       /* SOM_SOMPIOGroup_xh */

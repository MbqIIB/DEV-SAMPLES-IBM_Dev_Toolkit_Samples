
/*
 * This file was generated by the SOM Compiler.
 * FileName: fsgm.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    COMPONENT_NAME: somp
 * 
 *    ORIGINS: 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1994,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMPBinary_xh
#define SOM_SOMPBinary_xh

class SOMPBinary;

/*
 *  This is an IO Group Manager class which writes groups of objects
 *  in a format similar to class SOMPAscii execept that this
 *  class stores numeric data in binary.
 */

#define SOMPBinary_MajorVersion 2
#define SOMPBinary_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMPAscii_xh
#include <fsagm.xh>
#endif

#ifndef SOMPBinary_API
#define SOMPBinary_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class SOMPMediaInterfaceAbstract;
class SOMPIOGroup;
class SOMPPersistentId;
class SOMPPersistentObject;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the SOMPBinary Class */
SOMEXTERN SOMClass * SOMLINK SOMPBinaryNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMPBinary class object, and the methods it introduces. */
SOMEXTERN struct SOMPBinaryClassDataStructure {
	SOMClass *classObject;
} SOMDLINK SOMPBinaryClassData;
#define _SOMPBinary SOMPBinaryClassData.classObject

/* The API to parentMtabs for SOMPBinary, and the instance data it introduces. */
SOMEXTERN struct SOMPBinaryCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMPBinaryCClassData;

/*
 * -- Typedefs for SOMPBinary Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_SOMPBinary_sompNewMediaInterface(SOMPBinary *somSelf, Environment *ev, 
		string IOInfo);
typedef somTP_SOMPBinary_sompNewMediaInterface *somTD_SOMPBinary_sompNewMediaInterface;
typedef SOMPMediaInterfaceAbstract*   SOMLINK somTP_SOMPBinary_sompGetMediaInterface(SOMPBinary *somSelf, Environment *ev);
typedef somTP_SOMPBinary_sompGetMediaInterface *somTD_SOMPBinary_sompGetMediaInterface;
typedef void   SOMLINK somTP_SOMPBinary_sompFreeMediaInterface(SOMPBinary *somSelf, Environment *ev);
typedef somTP_SOMPBinary_sompFreeMediaInterface *somTD_SOMPBinary_sompFreeMediaInterface;
typedef SOMPMediaInterfaceAbstract*   SOMLINK somTP_SOMPBinary_sompInstantiateMediaInterface(SOMPBinary *somSelf, Environment *ev);
typedef somTP_SOMPBinary_sompInstantiateMediaInterface *somTD_SOMPBinary_sompInstantiateMediaInterface;
typedef boolean   SOMLINK somTP_SOMPBinary_sompWriteGroup(SOMPBinary *somSelf, Environment *ev, 
		SOMPPersistentObject* thisPo);
typedef somTP_SOMPBinary_sompWriteGroup *somTD_SOMPBinary_sompWriteGroup;
typedef SOMPPersistentObject*   SOMLINK somTP_SOMPBinary_sompReadGroup(SOMPBinary *somSelf, Environment *ev, 
		SOMPPersistentId* objectID);
typedef somTP_SOMPBinary_sompReadGroup *somTD_SOMPBinary_sompReadGroup;
typedef void   SOMLINK somTP_SOMPBinary_sompReadObjectData(SOMPBinary *somSelf, Environment *ev, 
		SOMPPersistentObject* thisPo);
typedef somTP_SOMPBinary_sompReadObjectData *somTD_SOMPBinary_sompReadObjectData;
typedef void   SOMLINK somTP_SOMPBinary_sompDeleteObjectFromGroup(SOMPBinary *somSelf, Environment *ev, 
		SOMPPersistentId* objectID);
typedef somTP_SOMPBinary_sompDeleteObjectFromGroup *somTD_SOMPBinary_sompDeleteObjectFromGroup;
typedef boolean   SOMLINK somTP_SOMPBinary_sompGroupExists(SOMPBinary *somSelf, Environment *ev, 
		string IOInfo);
typedef somTP_SOMPBinary_sompGroupExists *somTD_SOMPBinary_sompGroupExists;
typedef boolean   SOMLINK somTP_SOMPBinary_sompObjectInGroup(SOMPBinary *somSelf, Environment *ev, 
		SOMPPersistentId* objectID);
typedef somTP_SOMPBinary_sompObjectInGroup *somTD_SOMPBinary_sompObjectInGroup;
typedef boolean   SOMLINK somTP_SOMPBinary_sompMediaFormatOk(SOMPBinary *somSelf, Environment *ev, 
		string mediaFormatName);
typedef somTP_SOMPBinary_sompMediaFormatOk *somTD_SOMPBinary_sompMediaFormatOk;
typedef void   SOMLINK somTP_SOMPBinary_somInit(SOMPBinary *somSelf);
typedef somTP_SOMPBinary_somInit *somTD_SOMPBinary_somInit;
typedef void   SOMLINK somTP_SOMPBinary_somUninit(SOMPBinary *somSelf);
typedef somTP_SOMPBinary_somUninit *somTD_SOMPBinary_somUninit;
typedef void   SOMLINK somTP_SOMPBinary_somDefaultInit(SOMPBinary *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_SOMPBinary_somDefaultInit *somTD_SOMPBinary_somDefaultInit;
typedef void   SOMLINK somTP_SOMPBinary_somDestruct(SOMPBinary *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_SOMPBinary_somDestruct *somTD_SOMPBinary_somDestruct;
typedef void   SOMLINK somTP_SOMPBinary_somDefaultCopyInit(SOMPBinary *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPBinary_somDefaultCopyInit *somTD_SOMPBinary_somDefaultCopyInit;
typedef SOMPBinary*   SOMLINK somTP_SOMPBinary_somDefaultAssign(SOMPBinary *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPBinary_somDefaultAssign *somTD_SOMPBinary_somDefaultAssign;
typedef void   SOMLINK somTP_SOMPBinary_somDefaultConstCopyInit(SOMPBinary *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPBinary_somDefaultConstCopyInit *somTD_SOMPBinary_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_SOMPBinary_somDefaultVCopyInit(SOMPBinary *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPBinary_somDefaultVCopyInit *somTD_SOMPBinary_somDefaultVCopyInit;
typedef void   SOMLINK somTP_SOMPBinary_somDefaultConstVCopyInit(SOMPBinary *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPBinary_somDefaultConstVCopyInit *somTD_SOMPBinary_somDefaultConstVCopyInit;
typedef SOMPBinary*   SOMLINK somTP_SOMPBinary_somDefaultConstAssign(SOMPBinary *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPBinary_somDefaultConstAssign *somTD_SOMPBinary_somDefaultConstAssign;
typedef SOMPBinary*   SOMLINK somTP_SOMPBinary_somDefaultVAssign(SOMPBinary *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPBinary_somDefaultVAssign *somTD_SOMPBinary_somDefaultVAssign;
typedef SOMPBinary*   SOMLINK somTP_SOMPBinary_somDefaultConstVAssign(SOMPBinary *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPBinary_somDefaultConstVAssign *somTD_SOMPBinary_somDefaultConstVAssign;
typedef void   SOMLINK somTP_SOMPBinary_somFree(SOMPBinary *somSelf);
typedef somTP_SOMPBinary_somFree *somTD_SOMPBinary_somFree;
typedef SOMClass*   SOMLINK somTP_SOMPBinary_somGetClass(SOMPBinary *somSelf);
typedef somTP_SOMPBinary_somGetClass *somTD_SOMPBinary_somGetClass;
typedef string   SOMLINK somTP_SOMPBinary_somGetClassName(SOMPBinary *somSelf);
typedef somTP_SOMPBinary_somGetClassName *somTD_SOMPBinary_somGetClassName;
typedef long   SOMLINK somTP_SOMPBinary_somGetSize(SOMPBinary *somSelf);
typedef somTP_SOMPBinary_somGetSize *somTD_SOMPBinary_somGetSize;
typedef boolean   SOMLINK somTP_SOMPBinary_somIsA(SOMPBinary *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMPBinary_somIsA *somTD_SOMPBinary_somIsA;
typedef boolean   SOMLINK somTP_SOMPBinary_somIsInstanceOf(SOMPBinary *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMPBinary_somIsInstanceOf *somTD_SOMPBinary_somIsInstanceOf;
typedef boolean   SOMLINK somTP_SOMPBinary_somRespondsTo(SOMPBinary *somSelf, 
		somId mId);
typedef somTP_SOMPBinary_somRespondsTo *somTD_SOMPBinary_somRespondsTo;
typedef boolean   SOMLINK somTP_SOMPBinary_somDispatch(SOMPBinary *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMPBinary_somDispatch *somTD_SOMPBinary_somDispatch;
typedef boolean   SOMLINK somTP_SOMPBinary_somClassDispatch(SOMPBinary *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMPBinary_somClassDispatch *somTD_SOMPBinary_somClassDispatch;
typedef boolean   SOMLINK somTP_SOMPBinary_somCastObj(SOMPBinary *somSelf, 
		SOMClass* cls);
typedef somTP_SOMPBinary_somCastObj *somTD_SOMPBinary_somCastObj;
typedef boolean   SOMLINK somTP_SOMPBinary_somResetObj(SOMPBinary *somSelf);
typedef somTP_SOMPBinary_somResetObj *somTD_SOMPBinary_somResetObj;
typedef void   SOMLINK somTP_SOMPBinary_somDispatchV(SOMPBinary *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPBinary_somDispatchV *somTD_SOMPBinary_somDispatchV;
typedef long   SOMLINK somTP_SOMPBinary_somDispatchL(SOMPBinary *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPBinary_somDispatchL *somTD_SOMPBinary_somDispatchL;
typedef void*   SOMLINK somTP_SOMPBinary_somDispatchA(SOMPBinary *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPBinary_somDispatchA *somTD_SOMPBinary_somDispatchA;
typedef double   SOMLINK somTP_SOMPBinary_somDispatchD(SOMPBinary *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPBinary_somDispatchD *somTD_SOMPBinary_somDispatchD;
typedef SOMObject*   SOMLINK somTP_SOMPBinary_somPrintSelf(SOMPBinary *somSelf);
typedef somTP_SOMPBinary_somPrintSelf *somTD_SOMPBinary_somPrintSelf;
typedef void   SOMLINK somTP_SOMPBinary_somDumpSelf(SOMPBinary *somSelf, 
		long level);
typedef somTP_SOMPBinary_somDumpSelf *somTD_SOMPBinary_somDumpSelf;
typedef void   SOMLINK somTP_SOMPBinary_somDumpSelfInt(SOMPBinary *somSelf, 
		long level);
typedef somTP_SOMPBinary_somDumpSelfInt *somTD_SOMPBinary_somDumpSelfInt;
}

#endif /* SOMPBinary_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMPBinary
 */
class SOMPBinary : public SOMPAscii
{
/*
 *  This is an IO Group Manager class which writes groups of objects
 *  in a format similar to class SOMPAscii execept that this
 *  class stores numeric data in binary.
 */
public:

// SOMPBinary::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMPBinary) SOMPBinaryNewClass(SOMPBinary_MajorVersion,SOMPBinary_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMPBinary,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMPBinary));
}

// SOMPBinary::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

SOMPBinary& operator=(SOMPBinary& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

SOMPBinary()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMPBinaryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMPBinary(SOMPBinary* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMPBinaryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
SOMPBinary(const SOMPBinary* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMPBinaryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/*
 * Reintroduce inherited methods
 */

/* method: sompNewMediaInterface */
void   sompNewMediaInterface(Environment *ev, 
		string IOInfo)
{
   SOM_ResolveD(this,SOMPBinary,SOMPIOGroupMgrAbstract,sompNewMediaInterface)
	(this, ev,IOInfo);
}


/* method: sompGetMediaInterface */
SOMPMediaInterfaceAbstract*   sompGetMediaInterface(Environment *ev)
{
   return SOM_ResolveD(this,SOMPBinary,SOMPIOGroupMgrAbstract,sompGetMediaInterface)
	(this, ev);
}


/* method: sompFreeMediaInterface */
void   sompFreeMediaInterface(Environment *ev)
{
   SOM_ResolveD(this,SOMPBinary,SOMPIOGroupMgrAbstract,sompFreeMediaInterface)
	(this, ev);
}


/* method: sompInstantiateMediaInterface */
SOMPMediaInterfaceAbstract*   sompInstantiateMediaInterface(Environment *ev)
{
   return SOM_ResolveD(this,SOMPBinary,SOMPIOGroupMgrAbstract,sompInstantiateMediaInterface)
	(this, ev);
}


/* method: sompWriteGroup */
boolean   sompWriteGroup(Environment *ev, 
		SOMPPersistentObject* thisPo)
{
   return SOM_ResolveD(this,SOMPBinary,SOMPIOGroupMgrAbstract,sompWriteGroup)
	(this, ev,thisPo);
}


/* method: sompReadGroup */
SOMPPersistentObject*   sompReadGroup(Environment *ev, 
		SOMPPersistentId* objectID)
{
   return SOM_ResolveD(this,SOMPBinary,SOMPIOGroupMgrAbstract,sompReadGroup)
	(this, ev,objectID);
}


/* method: sompReadObjectData */
void   sompReadObjectData(Environment *ev, 
		SOMPPersistentObject* thisPo)
{
   SOM_ResolveD(this,SOMPBinary,SOMPIOGroupMgrAbstract,sompReadObjectData)
	(this, ev,thisPo);
}


/* method: sompDeleteObjectFromGroup */
void   sompDeleteObjectFromGroup(Environment *ev, 
		SOMPPersistentId* objectID)
{
   SOM_ResolveD(this,SOMPBinary,SOMPIOGroupMgrAbstract,sompDeleteObjectFromGroup)
	(this, ev,objectID);
}


/* method: sompGroupExists */
boolean   sompGroupExists(Environment *ev, 
		string IOInfo)
{
   return SOM_ResolveD(this,SOMPBinary,SOMPIOGroupMgrAbstract,sompGroupExists)
	(this, ev,IOInfo);
}


/* method: sompObjectInGroup */
boolean   sompObjectInGroup(Environment *ev, 
		SOMPPersistentId* objectID)
{
   return SOM_ResolveD(this,SOMPBinary,SOMPIOGroupMgrAbstract,sompObjectInGroup)
	(this, ev,objectID);
}


/* method: sompMediaFormatOk */
boolean   sompMediaFormatOk(Environment *ev, 
		string mediaFormatName)
{
   return SOM_ResolveD(this,SOMPBinary,SOMPIOGroupMgrAbstract,sompMediaFormatOk)
	(this, ev,mediaFormatName);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,SOMPBinary,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,SOMPBinary,SOMObject,somUninit)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,SOMPBinary,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,SOMPBinary,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,SOMPBinary,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMPBinary*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,SOMPBinary,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,SOMPBinary,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,SOMPBinary,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,SOMPBinary,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMPBinary*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,SOMPBinary,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMPBinary*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,SOMPBinary,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMPBinary*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,SOMPBinary,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,SOMPBinary,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,SOMPBinary,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,SOMPBinary,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,SOMPBinary,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMPBinary,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMPBinary,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMPBinary,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   SOMPBinary_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMPBinary,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMPBinary,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   SOMPBinary_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMPBinary,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMPBinary,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,SOMPBinary,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,SOMPBinary,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   SOMPBinary_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,SOMPBinary,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,SOMPBinary,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   SOMPBinary_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMPBinary,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,SOMPBinary,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   SOMPBinary_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMPBinary,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,SOMPBinary,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   SOMPBinary_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMPBinary,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,SOMPBinary,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,SOMPBinary,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,SOMPBinary,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,SOMPBinary,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* SOMPBinary */



#endif       /* SOM_SOMPBinary_xh */

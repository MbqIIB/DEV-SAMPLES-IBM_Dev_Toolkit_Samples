
/*
 * This file was generated by the SOM Compiler.
 * FileName: clientev.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    COMPONENT_NAME: somu
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMEClientEvent_xh
#define SOM_SOMEClientEvent_xh

class SOMEClientEvent;

/*
 *  SOMEClientEvent is the class for generic client events within the Event Manager.
 *  This class should be queried for events of the following type(s):
 *       EMClientEvent
 * 
 *  An instance of this class is initialized and passed to the
 *  callback routine for all client events regardless of their clientevent type.
 */

#define SOMEClientEvent_MajorVersion 2
#define SOMEClientEvent_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMEEvent_xh
#include <event.xh>
#endif

#ifndef SOMEClientEvent_API
#define SOMEClientEvent_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the SOMEClientEvent Class */
SOMEXTERN SOMClass * SOMLINK SOMEClientEventNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMEClientEvent class object, and the methods it introduces. */
SOMEXTERN struct SOMEClientEventClassDataStructure {
	SOMClass *classObject;
	somMToken somevGetEventClientData;
	somMToken somevGetEventClientType;
	somMToken somevSetEventClientData;
	somMToken somevSetEventClientType;
} SOMDLINK SOMEClientEventClassData;
#define _SOMEClientEvent SOMEClientEventClassData.classObject

/* The API to parentMtabs for SOMEClientEvent, and the instance data it introduces. */
SOMEXTERN struct SOMEClientEventCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMEClientEventCClassData;

/*
 * -- Typedefs for SOMEClientEvent Method Procedures
 */
SOMEXTERN {
typedef void*   SOMLINK somTP_SOMEClientEvent_somevGetEventClientData(SOMEClientEvent *somSelf, Environment *ev);
typedef somTP_SOMEClientEvent_somevGetEventClientData *somTD_SOMEClientEvent_somevGetEventClientData;
typedef string   SOMLINK somTP_SOMEClientEvent_somevGetEventClientType(SOMEClientEvent *somSelf, Environment *ev);
typedef somTP_SOMEClientEvent_somevGetEventClientType *somTD_SOMEClientEvent_somevGetEventClientType;
typedef void   SOMLINK somTP_SOMEClientEvent_somevSetEventClientData(SOMEClientEvent *somSelf, Environment *ev, 
		void* clientData);
typedef somTP_SOMEClientEvent_somevSetEventClientData *somTD_SOMEClientEvent_somevSetEventClientData;
typedef void   SOMLINK somTP_SOMEClientEvent_somevSetEventClientType(SOMEClientEvent *somSelf, Environment *ev, 
		string clientType);
typedef somTP_SOMEClientEvent_somevSetEventClientType *somTD_SOMEClientEvent_somevSetEventClientType;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef unsigned long   SOMLINK somTP_SOMEClientEvent_somevGetEventTime(SOMEClientEvent *somSelf, Environment *ev);
typedef somTP_SOMEClientEvent_somevGetEventTime *somTD_SOMEClientEvent_somevGetEventTime;
typedef unsigned long   SOMLINK somTP_SOMEClientEvent_somevGetEventType(SOMEClientEvent *somSelf, Environment *ev);
typedef somTP_SOMEClientEvent_somevGetEventType *somTD_SOMEClientEvent_somevGetEventType;
typedef void   SOMLINK somTP_SOMEClientEvent_somevSetEventTime(SOMEClientEvent *somSelf, Environment *ev, 
		unsigned long time);
typedef somTP_SOMEClientEvent_somevSetEventTime *somTD_SOMEClientEvent_somevSetEventTime;
typedef void   SOMLINK somTP_SOMEClientEvent_somevSetEventType(SOMEClientEvent *somSelf, Environment *ev, 
		unsigned long type);
typedef somTP_SOMEClientEvent_somevSetEventType *somTD_SOMEClientEvent_somevSetEventType;
typedef void   SOMLINK somTP_SOMEClientEvent_somInit(SOMEClientEvent *somSelf);
typedef somTP_SOMEClientEvent_somInit *somTD_SOMEClientEvent_somInit;
typedef void   SOMLINK somTP_SOMEClientEvent_somDefaultInit(SOMEClientEvent *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_SOMEClientEvent_somDefaultInit *somTD_SOMEClientEvent_somDefaultInit;
typedef void   SOMLINK somTP_SOMEClientEvent_somDestruct(SOMEClientEvent *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_SOMEClientEvent_somDestruct *somTD_SOMEClientEvent_somDestruct;
typedef void   SOMLINK somTP_SOMEClientEvent_somDefaultCopyInit(SOMEClientEvent *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEClientEvent_somDefaultCopyInit *somTD_SOMEClientEvent_somDefaultCopyInit;
typedef SOMEClientEvent*   SOMLINK somTP_SOMEClientEvent_somDefaultAssign(SOMEClientEvent *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEClientEvent_somDefaultAssign *somTD_SOMEClientEvent_somDefaultAssign;
typedef void   SOMLINK somTP_SOMEClientEvent_somDefaultConstCopyInit(SOMEClientEvent *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEClientEvent_somDefaultConstCopyInit *somTD_SOMEClientEvent_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_SOMEClientEvent_somDefaultVCopyInit(SOMEClientEvent *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEClientEvent_somDefaultVCopyInit *somTD_SOMEClientEvent_somDefaultVCopyInit;
typedef void   SOMLINK somTP_SOMEClientEvent_somDefaultConstVCopyInit(SOMEClientEvent *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEClientEvent_somDefaultConstVCopyInit *somTD_SOMEClientEvent_somDefaultConstVCopyInit;
typedef SOMEClientEvent*   SOMLINK somTP_SOMEClientEvent_somDefaultConstAssign(SOMEClientEvent *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEClientEvent_somDefaultConstAssign *somTD_SOMEClientEvent_somDefaultConstAssign;
typedef SOMEClientEvent*   SOMLINK somTP_SOMEClientEvent_somDefaultVAssign(SOMEClientEvent *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEClientEvent_somDefaultVAssign *somTD_SOMEClientEvent_somDefaultVAssign;
typedef SOMEClientEvent*   SOMLINK somTP_SOMEClientEvent_somDefaultConstVAssign(SOMEClientEvent *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEClientEvent_somDefaultConstVAssign *somTD_SOMEClientEvent_somDefaultConstVAssign;
typedef void   SOMLINK somTP_SOMEClientEvent_somFree(SOMEClientEvent *somSelf);
typedef somTP_SOMEClientEvent_somFree *somTD_SOMEClientEvent_somFree;
typedef void   SOMLINK somTP_SOMEClientEvent_somUninit(SOMEClientEvent *somSelf);
typedef somTP_SOMEClientEvent_somUninit *somTD_SOMEClientEvent_somUninit;
typedef SOMClass*   SOMLINK somTP_SOMEClientEvent_somGetClass(SOMEClientEvent *somSelf);
typedef somTP_SOMEClientEvent_somGetClass *somTD_SOMEClientEvent_somGetClass;
typedef string   SOMLINK somTP_SOMEClientEvent_somGetClassName(SOMEClientEvent *somSelf);
typedef somTP_SOMEClientEvent_somGetClassName *somTD_SOMEClientEvent_somGetClassName;
typedef long   SOMLINK somTP_SOMEClientEvent_somGetSize(SOMEClientEvent *somSelf);
typedef somTP_SOMEClientEvent_somGetSize *somTD_SOMEClientEvent_somGetSize;
typedef boolean   SOMLINK somTP_SOMEClientEvent_somIsA(SOMEClientEvent *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMEClientEvent_somIsA *somTD_SOMEClientEvent_somIsA;
typedef boolean   SOMLINK somTP_SOMEClientEvent_somIsInstanceOf(SOMEClientEvent *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMEClientEvent_somIsInstanceOf *somTD_SOMEClientEvent_somIsInstanceOf;
typedef boolean   SOMLINK somTP_SOMEClientEvent_somRespondsTo(SOMEClientEvent *somSelf, 
		somId mId);
typedef somTP_SOMEClientEvent_somRespondsTo *somTD_SOMEClientEvent_somRespondsTo;
typedef boolean   SOMLINK somTP_SOMEClientEvent_somDispatch(SOMEClientEvent *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMEClientEvent_somDispatch *somTD_SOMEClientEvent_somDispatch;
typedef boolean   SOMLINK somTP_SOMEClientEvent_somClassDispatch(SOMEClientEvent *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMEClientEvent_somClassDispatch *somTD_SOMEClientEvent_somClassDispatch;
typedef boolean   SOMLINK somTP_SOMEClientEvent_somCastObj(SOMEClientEvent *somSelf, 
		SOMClass* cls);
typedef somTP_SOMEClientEvent_somCastObj *somTD_SOMEClientEvent_somCastObj;
typedef boolean   SOMLINK somTP_SOMEClientEvent_somResetObj(SOMEClientEvent *somSelf);
typedef somTP_SOMEClientEvent_somResetObj *somTD_SOMEClientEvent_somResetObj;
typedef void   SOMLINK somTP_SOMEClientEvent_somDispatchV(SOMEClientEvent *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMEClientEvent_somDispatchV *somTD_SOMEClientEvent_somDispatchV;
typedef long   SOMLINK somTP_SOMEClientEvent_somDispatchL(SOMEClientEvent *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMEClientEvent_somDispatchL *somTD_SOMEClientEvent_somDispatchL;
typedef void*   SOMLINK somTP_SOMEClientEvent_somDispatchA(SOMEClientEvent *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMEClientEvent_somDispatchA *somTD_SOMEClientEvent_somDispatchA;
typedef double   SOMLINK somTP_SOMEClientEvent_somDispatchD(SOMEClientEvent *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMEClientEvent_somDispatchD *somTD_SOMEClientEvent_somDispatchD;
typedef SOMObject*   SOMLINK somTP_SOMEClientEvent_somPrintSelf(SOMEClientEvent *somSelf);
typedef somTP_SOMEClientEvent_somPrintSelf *somTD_SOMEClientEvent_somPrintSelf;
typedef void   SOMLINK somTP_SOMEClientEvent_somDumpSelf(SOMEClientEvent *somSelf, 
		long level);
typedef somTP_SOMEClientEvent_somDumpSelf *somTD_SOMEClientEvent_somDumpSelf;
typedef void   SOMLINK somTP_SOMEClientEvent_somDumpSelfInt(SOMEClientEvent *somSelf, 
		long level);
typedef somTP_SOMEClientEvent_somDumpSelfInt *somTD_SOMEClientEvent_somDumpSelfInt;
}

#endif /* SOMEClientEvent_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMEClientEvent
 */
class SOMEClientEvent : public SOMEEvent
{
/*
 *  SOMEClientEvent is the class for generic client events within the Event Manager.
 *  This class should be queried for events of the following type(s):
 *       EMClientEvent
 * 
 *  An instance of this class is initialized and passed to the
 *  callback routine for all client events regardless of their clientevent type.
 */
public:

// SOMEClientEvent::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMEClientEvent) SOMEClientEventNewClass(SOMEClientEvent_MajorVersion,SOMEClientEvent_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMEClientEvent,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMEClientEvent));
}

// SOMEClientEvent::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

SOMEClientEvent& operator=(SOMEClientEvent& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

SOMEClientEvent()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEClientEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMEClientEvent(SOMEClientEvent* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEClientEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
SOMEClientEvent(const SOMEClientEvent* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEClientEventCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: somevGetEventClientData */
void*   somevGetEventClientData(Environment *ev)
{
/*
 *  Returns the client data of the generic client event
 */
   return SOM_ResolveD(this,SOMEClientEvent,SOMEClientEvent,somevGetEventClientData)
	(this, ev);
}


/* method: somevGetEventClientType */
string   somevGetEventClientType(Environment *ev)
{
/*
 *  Returns the client type of the generic client event
 */
   return SOM_ResolveD(this,SOMEClientEvent,SOMEClientEvent,somevGetEventClientType)
	(this, ev);
}


/* method: somevSetEventClientData */
void   somevSetEventClientData(Environment *ev, 
		void* clientData)
{
/*
 *  Sets the client type of the generic client event
 */
   SOM_ResolveD(this,SOMEClientEvent,SOMEClientEvent,somevSetEventClientData)
	(this, ev,clientData);
}


/* method: somevSetEventClientType */
void   somevSetEventClientType(Environment *ev, 
		string clientType)
{
   SOM_ResolveD(this,SOMEClientEvent,SOMEClientEvent,somevSetEventClientType)
	(this, ev,clientType);
}


/*
 * Reintroduce inherited methods
 */

/* method: somevGetEventTime */
unsigned long   somevGetEventTime(Environment *ev)
{
/*
 *  Returns the time of the generic event in milliseconds
 */
   return SOM_ResolveD(this,SOMEClientEvent,SOMEEvent,somevGetEventTime)
	(this, ev);
}


/* method: somevGetEventType */
unsigned long   somevGetEventType(Environment *ev)
{
/*
 *  Returns the type of generic event
 */
   return SOM_ResolveD(this,SOMEClientEvent,SOMEEvent,somevGetEventType)
	(this, ev);
}


/* method: somevSetEventTime */
void   somevSetEventTime(Environment *ev, 
		unsigned long time)
{
/*
 *  Sets the time of the generic event (time is in milliseconds)
 */
   SOM_ResolveD(this,SOMEClientEvent,SOMEEvent,somevSetEventTime)
	(this, ev,time);
}


/* method: somevSetEventType */
void   somevSetEventType(Environment *ev, 
		unsigned long type)
{
/*
 *  Sets the type of generic event
 */
   SOM_ResolveD(this,SOMEClientEvent,SOMEEvent,somevSetEventType)
	(this, ev,type);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,SOMEClientEvent,SOMObject,somInit)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMEClientEvent*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMEClientEvent*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMEClientEvent*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMEClientEvent*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,SOMEClientEvent,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,SOMEClientEvent,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   SOMEClientEvent_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   SOMEClientEvent_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMEClientEvent,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   SOMEClientEvent_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   SOMEClientEvent_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   SOMEClientEvent_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   SOMEClientEvent_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,SOMEClientEvent,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,SOMEClientEvent,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* SOMEClientEvent */



#endif       /* SOM_SOMEClientEvent_xh */

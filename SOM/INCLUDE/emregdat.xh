
/*
 * This file was generated by the SOM Compiler.
 * FileName: emregdat.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    COMPONENT_NAME: somu
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMEEMRegisterData_xh
#define SOM_SOMEEMRegisterData_xh

class SOMEEMRegisterData;

/*
 *  SOMEEMRegisterData is the class utilized for holding registration
 *  data for events types to be registered with Event Management Framework(EMan)
 */

#define SOMEEMRegisterData_MajorVersion 2
#define SOMEEMRegisterData_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef SOMEEMRegisterData_API
#define SOMEEMRegisterData_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the SOMEEMRegisterData Class */
SOMEXTERN SOMClass * SOMLINK SOMEEMRegisterDataNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMEEMRegisterData class object, and the methods it introduces. */
SOMEXTERN struct SOMEEMRegisterDataClassDataStructure {
	SOMClass *classObject;
	somMToken someClearRegData;
	somMToken someSetRegDataClientType;
	somMToken someSetRegDataEventMask;
	somMToken someSetRegDataSink;
	somMToken someSetRegDataSinkMask;
	somMToken someSetRegDataTimerCount;
	somMToken someSetRegDataTimerInterval;
} SOMDLINK SOMEEMRegisterDataClassData;
#define _SOMEEMRegisterData SOMEEMRegisterDataClassData.classObject

/* The API to parentMtabs for SOMEEMRegisterData, and the instance data it introduces. */
SOMEXTERN struct SOMEEMRegisterDataCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMEEMRegisterDataCClassData;

/*
 * -- Typedefs for SOMEEMRegisterData Method Procedures
 */
SOMEXTERN {
typedef void   SOMLINK somTP_SOMEEMRegisterData_someClearRegData(SOMEEMRegisterData *somSelf, Environment *ev);
typedef somTP_SOMEEMRegisterData_someClearRegData *somTD_SOMEEMRegisterData_someClearRegData;
typedef void   SOMLINK somTP_SOMEEMRegisterData_someSetRegDataClientType(SOMEEMRegisterData *somSelf, Environment *ev, 
		string clientType);
typedef somTP_SOMEEMRegisterData_someSetRegDataClientType *somTD_SOMEEMRegisterData_someSetRegDataClientType;
typedef void   SOMLINK somTP_SOMEEMRegisterData_someSetRegDataEventMask(SOMEEMRegisterData *somSelf, Environment *ev, 
		long eventType, 
		va_list ap);
typedef somTP_SOMEEMRegisterData_someSetRegDataEventMask *somTD_SOMEEMRegisterData_someSetRegDataEventMask;
typedef void   SOMLINK somTP_SOMEEMRegisterData_someSetRegDataSink(SOMEEMRegisterData *somSelf, Environment *ev, 
		long sink);
typedef somTP_SOMEEMRegisterData_someSetRegDataSink *somTD_SOMEEMRegisterData_someSetRegDataSink;
typedef void   SOMLINK somTP_SOMEEMRegisterData_someSetRegDataSinkMask(SOMEEMRegisterData *somSelf, Environment *ev, 
		unsigned long sinkMask);
typedef somTP_SOMEEMRegisterData_someSetRegDataSinkMask *somTD_SOMEEMRegisterData_someSetRegDataSinkMask;
typedef void   SOMLINK somTP_SOMEEMRegisterData_someSetRegDataTimerCount(SOMEEMRegisterData *somSelf, Environment *ev, 
		long count);
typedef somTP_SOMEEMRegisterData_someSetRegDataTimerCount *somTD_SOMEEMRegisterData_someSetRegDataTimerCount;
typedef void   SOMLINK somTP_SOMEEMRegisterData_someSetRegDataTimerInterval(SOMEEMRegisterData *somSelf, Environment *ev, 
		long interval);
typedef somTP_SOMEEMRegisterData_someSetRegDataTimerInterval *somTD_SOMEEMRegisterData_someSetRegDataTimerInterval;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_SOMEEMRegisterData_somDefaultInit(SOMEEMRegisterData *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_SOMEEMRegisterData_somDefaultInit *somTD_SOMEEMRegisterData_somDefaultInit;
typedef void   SOMLINK somTP_SOMEEMRegisterData_somDestruct(SOMEEMRegisterData *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_SOMEEMRegisterData_somDestruct *somTD_SOMEEMRegisterData_somDestruct;
typedef void   SOMLINK somTP_SOMEEMRegisterData_somDefaultCopyInit(SOMEEMRegisterData *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEEMRegisterData_somDefaultCopyInit *somTD_SOMEEMRegisterData_somDefaultCopyInit;
typedef SOMEEMRegisterData*   SOMLINK somTP_SOMEEMRegisterData_somDefaultAssign(SOMEEMRegisterData *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEEMRegisterData_somDefaultAssign *somTD_SOMEEMRegisterData_somDefaultAssign;
typedef void   SOMLINK somTP_SOMEEMRegisterData_somDefaultConstCopyInit(SOMEEMRegisterData *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEEMRegisterData_somDefaultConstCopyInit *somTD_SOMEEMRegisterData_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_SOMEEMRegisterData_somDefaultVCopyInit(SOMEEMRegisterData *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEEMRegisterData_somDefaultVCopyInit *somTD_SOMEEMRegisterData_somDefaultVCopyInit;
typedef void   SOMLINK somTP_SOMEEMRegisterData_somDefaultConstVCopyInit(SOMEEMRegisterData *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEEMRegisterData_somDefaultConstVCopyInit *somTD_SOMEEMRegisterData_somDefaultConstVCopyInit;
typedef SOMEEMRegisterData*   SOMLINK somTP_SOMEEMRegisterData_somDefaultConstAssign(SOMEEMRegisterData *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEEMRegisterData_somDefaultConstAssign *somTD_SOMEEMRegisterData_somDefaultConstAssign;
typedef SOMEEMRegisterData*   SOMLINK somTP_SOMEEMRegisterData_somDefaultVAssign(SOMEEMRegisterData *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEEMRegisterData_somDefaultVAssign *somTD_SOMEEMRegisterData_somDefaultVAssign;
typedef SOMEEMRegisterData*   SOMLINK somTP_SOMEEMRegisterData_somDefaultConstVAssign(SOMEEMRegisterData *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEEMRegisterData_somDefaultConstVAssign *somTD_SOMEEMRegisterData_somDefaultConstVAssign;
typedef void   SOMLINK somTP_SOMEEMRegisterData_somInit(SOMEEMRegisterData *somSelf);
typedef somTP_SOMEEMRegisterData_somInit *somTD_SOMEEMRegisterData_somInit;
typedef void   SOMLINK somTP_SOMEEMRegisterData_somFree(SOMEEMRegisterData *somSelf);
typedef somTP_SOMEEMRegisterData_somFree *somTD_SOMEEMRegisterData_somFree;
typedef void   SOMLINK somTP_SOMEEMRegisterData_somUninit(SOMEEMRegisterData *somSelf);
typedef somTP_SOMEEMRegisterData_somUninit *somTD_SOMEEMRegisterData_somUninit;
typedef SOMClass*   SOMLINK somTP_SOMEEMRegisterData_somGetClass(SOMEEMRegisterData *somSelf);
typedef somTP_SOMEEMRegisterData_somGetClass *somTD_SOMEEMRegisterData_somGetClass;
typedef string   SOMLINK somTP_SOMEEMRegisterData_somGetClassName(SOMEEMRegisterData *somSelf);
typedef somTP_SOMEEMRegisterData_somGetClassName *somTD_SOMEEMRegisterData_somGetClassName;
typedef long   SOMLINK somTP_SOMEEMRegisterData_somGetSize(SOMEEMRegisterData *somSelf);
typedef somTP_SOMEEMRegisterData_somGetSize *somTD_SOMEEMRegisterData_somGetSize;
typedef boolean   SOMLINK somTP_SOMEEMRegisterData_somIsA(SOMEEMRegisterData *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMEEMRegisterData_somIsA *somTD_SOMEEMRegisterData_somIsA;
typedef boolean   SOMLINK somTP_SOMEEMRegisterData_somIsInstanceOf(SOMEEMRegisterData *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMEEMRegisterData_somIsInstanceOf *somTD_SOMEEMRegisterData_somIsInstanceOf;
typedef boolean   SOMLINK somTP_SOMEEMRegisterData_somRespondsTo(SOMEEMRegisterData *somSelf, 
		somId mId);
typedef somTP_SOMEEMRegisterData_somRespondsTo *somTD_SOMEEMRegisterData_somRespondsTo;
typedef boolean   SOMLINK somTP_SOMEEMRegisterData_somDispatch(SOMEEMRegisterData *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMEEMRegisterData_somDispatch *somTD_SOMEEMRegisterData_somDispatch;
typedef boolean   SOMLINK somTP_SOMEEMRegisterData_somClassDispatch(SOMEEMRegisterData *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMEEMRegisterData_somClassDispatch *somTD_SOMEEMRegisterData_somClassDispatch;
typedef boolean   SOMLINK somTP_SOMEEMRegisterData_somCastObj(SOMEEMRegisterData *somSelf, 
		SOMClass* cls);
typedef somTP_SOMEEMRegisterData_somCastObj *somTD_SOMEEMRegisterData_somCastObj;
typedef boolean   SOMLINK somTP_SOMEEMRegisterData_somResetObj(SOMEEMRegisterData *somSelf);
typedef somTP_SOMEEMRegisterData_somResetObj *somTD_SOMEEMRegisterData_somResetObj;
typedef void   SOMLINK somTP_SOMEEMRegisterData_somDispatchV(SOMEEMRegisterData *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMEEMRegisterData_somDispatchV *somTD_SOMEEMRegisterData_somDispatchV;
typedef long   SOMLINK somTP_SOMEEMRegisterData_somDispatchL(SOMEEMRegisterData *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMEEMRegisterData_somDispatchL *somTD_SOMEEMRegisterData_somDispatchL;
typedef void*   SOMLINK somTP_SOMEEMRegisterData_somDispatchA(SOMEEMRegisterData *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMEEMRegisterData_somDispatchA *somTD_SOMEEMRegisterData_somDispatchA;
typedef double   SOMLINK somTP_SOMEEMRegisterData_somDispatchD(SOMEEMRegisterData *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMEEMRegisterData_somDispatchD *somTD_SOMEEMRegisterData_somDispatchD;
typedef SOMObject*   SOMLINK somTP_SOMEEMRegisterData_somPrintSelf(SOMEEMRegisterData *somSelf);
typedef somTP_SOMEEMRegisterData_somPrintSelf *somTD_SOMEEMRegisterData_somPrintSelf;
typedef void   SOMLINK somTP_SOMEEMRegisterData_somDumpSelf(SOMEEMRegisterData *somSelf, 
		long level);
typedef somTP_SOMEEMRegisterData_somDumpSelf *somTD_SOMEEMRegisterData_somDumpSelf;
typedef void   SOMLINK somTP_SOMEEMRegisterData_somDumpSelfInt(SOMEEMRegisterData *somSelf, 
		long level);
typedef somTP_SOMEEMRegisterData_somDumpSelfInt *somTD_SOMEEMRegisterData_somDumpSelfInt;
}

#endif /* SOMEEMRegisterData_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMEEMRegisterData
 */
class SOMEEMRegisterData : public SOMObject
{
/*
 *  SOMEEMRegisterData is the class utilized for holding registration
 *  data for events types to be registered with Event Management Framework(EMan)
 */
public:

// SOMEEMRegisterData::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMEEMRegisterData) SOMEEMRegisterDataNewClass(SOMEEMRegisterData_MajorVersion,SOMEEMRegisterData_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMEEMRegisterData,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMEEMRegisterData));
}

// SOMEEMRegisterData::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

SOMEEMRegisterData& operator=(SOMEEMRegisterData& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

SOMEEMRegisterData()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEEMRegisterDataCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMEEMRegisterData(SOMEEMRegisterData* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEEMRegisterDataCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
SOMEEMRegisterData(const SOMEEMRegisterData* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEEMRegisterDataCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: someClearRegData */
void   someClearRegData(Environment *ev)
{
/*
 *  Clears the registration data
 */
   SOM_ResolveD(this,SOMEEMRegisterData,SOMEEMRegisterData,someClearRegData)
	(this, ev);
}


/* method: someSetRegDataClientType */
void   someSetRegDataClientType(Environment *ev, 
		string clientType)
{
/*
 *  Sets the client event type within the registration data
 */
   SOM_ResolveD(this,SOMEEMRegisterData,SOMEEMRegisterData,someSetRegDataClientType)
	(this, ev,clientType);
}


/* va_list method: someSetRegDataEventMask */

/*
 *  Sets the generic event mask within the registration data, using NULL terminated
 *  event type list. Event types are defined in eventmsk.h
 */
/* the va_list invocation form */
void   SOMEEMRegisterData_someSetRegDataEventMask(Environment *ev, 
		long eventType, 
		va_list ap)
{   SOM_ResolveD(this,SOMEEMRegisterData,SOMEEMRegisterData,someSetRegDataEventMask)
	(this, ev,eventType,ap);
}

/* the varargs invocation form */
void   someSetRegDataEventMask(Environment *ev, 
		long eventType, 
		...)
{
/*
 *  Sets the generic event mask within the registration data, using NULL terminated
 *  event type list. Event types are defined in eventmsk.h
 */
   va_list ap;
   va_start(ap, eventType);
   SOM_ResolveD(this,SOMEEMRegisterData,SOMEEMRegisterData,someSetRegDataEventMask)
	(this, ev,eventType,ap);
   va_end(ap);
}


/* method: someSetRegDataSink */
void   someSetRegDataSink(Environment *ev, 
		long sink)
{
/*
 *  Sets the sink, or source i/o file descriptor, within the registration data
 */
   SOM_ResolveD(this,SOMEEMRegisterData,SOMEEMRegisterData,someSetRegDataSink)
	(this, ev,sink);
}


/* method: someSetRegDataSinkMask */
void   someSetRegDataSinkMask(Environment *ev, 
		unsigned long sinkMask)
{
/*
 *  Sets the sink mask within the registration data
 */
   SOM_ResolveD(this,SOMEEMRegisterData,SOMEEMRegisterData,someSetRegDataSinkMask)
	(this, ev,sinkMask);
}


/* method: someSetRegDataTimerCount */
void   someSetRegDataTimerCount(Environment *ev, 
		long count)
{
/*
 *  Sets the number of times the timer will trigger, within the registration data.
 *  The default behavior is for the timer to trigger indefinitely.
 */
   SOM_ResolveD(this,SOMEEMRegisterData,SOMEEMRegisterData,someSetRegDataTimerCount)
	(this, ev,count);
}


/* method: someSetRegDataTimerInterval */
void   someSetRegDataTimerInterval(Environment *ev, 
		long interval)
{
/*
 *  Sets the timer interval within the registration data.
 *  Interval specification is in milliseconds
 */
   SOM_ResolveD(this,SOMEEMRegisterData,SOMEEMRegisterData,someSetRegDataTimerInterval)
	(this, ev,interval);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMEEMRegisterData*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMEEMRegisterData*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMEEMRegisterData*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMEEMRegisterData*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   SOMEEMRegisterData_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   SOMEEMRegisterData_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   SOMEEMRegisterData_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   SOMEEMRegisterData_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   SOMEEMRegisterData_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   SOMEEMRegisterData_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,SOMEEMRegisterData,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* SOMEEMRegisterData */



#endif       /* SOM_SOMEEMRegisterData_xh */

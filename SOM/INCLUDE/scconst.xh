
/*
 * This file was generated by the SOM Compiler.
 * FileName: scconst.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *   COMPONENT_NAME: some
 * 
 *   ORIGINS: 27
 * 
 * 
 *    25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1994,1996
 *   All Rights Reserved
 *   Licensed Materials - Property of IBM
 *   US Government Users Restricted Rights - Use, duplication or
 *   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *  @(#) somc/sctypes.h 2.7 12/26/95 16:26:17 [7/30/96 14:46:04]
 * 
 */


#ifndef SOM_SOMTConstEntryC_xh
#define SOM_SOMTConstEntryC_xh

class SOMTConstEntryC;

#define SOMTConstEntryC_MajorVersion 2
#define SOMTConstEntryC_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMTEntryC_xh
#include <scentry.xh>
#endif

#ifndef SOMTConstEntryC_API
#define SOMTConstEntryC_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class SOMTEntryC;
class SOMTEmitC;
class SOMTMetaClassEntryC;
class SOMTAttributeEntryC;
class SOMTTypedefEntryC;
class SOMTBaseClassEntryC;
class SOMTPassthruEntryC;
class SOMTDataEntryC;
class SOMTMethodEntryC;
class SOMTClassEntryC;
class SOMTModuleEntryC;
class SOMTParameterEntryC;
class SOMTStructEntryC;
class SOMTUnionEntryC;
class SOMTEnumEntryC;
class SOMTConstEntryC;
class SOMTSequenceEntryC;
class SOMTStringEntryC;
class SOMTEnumNameEntryC;
class SOMTCommonEntryC;
class SOMTUserDefinedTypeEntryC;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the SOMTConstEntryC Class */
SOMEXTERN SOMClass * SOMLINK SOMTConstEntryCNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMTConstEntryC class object, and the methods it introduces. */
SOMEXTERN struct SOMTConstEntryCClassDataStructure {
	SOMClass *classObject;
	somMToken _get_somtConstStringVal;
	somMToken _get_somtConstNumVal;
	somMToken _get_somtConstType;
	somMToken _get_somtConstTypeObj;
	somMToken _get_somtConstVal;
	somMToken _get_somtConstNumNegVal;
	somMToken _get_somtConstIsNegative;
} SOMDLINK SOMTConstEntryCClassData;
#define _SOMTConstEntryC SOMTConstEntryCClassData.classObject

/* The API to parentMtabs for SOMTConstEntryC, and the instance data it introduces. */
SOMEXTERN struct SOMTConstEntryCCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMTConstEntryCCClassData;

/*
 * -- Typedefs for SOMTConstEntryC Method Procedures
 */
SOMEXTERN {
typedef SOMTEntryC*   SOMLINK somTP_SOMTConstEntryC__get_somtConstTypeObj(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC__get_somtConstTypeObj *somTD_SOMTConstEntryC__get_somtConstTypeObj;
typedef string   SOMLINK somTP_SOMTConstEntryC__get_somtConstType(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC__get_somtConstType *somTD_SOMTConstEntryC__get_somtConstType;
typedef string   SOMLINK somTP_SOMTConstEntryC__get_somtConstStringVal(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC__get_somtConstStringVal *somTD_SOMTConstEntryC__get_somtConstStringVal;
typedef unsigned long   SOMLINK somTP_SOMTConstEntryC__get_somtConstNumVal(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC__get_somtConstNumVal *somTD_SOMTConstEntryC__get_somtConstNumVal;
typedef long   SOMLINK somTP_SOMTConstEntryC__get_somtConstNumNegVal(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC__get_somtConstNumNegVal *somTD_SOMTConstEntryC__get_somtConstNumNegVal;
typedef boolean   SOMLINK somTP_SOMTConstEntryC__get_somtConstIsNegative(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC__get_somtConstIsNegative *somTD_SOMTConstEntryC__get_somtConstIsNegative;
typedef string   SOMLINK somTP_SOMTConstEntryC__get_somtConstVal(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC__get_somtConstVal *somTD_SOMTConstEntryC__get_somtConstVal;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef string   SOMLINK somTP_SOMTConstEntryC__get_somtEntryName(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC__get_somtEntryName *somTD_SOMTConstEntryC__get_somtEntryName;
typedef void   SOMLINK somTP_SOMTConstEntryC__set_somtEntryName(SOMTConstEntryC *somSelf, 
		string somtEntryName);
typedef somTP_SOMTConstEntryC__set_somtEntryName *somTD_SOMTConstEntryC__set_somtEntryName;
typedef SOMTTypes   SOMLINK somTP_SOMTConstEntryC__get_somtElementType(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC__get_somtElementType *somTD_SOMTConstEntryC__get_somtElementType;
typedef void   SOMLINK somTP_SOMTConstEntryC__set_somtElementType(SOMTConstEntryC *somSelf, 
		SOMTTypes somtElementType);
typedef somTP_SOMTConstEntryC__set_somtElementType *somTD_SOMTConstEntryC__set_somtElementType;
typedef string   SOMLINK somTP_SOMTConstEntryC__get_somtElementTypeName(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC__get_somtElementTypeName *somTD_SOMTConstEntryC__get_somtElementTypeName;
typedef string   SOMLINK somTP_SOMTConstEntryC__get_somtEntryComment(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC__get_somtEntryComment *somTD_SOMTConstEntryC__get_somtEntryComment;
typedef unsigned long   SOMLINK somTP_SOMTConstEntryC__get_somtSourceLineNumber(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC__get_somtSourceLineNumber *somTD_SOMTConstEntryC__get_somtSourceLineNumber;
typedef TypeCode   SOMLINK somTP_SOMTConstEntryC__get_somtTypeCode(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC__get_somtTypeCode *somTD_SOMTConstEntryC__get_somtTypeCode;
typedef boolean   SOMLINK somTP_SOMTConstEntryC__get_somtIsReference(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC__get_somtIsReference *somTD_SOMTConstEntryC__get_somtIsReference;
typedef string   SOMLINK somTP_SOMTConstEntryC__get_somtIDLScopedName(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC__get_somtIDLScopedName *somTD_SOMTConstEntryC__get_somtIDLScopedName;
typedef string   SOMLINK somTP_SOMTConstEntryC__get_somtCScopedName(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC__get_somtCScopedName *somTD_SOMTConstEntryC__get_somtCScopedName;
typedef string   SOMLINK somTP_SOMTConstEntryC_somtGetModifierValue(SOMTConstEntryC *somSelf, 
		string modifierName);
typedef somTP_SOMTConstEntryC_somtGetModifierValue *somTD_SOMTConstEntryC_somtGetModifierValue;
typedef boolean   SOMLINK somTP_SOMTConstEntryC_somtGetFirstModifier(SOMTConstEntryC *somSelf, 
		string* modifierName, 
		string* modifierValue);
typedef somTP_SOMTConstEntryC_somtGetFirstModifier *somTD_SOMTConstEntryC_somtGetFirstModifier;
typedef boolean   SOMLINK somTP_SOMTConstEntryC_somtGetNextModifier(SOMTConstEntryC *somSelf, 
		string* modifierName, 
		string* modifierValue);
typedef somTP_SOMTConstEntryC_somtGetNextModifier *somTD_SOMTConstEntryC_somtGetNextModifier;
typedef long   SOMLINK somTP_SOMTConstEntryC_somtFormatModifier(SOMTConstEntryC *somSelf, 
		string buffer, 
		string name, 
		string value);
typedef somTP_SOMTConstEntryC_somtFormatModifier *somTD_SOMTConstEntryC_somtFormatModifier;
typedef long   SOMLINK somTP_SOMTConstEntryC_somtGetModifierList(SOMTConstEntryC *somSelf, 
		string buffer);
typedef somTP_SOMTConstEntryC_somtGetModifierList *somTD_SOMTConstEntryC_somtGetModifierList;
typedef long   SOMLINK somTP_SOMTConstEntryC_somtSetSymbolsOnEntry(SOMTConstEntryC *somSelf, 
		SOMTEmitC* emitter, 
		string prefix);
typedef somTP_SOMTConstEntryC_somtSetSymbolsOnEntry *somTD_SOMTConstEntryC_somtSetSymbolsOnEntry;
typedef void   SOMLINK somTP_SOMTConstEntryC_somtSetEntryStruct(SOMTConstEntryC *somSelf, 
		Entry* es);
typedef somTP_SOMTConstEntryC_somtSetEntryStruct *somTD_SOMTConstEntryC_somtSetEntryStruct;
typedef void   SOMLINK somTP_SOMTConstEntryC_somInit(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC_somInit *somTD_SOMTConstEntryC_somInit;
typedef void   SOMLINK somTP_SOMTConstEntryC_somUninit(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC_somUninit *somTD_SOMTConstEntryC_somUninit;
typedef SOMObject*   SOMLINK somTP_SOMTConstEntryC_somPrintSelf(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC_somPrintSelf *somTD_SOMTConstEntryC_somPrintSelf;
typedef void   SOMLINK somTP_SOMTConstEntryC_somDumpSelfInt(SOMTConstEntryC *somSelf, 
		long level);
typedef somTP_SOMTConstEntryC_somDumpSelfInt *somTD_SOMTConstEntryC_somDumpSelfInt;
typedef void   SOMLINK somTP_SOMTConstEntryC_somDumpSelf(SOMTConstEntryC *somSelf, 
		long level);
typedef somTP_SOMTConstEntryC_somDumpSelf *somTD_SOMTConstEntryC_somDumpSelf;
typedef void   SOMLINK somTP_SOMTConstEntryC_somDefaultInit(SOMTConstEntryC *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_SOMTConstEntryC_somDefaultInit *somTD_SOMTConstEntryC_somDefaultInit;
typedef void   SOMLINK somTP_SOMTConstEntryC_somDestruct(SOMTConstEntryC *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_SOMTConstEntryC_somDestruct *somTD_SOMTConstEntryC_somDestruct;
typedef void   SOMLINK somTP_SOMTConstEntryC_somDefaultCopyInit(SOMTConstEntryC *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTConstEntryC_somDefaultCopyInit *somTD_SOMTConstEntryC_somDefaultCopyInit;
typedef SOMTConstEntryC*   SOMLINK somTP_SOMTConstEntryC_somDefaultAssign(SOMTConstEntryC *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTConstEntryC_somDefaultAssign *somTD_SOMTConstEntryC_somDefaultAssign;
typedef void   SOMLINK somTP_SOMTConstEntryC_somDefaultConstCopyInit(SOMTConstEntryC *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTConstEntryC_somDefaultConstCopyInit *somTD_SOMTConstEntryC_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_SOMTConstEntryC_somDefaultVCopyInit(SOMTConstEntryC *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTConstEntryC_somDefaultVCopyInit *somTD_SOMTConstEntryC_somDefaultVCopyInit;
typedef void   SOMLINK somTP_SOMTConstEntryC_somDefaultConstVCopyInit(SOMTConstEntryC *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTConstEntryC_somDefaultConstVCopyInit *somTD_SOMTConstEntryC_somDefaultConstVCopyInit;
typedef SOMTConstEntryC*   SOMLINK somTP_SOMTConstEntryC_somDefaultConstAssign(SOMTConstEntryC *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTConstEntryC_somDefaultConstAssign *somTD_SOMTConstEntryC_somDefaultConstAssign;
typedef SOMTConstEntryC*   SOMLINK somTP_SOMTConstEntryC_somDefaultVAssign(SOMTConstEntryC *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTConstEntryC_somDefaultVAssign *somTD_SOMTConstEntryC_somDefaultVAssign;
typedef SOMTConstEntryC*   SOMLINK somTP_SOMTConstEntryC_somDefaultConstVAssign(SOMTConstEntryC *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMTConstEntryC_somDefaultConstVAssign *somTD_SOMTConstEntryC_somDefaultConstVAssign;
typedef void   SOMLINK somTP_SOMTConstEntryC_somFree(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC_somFree *somTD_SOMTConstEntryC_somFree;
typedef SOMClass*   SOMLINK somTP_SOMTConstEntryC_somGetClass(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC_somGetClass *somTD_SOMTConstEntryC_somGetClass;
typedef string   SOMLINK somTP_SOMTConstEntryC_somGetClassName(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC_somGetClassName *somTD_SOMTConstEntryC_somGetClassName;
typedef long   SOMLINK somTP_SOMTConstEntryC_somGetSize(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC_somGetSize *somTD_SOMTConstEntryC_somGetSize;
typedef boolean   SOMLINK somTP_SOMTConstEntryC_somIsA(SOMTConstEntryC *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMTConstEntryC_somIsA *somTD_SOMTConstEntryC_somIsA;
typedef boolean   SOMLINK somTP_SOMTConstEntryC_somIsInstanceOf(SOMTConstEntryC *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMTConstEntryC_somIsInstanceOf *somTD_SOMTConstEntryC_somIsInstanceOf;
typedef boolean   SOMLINK somTP_SOMTConstEntryC_somRespondsTo(SOMTConstEntryC *somSelf, 
		somId mId);
typedef somTP_SOMTConstEntryC_somRespondsTo *somTD_SOMTConstEntryC_somRespondsTo;
typedef boolean   SOMLINK somTP_SOMTConstEntryC_somDispatch(SOMTConstEntryC *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMTConstEntryC_somDispatch *somTD_SOMTConstEntryC_somDispatch;
typedef boolean   SOMLINK somTP_SOMTConstEntryC_somClassDispatch(SOMTConstEntryC *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMTConstEntryC_somClassDispatch *somTD_SOMTConstEntryC_somClassDispatch;
typedef boolean   SOMLINK somTP_SOMTConstEntryC_somCastObj(SOMTConstEntryC *somSelf, 
		SOMClass* cls);
typedef somTP_SOMTConstEntryC_somCastObj *somTD_SOMTConstEntryC_somCastObj;
typedef boolean   SOMLINK somTP_SOMTConstEntryC_somResetObj(SOMTConstEntryC *somSelf);
typedef somTP_SOMTConstEntryC_somResetObj *somTD_SOMTConstEntryC_somResetObj;
typedef void   SOMLINK somTP_SOMTConstEntryC_somDispatchV(SOMTConstEntryC *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMTConstEntryC_somDispatchV *somTD_SOMTConstEntryC_somDispatchV;
typedef long   SOMLINK somTP_SOMTConstEntryC_somDispatchL(SOMTConstEntryC *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMTConstEntryC_somDispatchL *somTD_SOMTConstEntryC_somDispatchL;
typedef void*   SOMLINK somTP_SOMTConstEntryC_somDispatchA(SOMTConstEntryC *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMTConstEntryC_somDispatchA *somTD_SOMTConstEntryC_somDispatchA;
typedef double   SOMLINK somTP_SOMTConstEntryC_somDispatchD(SOMTConstEntryC *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMTConstEntryC_somDispatchD *somTD_SOMTConstEntryC_somDispatchD;
}

#endif /* SOMTConstEntryC_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMTConstEntryC
 */
class SOMTConstEntryC : public SOMTEntryC
{
public:

// SOMTConstEntryC::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMTConstEntryC) SOMTConstEntryCNewClass(SOMTConstEntryC_MajorVersion,SOMTConstEntryC_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMTConstEntryC,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMTConstEntryC));
}

// SOMTConstEntryC::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

SOMTConstEntryC& operator=(SOMTConstEntryC& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

SOMTConstEntryC()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMTConstEntryCCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMTConstEntryC(SOMTConstEntryC* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMTConstEntryCCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
SOMTConstEntryC(const SOMTConstEntryC* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMTConstEntryCCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: _get_somtConstTypeObj */
SOMTEntryC*   _get_somtConstTypeObj()
{
/*
 *  A pointer to an object representing
 *  the type of the const.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTConstEntryC,_get_somtConstTypeObj)
	(this);
}


/* method: _get_somtConstType */
string   _get_somtConstType()
{
/*
 *  The type of the constant's value.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTConstEntryC,_get_somtConstType)
	(this);
}


/* method: _get_somtConstStringVal */
string   _get_somtConstStringVal()
{
/*
 *  The string value of the constant (unevaluated).
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTConstEntryC,_get_somtConstStringVal)
	(this);
}


/* method: _get_somtConstNumVal */
unsigned long   _get_somtConstNumVal()
{
/*
 *  The number value of the constant.
 *  This attribute is not valid if the value cannot
 *  be stored in an unsigned long (string, float, double, negative).
 *  The somtConstIsNegative attribute can be used to determine
 *  if the value is negative.  The somtConstType attribute can
 *  be used to determine whether the value is a float or double.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTConstEntryC,_get_somtConstNumVal)
	(this);
}


/* method: _get_somtConstNumNegVal */
long   _get_somtConstNumNegVal()
{
/*
 *  The number value of the constant, if negative.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTConstEntryC,_get_somtConstNumNegVal)
	(this);
}


/* method: _get_somtConstIsNegative */
boolean   _get_somtConstIsNegative()
{
/*
 *  Whether the constant's value is a negative integer and
 *  must be obtained using somtConstNumNegVal rather than somtConstNumVal.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTConstEntryC,_get_somtConstIsNegative)
	(this);
}


/* method: _get_somtConstVal */
string   _get_somtConstVal()
{
/*
 *  The string value of the constant (evaluated).
 *  The "get" method for this attribute returns a string whose
 *  ownership is transferred to the caller.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTConstEntryC,_get_somtConstVal)
	(this);
}


/*
 * Reintroduce inherited methods
 */

/* method: _get_somtEntryName */
string   _get_somtEntryName()
{
/*
 *  The name associated with this entry.  Eg, the name of
 *  the data item, the class, the method, the type, etc.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,_get_somtEntryName)
	(this);
}


/* method: _set_somtEntryName */
void   _set_somtEntryName(string somtEntryName)
{
/*
 *  The name associated with this entry.  Eg, the name of
 *  the data item, the class, the method, the type, etc.
 */
   SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,_set_somtEntryName)
	(this,somtEntryName);
}


/* method: _get_somtElementType */
SOMTTypes   _get_somtElementType()
{
/*
 *  Returns the type of this entry.
 *  This is not datatype, but entry type (method, class,
 *  passthru, etc.). The value is defined by SOMTTypes.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,_get_somtElementType)
	(this);
}


/* method: _set_somtElementType */
void   _set_somtElementType(SOMTTypes somtElementType)
{
/*
 *  Returns the type of this entry.
 *  This is not datatype, but entry type (method, class,
 *  passthru, etc.). The value is defined by SOMTTypes.
 */
   SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,_set_somtElementType)
	(this,somtElementType);
}


/* method: _get_somtElementTypeName */
string   _get_somtElementTypeName()
{
/*
 *  String version of somtElementType.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,_get_somtElementTypeName)
	(this);
}


/* method: _get_somtEntryComment */
string   _get_somtEntryComment()
{
/*
 *  Returns the comment associated with this entry, or NULL is this
 *  entry has no associated comment.  Comments will have comment
 *  delimitors removed, but will retain newline characters as
 *  specified in the source file. (use smLookupComment)
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,_get_somtEntryComment)
	(this);
}


/* method: _get_somtSourceLineNumber */
unsigned long   _get_somtSourceLineNumber()
{
/*
 *  Returns the line number in the source file where this entry's
 *  syntactic form ended.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,_get_somtSourceLineNumber)
	(this);
}


/* method: _get_somtTypeCode */
TypeCode   _get_somtTypeCode()
{
/*
 *  The typecode, if appropriate, or NULL.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,_get_somtTypeCode)
	(this);
}


/* method: _get_somtIsReference */
boolean   _get_somtIsReference()
{
/*
 *  Whether the entry is just a reference to the real type (TRUE)
 *  rather than a declaration of it (FALSE).
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,_get_somtIsReference)
	(this);
}


/* method: _get_somtIDLScopedName */
string   _get_somtIDLScopedName()
{
/*
 *  The IDL scoped name of the entry (using double colon as delimiter).
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,_get_somtIDLScopedName)
	(this);
}


/* method: _get_somtCScopedName */
string   _get_somtCScopedName()
{
/*
 *  The C scoped name of the entry (using underscore as delimiter).
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,_get_somtCScopedName)
	(this);
}


/* method: somtGetModifierValue */
string   somtGetModifierValue(string modifierName)
{
/*
 *  Returns the value of the named modifier if this entry has the
 *  named modifier and NULL otherwise. Note: if the modifier is
 *  present but does not have a value then a value of <'\1'> is
 *  returned.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,somtGetModifierValue)
	(this,modifierName);
}


/* method: somtGetFirstModifier */
boolean   somtGetFirstModifier(string* modifierName, 
		string* modifierValue)
{
/*
 *  Returns the first modifier associated with this entry.  1 (true)
 *  is returned if the entry has at least one modifier and 0 (false)
 *  otherwise.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,somtGetFirstModifier)
	(this,modifierName,modifierValue);
}


/* method: somtGetNextModifier */
boolean   somtGetNextModifier(string* modifierName, 
		string* modifierValue)
{
/*
 *  Returns the next modifier (with respect to the last call to
 *  <somtGetNextModifier> or <somtGetFirstModifier>)
 *  associated with this entry.  1 (true) is returned if the entry
 *  had another modifier and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,somtGetNextModifier)
	(this,modifierName,modifierValue);
}


/* method: somtFormatModifier */
long   somtFormatModifier(string buffer, 
		string name, 
		string value)
{
/*
 *  Formats the indicated name/value pair into buffer.  Buffer must
 *  be big enough to hold all the formatted pair, no checks are made.
 *  The number of characters added to buffer are returned (not
 *  including the trailing null character).
 *  Note: value may be null
 *  You will probably never call this method, it is provided so that
 *  you can override it to control the format returned in
 *  <somtGetModifierList>.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,somtFormatModifier)
	(this,buffer,name,value);
}


/* method: somtGetModifierList */
long   somtGetModifierList(string buffer)
{
/*
 *  The modifiers for this entry are placed in <buffer> in template
 *  list form (newline separated).  Buffer must be big enough to
 *  hold all the modifiers, no checks are made. The number of
 *  modifiers is returned.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,somtGetModifierList)
	(this,buffer);
}


/* method: somtSetSymbolsOnEntry */
long   somtSetSymbolsOnEntry(SOMTEmitC* emitter, 
		string prefix)
{
/*
 *  Places a number of symbol/value pairs in <t>.  All the symbols
 *  will begin with <prefix>.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,somtSetSymbolsOnEntry)
	(this,emitter,prefix);
}


/* method: somtSetEntryStruct */
void   somtSetEntryStruct(Entry* es)
{
/*
 *  Sets the entry struct data member.
 *  Note, when overridding this method, it is important to call the
 *  parent version of the method first and then do your processing.
 */
   SOM_ResolveD(this,SOMTConstEntryC,SOMTEntryC,somtSetEntryStruct)
	(this,es);
}


/* method: somInit */
void   somInit()
{
   SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somUninit)
	(this);
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDumpSelfInt)
	(this,level);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDumpSelf)
	(this,level);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMTConstEntryC*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMTConstEntryC*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMTConstEntryC*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMTConstEntryC*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somFree)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   SOMTConstEntryC_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   SOMTConstEntryC_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   SOMTConstEntryC_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   SOMTConstEntryC_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   SOMTConstEntryC_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   SOMTConstEntryC_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,SOMTConstEntryC,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}



};   /* SOMTConstEntryC */



#endif       /* SOM_SOMTConstEntryC_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: morder.h.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emith: 2.47
 */

/*
 *    COMPONENT_NAME: somuc
 * 
 *    ORIGINS: 82, 81, 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *    Copyright © 1988-92 Apple Computer, Inc.  All rights reserved.
 * 
 * CLASS_NAME: somf_MOrderableCollectible
 * 
 * DESCRIPTION: MOrderableCollectible should be mixed into objects which
 *              might want to be ordered.
 * 
 */


#ifndef SOM_somf_MOrderableCollectible_h
#define SOM_somf_MOrderableCollectible_h


#include <som.h>

/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * Define the class name as an object type
 */
#ifndef somf_MOrderableCollectible
#define somf_MOrderableCollectible SOMObject
#endif
#include <mcollect.h>

/*
 * Start of bindings for IDL types
 */

#ifndef SOMClass
    #define SOMClass SOMObject
#endif /* SOMClass */
typedef unsigned long somf_MOrderableCollectible_EComparisonResult;
#define somf_MOrderableCollectible_kLessThan 1UL
#define somf_MOrderableCollectible_kEqual 2UL
#define somf_MOrderableCollectible_kGreaterThan 3UL
typedef
somMToken somf_MOrderableCollectible_somf_MOrderableCompareFn;
typedef
somMToken somf_MOrderableCollectible_somf_MBetterOrderableCompareFn;
typedef
somf_MOrderableCollectible** somf_MOrderableCollectible_somf_MOrderableCollectiblePtr;

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_EComparisonResult
    #ifdef EComparisonResult
        #undef EComparisonResult
        #define SOMTGD_EComparisonResult 1
    #else
        #define EComparisonResult somf_MOrderableCollectible_EComparisonResult
    #endif /* EComparisonResult */
#endif /* SOMTGD_EComparisonResult */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_somf_MOrderableCompareFn
    #ifdef somf_MOrderableCompareFn
        #undef somf_MOrderableCompareFn
        #define SOMTGD_somf_MOrderableCompareFn 1
    #else
        #define somf_MOrderableCompareFn somf_MOrderableCollectible_somf_MOrderableCompareFn
    #endif /* somf_MOrderableCompareFn */
#endif /* SOMTGD_somf_MOrderableCompareFn */
#endif /* SOM_DONT_USE_SHORT_NAMES */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_somf_MBetterOrderableCompareFn
    #ifdef somf_MBetterOrderableCompareFn
        #undef somf_MBetterOrderableCompareFn
        #define SOMTGD_somf_MBetterOrderableCompareFn 1
    #else
        #define somf_MBetterOrderableCompareFn somf_MOrderableCollectible_somf_MBetterOrderableCompareFn
    #endif /* somf_MBetterOrderableCompareFn */
#endif /* SOMTGD_somf_MBetterOrderableCompareFn */
#endif /* SOM_DONT_USE_SHORT_NAMES */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_somf_MOrderableCollectiblePtr
    #ifdef somf_MOrderableCollectiblePtr
        #undef somf_MOrderableCollectiblePtr
        #define SOMTGD_somf_MOrderableCollectiblePtr 1
    #else
        #define somf_MOrderableCollectiblePtr somf_MOrderableCollectible_somf_MOrderableCollectiblePtr
    #endif /* somf_MOrderableCollectiblePtr */
#endif /* SOMTGD_somf_MOrderableCollectiblePtr */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/*
 * Passthru lines: File: "C.h", "after"
 */


#define SOMF_CALL_ORDERABLE_COMPARE_FN(obj,token,parameter) (((somTD_somf_MOrderableCollectible_somfIsLessThan) somResolve(obj,token))(obj, ev, parameter))

#define SOMF_CALL_BETTER_ORDERABLE_COMPARE_FN(obj,token,parameter) (((somTD_somf_MOrderableCollectible_somfCompare) somResolve(obj,token))(obj, ev, parameter))


#define somf_MOrderableCollectible_MajorVersion 2
#define somf_MOrderableCollectible_MinorVersion 1

/*
 * External name shortening if required
 */
#ifdef SOM_USE_SHORT_EXTERNAL_NAMES
#define somf_MOrderableCollectibleNewClass c
#pragma linkage(c, system)
#define somf_MOrderableCollectibleClassData d
#define somf_MOrderableCollectibleCClassData x
#endif /* SOM_USE_SHORT_EXTERNAL_NAMES */
/*--------------Migration------------*/
#define somf_MOrderableCollectible_classObj somf_MOrderableCollectibleClassData.classObject
#define _somf_MOrderableCollectible somf_MOrderableCollectible_classObj

/*
 * Declare the class creation procedure
 */
SOMEXTERN SOMClass * SOMLINK somf_MOrderableCollectibleNewClass(integer4 somtmajorVersion,
		integer4 somtminorVersion);
#pragma linkage(somf_MOrderableCollectibleNewClass, system)

/*
 * Declare the class data structure
 */
SOMEXTERN struct somf_MOrderableCollectibleClassDataStructure {
	SOMClass *classObject;
	somMToken somfClone;
	somMToken somfClonePointer;
	somMToken somfHash;
	somMToken somfIsEqual;
	somMToken somfIsSame;
	somMToken somfIsNotEqual;
	somMToken somfIsGreaterThan;
	somMToken somfIsLessThan;
	somMToken somfCompare;
	somMToken somfIsGreaterThanOrEqualTo;
	somMToken somfIsLessThanOrEqualTo;
} SOMDLINK somf_MOrderableCollectibleClassData;

/*
 * Declare the C specific class data structure
 */
SOMEXTERN struct somf_MOrderableCollectibleCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} SOMDLINK somf_MOrderableCollectibleCClassData;

/*
 * New and Renew macros for somf_MOrderableCollectible
 */
#define somf_MOrderableCollectibleNew() \
   ( _somf_MOrderableCollectible ? \
	_somNew(_somf_MOrderableCollectible) \
	: ( somf_MOrderableCollectibleNewClass(\
		somf_MOrderableCollectible_MajorVersion, \
		somf_MOrderableCollectible_MinorVersion),\
	   _somNew(_somf_MOrderableCollectible)))
#define somf_MOrderableCollectibleRenew(buf) \
   ( _somf_MOrderableCollectible ? \
	_somRenew(_somf_MOrderableCollectible, buf) \
	: ( somf_MOrderableCollectibleNewClass(\
		somf_MOrderableCollectible_MajorVersion, \
		somf_MOrderableCollectible_MinorVersion),\
	   _somRenew(_somf_MOrderableCollectible, buf)))

/*
 * New Method: somfIsGreaterThan
 */
typedef boolean   SOMLINK somTP_somf_MOrderableCollectible_somfIsGreaterThan(somf_MOrderableCollectible *somSelf, Environment *ev, 
		somf_MOrderableCollectible* obj);
#pragma linkage(somTP_somf_MOrderableCollectible_somfIsGreaterThan, system)
typedef somTP_somf_MOrderableCollectible_somfIsGreaterThan *somTD_somf_MOrderableCollectible_somfIsGreaterThan;
/*
 *  Returns TRUE if obj is "greater than" this.
 */
#define somMD_somf_MOrderableCollectible_somfIsGreaterThan "::somf_MOrderableCollectible::somfIsGreaterThan"
#define somf_MOrderableCollectible_somfIsGreaterThan(somSelf,ev,obj) \
    (SOM_Resolve(somSelf, somf_MOrderableCollectible, somfIsGreaterThan) \
	(somSelf,ev,obj))
#ifndef SOMGD_somfIsGreaterThan
    #if (defined(_somfIsGreaterThan) || defined(__somfIsGreaterThan))
        #undef _somfIsGreaterThan
        #undef __somfIsGreaterThan
        #define SOMGD_somfIsGreaterThan 1
    #else
        #define _somfIsGreaterThan somf_MOrderableCollectible_somfIsGreaterThan
    #endif /* _somfIsGreaterThan */
#endif /* SOMGD_somfIsGreaterThan */

/*
 * New Method: somfIsLessThan
 */
typedef boolean   SOMLINK somTP_somf_MOrderableCollectible_somfIsLessThan(somf_MOrderableCollectible *somSelf, Environment *ev, 
		somf_MOrderableCollectible* obj);
#pragma linkage(somTP_somf_MOrderableCollectible_somfIsLessThan, system)
typedef somTP_somf_MOrderableCollectible_somfIsLessThan *somTD_somf_MOrderableCollectible_somfIsLessThan;
/*
 *  Returns TRUE if obj is "less than" this.
 */
#define somMD_somf_MOrderableCollectible_somfIsLessThan "::somf_MOrderableCollectible::somfIsLessThan"
#define somf_MOrderableCollectible_somfIsLessThan(somSelf,ev,obj) \
    (SOM_Resolve(somSelf, somf_MOrderableCollectible, somfIsLessThan) \
	(somSelf,ev,obj))
#ifndef SOMGD_somfIsLessThan
    #if (defined(_somfIsLessThan) || defined(__somfIsLessThan))
        #undef _somfIsLessThan
        #undef __somfIsLessThan
        #define SOMGD_somfIsLessThan 1
    #else
        #define _somfIsLessThan somf_MOrderableCollectible_somfIsLessThan
    #endif /* _somfIsLessThan */
#endif /* SOMGD_somfIsLessThan */

/*
 * New Method: somfCompare
 */
typedef somf_MOrderableCollectible_EComparisonResult   SOMLINK somTP_somf_MOrderableCollectible_somfCompare(somf_MOrderableCollectible *somSelf, Environment *ev, 
		somf_MOrderableCollectible* obj);
#pragma linkage(somTP_somf_MOrderableCollectible_somfCompare, system)
typedef somTP_somf_MOrderableCollectible_somfCompare *somTD_somf_MOrderableCollectible_somfCompare;
/*
 *  This method compares obj to this.
 */
#define somMD_somf_MOrderableCollectible_somfCompare "::somf_MOrderableCollectible::somfCompare"
#define somf_MOrderableCollectible_somfCompare(somSelf,ev,obj) \
    (SOM_Resolve(somSelf, somf_MOrderableCollectible, somfCompare) \
	(somSelf,ev,obj))
#ifndef SOMGD_somfCompare
    #if (defined(_somfCompare) || defined(__somfCompare))
        #undef _somfCompare
        #undef __somfCompare
        #define SOMGD_somfCompare 1
    #else
        #define _somfCompare somf_MOrderableCollectible_somfCompare
    #endif /* _somfCompare */
#endif /* SOMGD_somfCompare */

/*
 * New Method: somfIsGreaterThanOrEqualTo
 */
typedef boolean   SOMLINK somTP_somf_MOrderableCollectible_somfIsGreaterThanOrEqualTo(somf_MOrderableCollectible *somSelf, Environment *ev, 
		somf_MOrderableCollectible* obj);
#pragma linkage(somTP_somf_MOrderableCollectible_somfIsGreaterThanOrEqualTo, system)
typedef somTP_somf_MOrderableCollectible_somfIsGreaterThanOrEqualTo *somTD_somf_MOrderableCollectible_somfIsGreaterThanOrEqualTo;
/*
 *  Returns TRUE if obj is "greater than" or "equal to" this.
 */
#define somMD_somf_MOrderableCollectible_somfIsGreaterThanOrEqualTo "::somf_MOrderableCollectible::somfIsGreaterThanOrEqualTo"
#define somf_MOrderableCollectible_somfIsGreaterThanOrEqualTo(somSelf,ev,obj) \
    (SOM_Resolve(somSelf, somf_MOrderableCollectible, somfIsGreaterThanOrEqualTo) \
	(somSelf,ev,obj))
#ifndef SOMGD_somfIsGreaterThanOrEqualTo
    #if (defined(_somfIsGreaterThanOrEqualTo) || defined(__somfIsGreaterThanOrEqualTo))
        #undef _somfIsGreaterThanOrEqualTo
        #undef __somfIsGreaterThanOrEqualTo
        #define SOMGD_somfIsGreaterThanOrEqualTo 1
    #else
        #define _somfIsGreaterThanOrEqualTo somf_MOrderableCollectible_somfIsGreaterThanOrEqualTo
    #endif /* _somfIsGreaterThanOrEqualTo */
#endif /* SOMGD_somfIsGreaterThanOrEqualTo */

/*
 * New Method: somfIsLessThanOrEqualTo
 */
typedef boolean   SOMLINK somTP_somf_MOrderableCollectible_somfIsLessThanOrEqualTo(somf_MOrderableCollectible *somSelf, Environment *ev, 
		somf_MOrderableCollectible* obj);
#pragma linkage(somTP_somf_MOrderableCollectible_somfIsLessThanOrEqualTo, system)
typedef somTP_somf_MOrderableCollectible_somfIsLessThanOrEqualTo *somTD_somf_MOrderableCollectible_somfIsLessThanOrEqualTo;
/*
 *  Returns TRUE if obj is "less than" or "equal to" this.
 */
#define somMD_somf_MOrderableCollectible_somfIsLessThanOrEqualTo "::somf_MOrderableCollectible::somfIsLessThanOrEqualTo"
#define somf_MOrderableCollectible_somfIsLessThanOrEqualTo(somSelf,ev,obj) \
    (SOM_Resolve(somSelf, somf_MOrderableCollectible, somfIsLessThanOrEqualTo) \
	(somSelf,ev,obj))
#ifndef SOMGD_somfIsLessThanOrEqualTo
    #if (defined(_somfIsLessThanOrEqualTo) || defined(__somfIsLessThanOrEqualTo))
        #undef _somfIsLessThanOrEqualTo
        #undef __somfIsLessThanOrEqualTo
        #define SOMGD_somfIsLessThanOrEqualTo 1
    #else
        #define _somfIsLessThanOrEqualTo somf_MOrderableCollectible_somfIsLessThanOrEqualTo
    #endif /* _somfIsLessThanOrEqualTo */
#endif /* SOMGD_somfIsLessThanOrEqualTo */
#ifndef SOM_DONT_USE_INHERITED_MACROS
#define somf_MOrderableCollectible_somfClone somf_MCollectible_somfClone
#define somf_MOrderableCollectible_somfClonePointer somf_MCollectible_somfClonePointer
#define somf_MOrderableCollectible_somfHash somf_MCollectible_somfHash
#define somf_MOrderableCollectible_somfIsEqual somf_MCollectible_somfIsEqual
#define somf_MOrderableCollectible_somfIsSame somf_MCollectible_somfIsSame
#define somf_MOrderableCollectible_somfIsNotEqual somf_MCollectible_somfIsNotEqual
#define somf_MOrderableCollectible_somDefaultInit SOMObject_somDefaultInit
#define somf_MOrderableCollectible_somDestruct SOMObject_somDestruct
#define somf_MOrderableCollectible_somDefaultCopyInit SOMObject_somDefaultCopyInit
#define somf_MOrderableCollectible_somDefaultAssign SOMObject_somDefaultAssign
#define somf_MOrderableCollectible_somDefaultConstCopyInit SOMObject_somDefaultConstCopyInit
#define somf_MOrderableCollectible_somDefaultVCopyInit SOMObject_somDefaultVCopyInit
#define somf_MOrderableCollectible_somDefaultConstVCopyInit SOMObject_somDefaultConstVCopyInit
#define somf_MOrderableCollectible_somDefaultConstAssign SOMObject_somDefaultConstAssign
#define somf_MOrderableCollectible_somDefaultVAssign SOMObject_somDefaultVAssign
#define somf_MOrderableCollectible_somDefaultConstVAssign SOMObject_somDefaultConstVAssign
#define somf_MOrderableCollectible_somInit SOMObject_somInit
#define somf_MOrderableCollectible_somFree SOMObject_somFree
#define somf_MOrderableCollectible_somUninit SOMObject_somUninit
#define somf_MOrderableCollectible_somGetClass SOMObject_somGetClass
#define somf_MOrderableCollectible_somGetClassName SOMObject_somGetClassName
#define somf_MOrderableCollectible_somGetSize SOMObject_somGetSize
#define somf_MOrderableCollectible_somIsA SOMObject_somIsA
#define somf_MOrderableCollectible_somIsInstanceOf SOMObject_somIsInstanceOf
#define somf_MOrderableCollectible_somRespondsTo SOMObject_somRespondsTo
#define somf_MOrderableCollectible_somDispatch SOMObject_somDispatch
#define somf_MOrderableCollectible_somClassDispatch SOMObject_somClassDispatch
#define somf_MOrderableCollectible_somCastObj SOMObject_somCastObj
#define somf_MOrderableCollectible_somResetObj SOMObject_somResetObj
#define somf_MOrderableCollectible_somDispatchV SOMObject_somDispatchV
#define somf_MOrderableCollectible_somDispatchL SOMObject_somDispatchL
#define somf_MOrderableCollectible_somDispatchA SOMObject_somDispatchA
#define somf_MOrderableCollectible_somDispatchD SOMObject_somDispatchD
#define somf_MOrderableCollectible_somPrintSelf SOMObject_somPrintSelf
#define somf_MOrderableCollectible_somDumpSelf SOMObject_somDumpSelf
#define somf_MOrderableCollectible_somDumpSelfInt SOMObject_somDumpSelfInt
#endif /* SOM_DONT_USE_INHERITED_MACROS */

#endif       /* SOM_somf_MOrderableCollectible_h */

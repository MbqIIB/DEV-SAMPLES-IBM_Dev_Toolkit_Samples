
/*
 * This file was generated by the SOM Compiler.
 * FileName: orb.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    Interface for ORB pseudo-object, from CORBA document (8.1).
 */


#ifndef SOM_ORB_xh
#define SOM_ORB_xh

class ORB;

#define ORB_MajorVersion 2
#define ORB_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

/*
 * C++ metaclass def
 */
#include <snglicls.xh>

#ifndef ORB_API
#define ORB_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class Container;
class OperationDef;
class SOMDObject;
class NVList;
class Context;

/*
 * End of bindings for IDL types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */

class ORB;
SOMEXTERN ORB * SOMD_ORBObject;

#include <somdobj.xh>


/* A procedure to create the ORB Class */
class SOMMSingleInstance;
SOMEXTERN SOMMSingleInstance * SOMLINK ORBNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the ORB class object, and the methods it introduces. */
SOMEXTERN struct ORBClassDataStructure {
	SOMMSingleInstance *classObject;
	somMToken object_to_string;
	somMToken string_to_object;
	somMToken create_list;
	somMToken create_operation_list;
	somMToken get_default_context;
	somMToken object_to_binary;
	somMToken binary_to_object;
} SOMDLINK ORBClassData;
#define _ORB ORBClassData.classObject

/* The API to parentMtabs for ORB, and the instance data it introduces. */
SOMEXTERN struct ORBCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ORBCClassData;

/*
 * -- Typedefs for ORB Method Procedures
 */
SOMEXTERN {
typedef string   SOMLINK somTP_ORB_object_to_string(ORB *somSelf, Environment *ev, 
		SOMDObject* obj);
typedef somTP_ORB_object_to_string *somTD_ORB_object_to_string;
typedef SOMDObject*   SOMLINK somTP_ORB_string_to_object(ORB *somSelf, Environment *ev, 
		string str);
typedef somTP_ORB_string_to_object *somTD_ORB_string_to_object;
typedef ORBStatus   SOMLINK somTP_ORB_create_list(ORB *somSelf, Environment *ev, 
		long count, 
		NVList** new_list);
typedef somTP_ORB_create_list *somTD_ORB_create_list;
typedef ORBStatus   SOMLINK somTP_ORB_create_operation_list(ORB *somSelf, Environment *ev, 
		OperationDef* oper, 
		NVList** new_list);
typedef somTP_ORB_create_operation_list *somTD_ORB_create_operation_list;
typedef ORBStatus   SOMLINK somTP_ORB_get_default_context(ORB *somSelf, Environment *ev, 
		Context** ctx);
typedef somTP_ORB_get_default_context *somTD_ORB_get_default_context;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_ORB_somDefaultInit(ORB *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_ORB_somDefaultInit *somTD_ORB_somDefaultInit;
typedef void   SOMLINK somTP_ORB_somDestruct(ORB *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_ORB_somDestruct *somTD_ORB_somDestruct;
typedef void   SOMLINK somTP_ORB_somDefaultCopyInit(ORB *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ORB_somDefaultCopyInit *somTD_ORB_somDefaultCopyInit;
typedef ORB*   SOMLINK somTP_ORB_somDefaultAssign(ORB *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ORB_somDefaultAssign *somTD_ORB_somDefaultAssign;
typedef void   SOMLINK somTP_ORB_somDefaultConstCopyInit(ORB *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ORB_somDefaultConstCopyInit *somTD_ORB_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ORB_somDefaultVCopyInit(ORB *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ORB_somDefaultVCopyInit *somTD_ORB_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ORB_somDefaultConstVCopyInit(ORB *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ORB_somDefaultConstVCopyInit *somTD_ORB_somDefaultConstVCopyInit;
typedef ORB*   SOMLINK somTP_ORB_somDefaultConstAssign(ORB *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ORB_somDefaultConstAssign *somTD_ORB_somDefaultConstAssign;
typedef ORB*   SOMLINK somTP_ORB_somDefaultVAssign(ORB *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ORB_somDefaultVAssign *somTD_ORB_somDefaultVAssign;
typedef ORB*   SOMLINK somTP_ORB_somDefaultConstVAssign(ORB *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ORB_somDefaultConstVAssign *somTD_ORB_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ORB_somInit(ORB *somSelf);
typedef somTP_ORB_somInit *somTD_ORB_somInit;
typedef void   SOMLINK somTP_ORB_somFree(ORB *somSelf);
typedef somTP_ORB_somFree *somTD_ORB_somFree;
typedef void   SOMLINK somTP_ORB_somUninit(ORB *somSelf);
typedef somTP_ORB_somUninit *somTD_ORB_somUninit;
typedef SOMMSingleInstance*   SOMLINK somTP_ORB_somGetClass(ORB *somSelf);
typedef somTP_ORB_somGetClass *somTD_ORB_somGetClass;
typedef string   SOMLINK somTP_ORB_somGetClassName(ORB *somSelf);
typedef somTP_ORB_somGetClassName *somTD_ORB_somGetClassName;
typedef long   SOMLINK somTP_ORB_somGetSize(ORB *somSelf);
typedef somTP_ORB_somGetSize *somTD_ORB_somGetSize;
typedef boolean   SOMLINK somTP_ORB_somIsA(ORB *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ORB_somIsA *somTD_ORB_somIsA;
typedef boolean   SOMLINK somTP_ORB_somIsInstanceOf(ORB *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ORB_somIsInstanceOf *somTD_ORB_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ORB_somRespondsTo(ORB *somSelf, 
		somId mId);
typedef somTP_ORB_somRespondsTo *somTD_ORB_somRespondsTo;
typedef boolean   SOMLINK somTP_ORB_somDispatch(ORB *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ORB_somDispatch *somTD_ORB_somDispatch;
typedef boolean   SOMLINK somTP_ORB_somClassDispatch(ORB *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ORB_somClassDispatch *somTD_ORB_somClassDispatch;
typedef boolean   SOMLINK somTP_ORB_somCastObj(ORB *somSelf, 
		SOMClass* cls);
typedef somTP_ORB_somCastObj *somTD_ORB_somCastObj;
typedef boolean   SOMLINK somTP_ORB_somResetObj(ORB *somSelf);
typedef somTP_ORB_somResetObj *somTD_ORB_somResetObj;
typedef void   SOMLINK somTP_ORB_somDispatchV(ORB *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ORB_somDispatchV *somTD_ORB_somDispatchV;
typedef long   SOMLINK somTP_ORB_somDispatchL(ORB *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ORB_somDispatchL *somTD_ORB_somDispatchL;
typedef void*   SOMLINK somTP_ORB_somDispatchA(ORB *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ORB_somDispatchA *somTD_ORB_somDispatchA;
typedef double   SOMLINK somTP_ORB_somDispatchD(ORB *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ORB_somDispatchD *somTD_ORB_somDispatchD;
typedef SOMObject*   SOMLINK somTP_ORB_somPrintSelf(ORB *somSelf);
typedef somTP_ORB_somPrintSelf *somTD_ORB_somPrintSelf;
typedef void   SOMLINK somTP_ORB_somDumpSelf(ORB *somSelf, 
		long level);
typedef somTP_ORB_somDumpSelf *somTD_ORB_somDumpSelf;
typedef void   SOMLINK somTP_ORB_somDumpSelfInt(ORB *somSelf, 
		long level);
typedef somTP_ORB_somDumpSelfInt *somTD_ORB_somDumpSelfInt;
}

#endif /* ORB_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for ORB
 */
class ORB : public SOMObject
{
public:

// ORB::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ORB) ORBNewClass(ORB_MajorVersion,ORB_MinorVersion);
   return (void*)
      SOM_Resolve(_ORB,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ORB));
}

// ORB::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

ORB& operator=(ORB& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

ORB()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ORBCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ORB(ORB* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ORBCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
ORB(const ORB* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ORBCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: object_to_string */
string   object_to_string(Environment *ev, 
		SOMDObject* obj)
{
/*
 *  Converts an object reference to its external form.
 *  OWNERSHIP of allocated memory is transferred to the caller.
 *  Use ORBfree to release the allocated memory.
 */
   return SOM_ResolveD(this,ORB,ORB,object_to_string)
	(this, ev,obj);
}


/* method: string_to_object */
SOMDObject*   string_to_object(Environment *ev, 
		string str)
{
/*
 *  Converts externalized form back to an object reference.
 */
   return SOM_ResolveD(this,ORB,ORB,string_to_object)
	(this, ev,str);
}


/* method: create_list */
ORBStatus   create_list(Environment *ev, 
		long count, 
		NVList** new_list)
{
/*
 *  Creates a NamedValue list, of specified size,
 *  for use in Requests.
 *  OWNERSHIP of allocated "new_list" is transferred to the caller.
 */
   return SOM_ResolveD(this,ORB,ORB,create_list)
	(this, ev,count,new_list);
}


/* method: create_operation_list */
ORBStatus   create_operation_list(Environment *ev, 
		OperationDef* oper, 
		NVList** new_list)
{
/*
 *  Creates a NamedValue list for the specified operation,
 *  for use in Requests invoking that operation.
 *  OWNERSHIP of allocated "new_list" is transferred to the caller.
 */
   return SOM_ResolveD(this,ORB,ORB,create_operation_list)
	(this, ev,oper,new_list);
}


/* method: get_default_context */
ORBStatus   get_default_context(Environment *ev, 
		Context** ctx)
{
/*
 *  Get default context.
 *  OWNERSHIP of allocated Context object is transferred to the caller.
 */
   return SOM_ResolveD(this,ORB,ORB,get_default_context)
	(this, ev,ctx);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,ORB,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,ORB,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,ORB,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ORB*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,ORB,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,ORB,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,ORB,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,ORB,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ORB*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,ORB,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ORB*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,ORB,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ORB*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,ORB,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,ORB,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,ORB,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,ORB,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMMSingleInstance*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,ORB,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,ORB,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,ORB,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ORB,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ORB,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ORB,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   ORB_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ORB,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ORB,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   ORB_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ORB,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ORB,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,ORB,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,ORB,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   ORB_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,ORB,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,ORB,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   ORB_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ORB,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,ORB,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   ORB_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ORB,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,ORB,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   ORB_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ORB,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,ORB,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,ORB,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,ORB,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,ORB,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ORB */



#endif       /* SOM_ORB_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: pid.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    COMPONENT_NAME: somp
 * 
 *    ORIGINS: 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1994,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMPPersistentId_xh
#define SOM_SOMPPersistentId_xh

class SOMPPersistentId;

/*
 *  This is the class for a persistent ID.
 * 
 *  A persistent ID is a string of the form:
 * 
 *    IOGroupMgrClassname ':' RepositoryName ':' RepositoryOffset
 * 
 *  For the file system, an example of a persistent ID would be:
 * 
 *    "SOMPFSAIOGroupMgr:/u/otp/stuff/animals:0"
 * 
 *  where:
 * 
 *    SOMPFSAIOGroupMgr is the IO Group Mgr Class name
 * 
 *    /u/otp/stuff/animals is the Repository name (i.e. the file name)
 * 
 *    0 is the Repository offset (roughly, record number)
 */

#define SOMPPersistentId_MajorVersion 2
#define SOMPPersistentId_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMUTStringId_xh
#include <somsid.xh>
#endif

#ifndef SOMPPersistentId_API
#define SOMPPersistentId_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the SOMPPersistentId Class */
SOMEXTERN SOMClass * SOMLINK SOMPPersistentIdNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMPPersistentId class object, and the methods it introduces. */
SOMEXTERN struct SOMPPersistentIdClassDataStructure {
	SOMClass *classObject;
	somMToken sompSetIOGroupMgrClassName;
	somMToken sompGetIOGroupMgrClassName;
	somMToken sompGetIOGroupMgrClassNameLen;
	somMToken sompSetIOGroupName;
	somMToken sompGetIOGroupName;
	somMToken sompGetIOGroupNameLen;
	somMToken sompSetGroupOffset;
	somMToken sompGetGroupOffset;
	somMToken sompEqualsIOGroupName;
	somMToken sompBuildIdString;
} SOMDLINK SOMPPersistentIdClassData;
#define _SOMPPersistentId SOMPPersistentIdClassData.classObject

/* The API to parentMtabs for SOMPPersistentId, and the instance data it introduces. */
SOMEXTERN struct SOMPPersistentIdCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMPPersistentIdCClassData;

/*
 * -- Typedefs for SOMPPersistentId Method Procedures
 */
SOMEXTERN {
typedef void   SOMLINK somTP_SOMPPersistentId_sompSetIOGroupMgrClassName(SOMPPersistentId *somSelf, Environment *ev, 
		string newName);
typedef somTP_SOMPPersistentId_sompSetIOGroupMgrClassName *somTD_SOMPPersistentId_sompSetIOGroupMgrClassName;
typedef string   SOMLINK somTP_SOMPPersistentId_sompGetIOGroupMgrClassName(SOMPPersistentId *somSelf, Environment *ev, 
		string toBuffer);
typedef somTP_SOMPPersistentId_sompGetIOGroupMgrClassName *somTD_SOMPPersistentId_sompGetIOGroupMgrClassName;
typedef short   SOMLINK somTP_SOMPPersistentId_sompGetIOGroupMgrClassNameLen(SOMPPersistentId *somSelf, Environment *ev);
typedef somTP_SOMPPersistentId_sompGetIOGroupMgrClassNameLen *somTD_SOMPPersistentId_sompGetIOGroupMgrClassNameLen;
typedef void   SOMLINK somTP_SOMPPersistentId_sompSetIOGroupName(SOMPPersistentId *somSelf, Environment *ev, 
		string newName);
typedef somTP_SOMPPersistentId_sompSetIOGroupName *somTD_SOMPPersistentId_sompSetIOGroupName;
typedef string   SOMLINK somTP_SOMPPersistentId_sompGetIOGroupName(SOMPPersistentId *somSelf, Environment *ev, 
		string toBuffer);
typedef somTP_SOMPPersistentId_sompGetIOGroupName *somTD_SOMPPersistentId_sompGetIOGroupName;
typedef short   SOMLINK somTP_SOMPPersistentId_sompGetIOGroupNameLen(SOMPPersistentId *somSelf, Environment *ev);
typedef somTP_SOMPPersistentId_sompGetIOGroupNameLen *somTD_SOMPPersistentId_sompGetIOGroupNameLen;
typedef void   SOMLINK somTP_SOMPPersistentId_sompSetGroupOffset(SOMPPersistentId *somSelf, Environment *ev, 
		long offset);
typedef somTP_SOMPPersistentId_sompSetGroupOffset *somTD_SOMPPersistentId_sompSetGroupOffset;
typedef long   SOMLINK somTP_SOMPPersistentId_sompGetGroupOffset(SOMPPersistentId *somSelf, Environment *ev);
typedef somTP_SOMPPersistentId_sompGetGroupOffset *somTD_SOMPPersistentId_sompGetGroupOffset;
typedef boolean   SOMLINK somTP_SOMPPersistentId_sompEqualsIOGroupName(SOMPPersistentId *somSelf, Environment *ev, 
		SOMPPersistentId* id);
typedef somTP_SOMPPersistentId_sompEqualsIOGroupName *somTD_SOMPPersistentId_sompEqualsIOGroupName;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef long   SOMLINK somTP_SOMPPersistentId_somutSetIdString(SOMPPersistentId *somSelf, Environment *ev, 
		string IdString);
typedef somTP_SOMPPersistentId_somutSetIdString *somTD_SOMPPersistentId_somutSetIdString;
typedef string   SOMLINK somTP_SOMPPersistentId_somutGetIdString(SOMPPersistentId *somSelf, Environment *ev, 
		string toBuffer);
typedef somTP_SOMPPersistentId_somutGetIdString *somTD_SOMPPersistentId_somutGetIdString;
typedef long   SOMLINK somTP_SOMPPersistentId_somutGetIdStringLen(SOMPPersistentId *somSelf, Environment *ev);
typedef somTP_SOMPPersistentId_somutGetIdStringLen *somTD_SOMPPersistentId_somutGetIdStringLen;
typedef boolean   SOMLINK somTP_SOMPPersistentId_somutEqualsString(SOMPPersistentId *somSelf, Environment *ev, 
		string IdString);
typedef somTP_SOMPPersistentId_somutEqualsString *somTD_SOMPPersistentId_somutEqualsString;
typedef short   SOMLINK somTP_SOMPPersistentId_somutCompareString(SOMPPersistentId *somSelf, Environment *ev, 
		string IdString);
typedef somTP_SOMPPersistentId_somutCompareString *somTD_SOMPPersistentId_somutCompareString;
typedef void   SOMLINK somTP_SOMPPersistentId_somutSetIdId(SOMPPersistentId *somSelf, Environment *ev, 
		SOMUTId* otherId);
typedef somTP_SOMPPersistentId_somutSetIdId *somTD_SOMPPersistentId_somutSetIdId;
typedef boolean   SOMLINK somTP_SOMPPersistentId_somutEqualsId(SOMPPersistentId *somSelf, Environment *ev, 
		SOMUTId* otherId);
typedef somTP_SOMPPersistentId_somutEqualsId *somTD_SOMPPersistentId_somutEqualsId;
typedef short   SOMLINK somTP_SOMPPersistentId_somutCompareId(SOMPPersistentId *somSelf, Environment *ev, 
		SOMUTId* otherId);
typedef somTP_SOMPPersistentId_somutCompareId *somTD_SOMPPersistentId_somutCompareId;
typedef unsigned long   SOMLINK somTP_SOMPPersistentId_somutHashId(SOMPPersistentId *somSelf, Environment *ev);
typedef somTP_SOMPPersistentId_somutHashId *somTD_SOMPPersistentId_somutHashId;
typedef void   SOMLINK somTP_SOMPPersistentId_somDefaultInit(SOMPPersistentId *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_SOMPPersistentId_somDefaultInit *somTD_SOMPPersistentId_somDefaultInit;
typedef void   SOMLINK somTP_SOMPPersistentId_somDestruct(SOMPPersistentId *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_SOMPPersistentId_somDestruct *somTD_SOMPPersistentId_somDestruct;
typedef void   SOMLINK somTP_SOMPPersistentId_somDefaultCopyInit(SOMPPersistentId *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPPersistentId_somDefaultCopyInit *somTD_SOMPPersistentId_somDefaultCopyInit;
typedef SOMPPersistentId*   SOMLINK somTP_SOMPPersistentId_somDefaultAssign(SOMPPersistentId *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPPersistentId_somDefaultAssign *somTD_SOMPPersistentId_somDefaultAssign;
typedef void   SOMLINK somTP_SOMPPersistentId_somDefaultConstCopyInit(SOMPPersistentId *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPPersistentId_somDefaultConstCopyInit *somTD_SOMPPersistentId_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_SOMPPersistentId_somDefaultVCopyInit(SOMPPersistentId *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPPersistentId_somDefaultVCopyInit *somTD_SOMPPersistentId_somDefaultVCopyInit;
typedef void   SOMLINK somTP_SOMPPersistentId_somDefaultConstVCopyInit(SOMPPersistentId *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPPersistentId_somDefaultConstVCopyInit *somTD_SOMPPersistentId_somDefaultConstVCopyInit;
typedef SOMPPersistentId*   SOMLINK somTP_SOMPPersistentId_somDefaultConstAssign(SOMPPersistentId *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPPersistentId_somDefaultConstAssign *somTD_SOMPPersistentId_somDefaultConstAssign;
typedef SOMPPersistentId*   SOMLINK somTP_SOMPPersistentId_somDefaultVAssign(SOMPPersistentId *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPPersistentId_somDefaultVAssign *somTD_SOMPPersistentId_somDefaultVAssign;
typedef SOMPPersistentId*   SOMLINK somTP_SOMPPersistentId_somDefaultConstVAssign(SOMPPersistentId *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMPPersistentId_somDefaultConstVAssign *somTD_SOMPPersistentId_somDefaultConstVAssign;
typedef void   SOMLINK somTP_SOMPPersistentId_somInit(SOMPPersistentId *somSelf);
typedef somTP_SOMPPersistentId_somInit *somTD_SOMPPersistentId_somInit;
typedef void   SOMLINK somTP_SOMPPersistentId_somFree(SOMPPersistentId *somSelf);
typedef somTP_SOMPPersistentId_somFree *somTD_SOMPPersistentId_somFree;
typedef void   SOMLINK somTP_SOMPPersistentId_somUninit(SOMPPersistentId *somSelf);
typedef somTP_SOMPPersistentId_somUninit *somTD_SOMPPersistentId_somUninit;
typedef SOMClass*   SOMLINK somTP_SOMPPersistentId_somGetClass(SOMPPersistentId *somSelf);
typedef somTP_SOMPPersistentId_somGetClass *somTD_SOMPPersistentId_somGetClass;
typedef string   SOMLINK somTP_SOMPPersistentId_somGetClassName(SOMPPersistentId *somSelf);
typedef somTP_SOMPPersistentId_somGetClassName *somTD_SOMPPersistentId_somGetClassName;
typedef long   SOMLINK somTP_SOMPPersistentId_somGetSize(SOMPPersistentId *somSelf);
typedef somTP_SOMPPersistentId_somGetSize *somTD_SOMPPersistentId_somGetSize;
typedef boolean   SOMLINK somTP_SOMPPersistentId_somIsA(SOMPPersistentId *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMPPersistentId_somIsA *somTD_SOMPPersistentId_somIsA;
typedef boolean   SOMLINK somTP_SOMPPersistentId_somIsInstanceOf(SOMPPersistentId *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMPPersistentId_somIsInstanceOf *somTD_SOMPPersistentId_somIsInstanceOf;
typedef boolean   SOMLINK somTP_SOMPPersistentId_somRespondsTo(SOMPPersistentId *somSelf, 
		somId mId);
typedef somTP_SOMPPersistentId_somRespondsTo *somTD_SOMPPersistentId_somRespondsTo;
typedef boolean   SOMLINK somTP_SOMPPersistentId_somDispatch(SOMPPersistentId *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMPPersistentId_somDispatch *somTD_SOMPPersistentId_somDispatch;
typedef boolean   SOMLINK somTP_SOMPPersistentId_somClassDispatch(SOMPPersistentId *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMPPersistentId_somClassDispatch *somTD_SOMPPersistentId_somClassDispatch;
typedef boolean   SOMLINK somTP_SOMPPersistentId_somCastObj(SOMPPersistentId *somSelf, 
		SOMClass* cls);
typedef somTP_SOMPPersistentId_somCastObj *somTD_SOMPPersistentId_somCastObj;
typedef boolean   SOMLINK somTP_SOMPPersistentId_somResetObj(SOMPPersistentId *somSelf);
typedef somTP_SOMPPersistentId_somResetObj *somTD_SOMPPersistentId_somResetObj;
typedef void   SOMLINK somTP_SOMPPersistentId_somDispatchV(SOMPPersistentId *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPPersistentId_somDispatchV *somTD_SOMPPersistentId_somDispatchV;
typedef long   SOMLINK somTP_SOMPPersistentId_somDispatchL(SOMPPersistentId *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPPersistentId_somDispatchL *somTD_SOMPPersistentId_somDispatchL;
typedef void*   SOMLINK somTP_SOMPPersistentId_somDispatchA(SOMPPersistentId *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPPersistentId_somDispatchA *somTD_SOMPPersistentId_somDispatchA;
typedef double   SOMLINK somTP_SOMPPersistentId_somDispatchD(SOMPPersistentId *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMPPersistentId_somDispatchD *somTD_SOMPPersistentId_somDispatchD;
typedef SOMObject*   SOMLINK somTP_SOMPPersistentId_somPrintSelf(SOMPPersistentId *somSelf);
typedef somTP_SOMPPersistentId_somPrintSelf *somTD_SOMPPersistentId_somPrintSelf;
typedef void   SOMLINK somTP_SOMPPersistentId_somDumpSelf(SOMPPersistentId *somSelf, 
		long level);
typedef somTP_SOMPPersistentId_somDumpSelf *somTD_SOMPPersistentId_somDumpSelf;
typedef void   SOMLINK somTP_SOMPPersistentId_somDumpSelfInt(SOMPPersistentId *somSelf, 
		long level);
typedef somTP_SOMPPersistentId_somDumpSelfInt *somTD_SOMPPersistentId_somDumpSelfInt;
}

#endif /* SOMPPersistentId_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMPPersistentId
 */
class SOMPPersistentId : public SOMUTStringId
{
/*
 *  This is the class for a persistent ID.
 * 
 *  A persistent ID is a string of the form:
 * 
 *    IOGroupMgrClassname ':' RepositoryName ':' RepositoryOffset
 * 
 *  For the file system, an example of a persistent ID would be:
 * 
 *    "SOMPFSAIOGroupMgr:/u/otp/stuff/animals:0"
 * 
 *  where:
 * 
 *    SOMPFSAIOGroupMgr is the IO Group Mgr Class name
 * 
 *    /u/otp/stuff/animals is the Repository name (i.e. the file name)
 * 
 *    0 is the Repository offset (roughly, record number)
 */
public:

// SOMPPersistentId::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMPPersistentId) SOMPPersistentIdNewClass(SOMPPersistentId_MajorVersion,SOMPPersistentId_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMPPersistentId,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMPPersistentId));
}

// SOMPPersistentId::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

SOMPPersistentId& operator=(SOMPPersistentId& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

SOMPPersistentId()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMPPersistentIdCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMPPersistentId(SOMPPersistentId* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMPPersistentIdCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
SOMPPersistentId(const SOMPPersistentId* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMPPersistentIdCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: sompSetIOGroupMgrClassName */
void   sompSetIOGroupMgrClassName(Environment *ev, 
		string newName)
{
/*
 *  Sets the IO Group Manager Class portion of the ID.
 */
   SOM_ResolveD(this,SOMPPersistentId,SOMPPersistentId,sompSetIOGroupMgrClassName)
	(this, ev,newName);
}


/* method: sompGetIOGroupMgrClassName */
string   sompGetIOGroupMgrClassName(Environment *ev, 
		string toBuffer)
{
/*
 *  Gets the IO Group Manager Class portion of the ID.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMPPersistentId,sompGetIOGroupMgrClassName)
	(this, ev,toBuffer);
}


/* method: sompGetIOGroupMgrClassNameLen */
short   sompGetIOGroupMgrClassNameLen(Environment *ev)
{
/*
 *  Gets the length of the IO Group Manager Class portion of the ID.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMPPersistentId,sompGetIOGroupMgrClassNameLen)
	(this, ev);
}


/* method: sompSetIOGroupName */
void   sompSetIOGroupName(Environment *ev, 
		string newName)
{
/*
 *  Sets the path & file portion of the ID.
 */
   SOM_ResolveD(this,SOMPPersistentId,SOMPPersistentId,sompSetIOGroupName)
	(this, ev,newName);
}


/* method: sompGetIOGroupName */
string   sompGetIOGroupName(Environment *ev, 
		string toBuffer)
{
/*
 *  Gets the path & file portion of the ID.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMPPersistentId,sompGetIOGroupName)
	(this, ev,toBuffer);
}


/* method: sompGetIOGroupNameLen */
short   sompGetIOGroupNameLen(Environment *ev)
{
/*
 *  Gets the length of the path & file portion of the ID.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMPPersistentId,sompGetIOGroupNameLen)
	(this, ev);
}


/* method: sompSetGroupOffset */
void   sompSetGroupOffset(Environment *ev, 
		long offset)
{
/*
 *  Sets the offset portion of the ID.
 */
   SOM_ResolveD(this,SOMPPersistentId,SOMPPersistentId,sompSetGroupOffset)
	(this, ev,offset);
}


/* method: sompGetGroupOffset */
long   sompGetGroupOffset(Environment *ev)
{
/*
 *  Gets the offset portion of the ID.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMPPersistentId,sompGetGroupOffset)
	(this, ev);
}


/* method: sompEqualsIOGroupName */
boolean   sompEqualsIOGroupName(Environment *ev, 
		SOMPPersistentId* id)
{
/*
 *  Compare this object's file & path name the file & path name
 *  part of the given ID. Return TRUE if they are equivalent.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMPPersistentId,sompEqualsIOGroupName)
	(this, ev,id);
}


/*
 * Reintroduce inherited methods
 */

/* method: somutSetIdString */
long   somutSetIdString(Environment *ev, 
		string IdString)
{
/*
 *  Sets the ID to the given string.
 *  Returns nonzero error code if given IdString is not syntactically correct.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMUTStringId,somutSetIdString)
	(this, ev,IdString);
}


/* method: somutGetIdString */
string   somutGetIdString(Environment *ev, 
		string toBuffer)
{
/*
 *  Stores the ID as a string into the given buffer <toBuffer> and
 *  returns the buffer <toBuffer>.
 *  Use somutGetIdStringLen to determine appropriate <toBuffer> size.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMUTStringId,somutGetIdString)
	(this, ev,toBuffer);
}


/* method: somutGetIdStringLen */
long   somutGetIdStringLen(Environment *ev)
{
/*
 *  Returns the length of the ID string.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMUTStringId,somutGetIdStringLen)
	(this, ev);
}


/* method: somutEqualsString */
boolean   somutEqualsString(Environment *ev, 
		string IdString)
{
/*
 *  Checks to see if this object's ID is equivalent to the given string.
 *  Returns TRUE if the ID is equivalent to the string, FALSE otherwise.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMUTStringId,somutEqualsString)
	(this, ev,IdString);
}


/* method: somutCompareString */
short   somutCompareString(Environment *ev, 
		string IdString)
{
/*
 *  Performs an ordered comparison with the given string.
 *  If this ID < IdString -1 is returned.
 *  If this ID = IdString  0 is returned.
 *  If this ID > IdString  1 is returned.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMUTStringId,somutCompareString)
	(this, ev,IdString);
}


/* method: somutSetIdId */
void   somutSetIdId(Environment *ev, 
		SOMUTId* otherId)
{
   SOM_ResolveD(this,SOMPPersistentId,SOMUTId,somutSetIdId)
	(this, ev,otherId);
}


/* method: somutEqualsId */
boolean   somutEqualsId(Environment *ev, 
		SOMUTId* otherId)
{
   return SOM_ResolveD(this,SOMPPersistentId,SOMUTId,somutEqualsId)
	(this, ev,otherId);
}


/* method: somutCompareId */
short   somutCompareId(Environment *ev, 
		SOMUTId* otherId)
{
   return SOM_ResolveD(this,SOMPPersistentId,SOMUTId,somutCompareId)
	(this, ev,otherId);
}


/* method: somutHashId */
unsigned long   somutHashId(Environment *ev)
{
   return SOM_ResolveD(this,SOMPPersistentId,SOMUTId,somutHashId)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMPPersistentId*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMPPersistentId*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMPPersistentId*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMPPersistentId*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,SOMPPersistentId,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,SOMPPersistentId,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,SOMPPersistentId,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   SOMPPersistentId_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   SOMPPersistentId_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMPPersistentId,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   SOMPPersistentId_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   SOMPPersistentId_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   SOMPPersistentId_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   SOMPPersistentId_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,SOMPPersistentId,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,SOMPPersistentId,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* SOMPPersistentId */



#endif       /* SOM_SOMPPersistentId_xh */

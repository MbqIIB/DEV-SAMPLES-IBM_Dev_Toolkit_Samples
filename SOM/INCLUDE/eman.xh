
/*
 * This file was generated by the SOM Compiler.
 * FileName: eman.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    COMPONENT_NAME: somu
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMEEMan_xh
#define SOM_SOMEEMan_xh

class SOMEEMan;

/*
 *  The Event Manager class (EMan for short) is used to handle several input
 *  events. The main purpose of this class is to provide a service that can do
 *  a blocked (or timed) wait on several event sources concurrently.  Typically,
 *  in a main program,  one registers an interest in an event type with EMan and
 *  specifies a callback (a procedure or a method) to be invoked when the event
 *  of interest occurs. After all the necessary registrations are done, the main
 *  program is ended by a call to process events in EMan. This call is non-returning.
 *  Eman then waits on multiple registered sources of events. The application is then
 *  completely event driven. I.E., it does something only when an event occurs.
 *  The control returns to EMan after processing each event. Further registrations
 *  can be done inside of callback routines. So also unregistrations.
 * 
 *  AIX Specifics:
 *  On AIX this event manager supports Timer, Sink (any file, pipe,
 *  socket and Message Queue), Client and WorkProc events.
 * 
 *  OS/2 Specifics:
 *  On OS/2 this event manager supports Timer, Sink(sockets only). Client and
 *  WorkProc events.
 *  To cope with multi-threaded applications on OS/2, the event manager
 *  methods are mutually exclusive (i.e., at any time only one thread can be
 *  executing inside of EMan).
 *  If an application thread needs to stop EMan from running (i.e., achieve
 *  mutual exclusion with EMan), it can use the two methods someGetEmanSem
 *  and someReleaseEManSem to acquire and release EMan semaphore(s).
 *  On AIX, at present, since AIX does not support threads calling these two methods
 *  has no effect.
 */

#define SOMEEMan_MajorVersion 2
#define SOMEEMan_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

/*
 * C++ metaclass def
 */
#include <snglicls.xh>

#ifndef SOMEEMan_API
#define SOMEEMan_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class SOMEEvent;
class SOMEClientEvent;
class SOMEEMRegisterData;

/*
 * End of bindings for IDL types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */
extern "C" {
#include <emtypes.h>
}

/* A procedure to create the SOMEEMan Class */
class SOMMSingleInstance;
SOMEXTERN SOMMSingleInstance * SOMLINK SOMEEManNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMEEMan class object, and the methods it introduces. */
SOMEXTERN struct SOMEEManClassDataStructure {
	SOMMSingleInstance *classObject;
	somMToken someGetEManSem;
	somMToken someReleaseEManSem;
	somMToken someChangeRegData;
	somMToken someProcessEvent;
	somMToken someProcessEvents;
	somMToken someQueueEvent;
	somMToken someRegister;
	somMToken someRegisterEv;
	somMToken someRegisterProc;
	somMToken someShutdown;
	somMToken someUnRegister;
} SOMDLINK SOMEEManClassData;
#define _SOMEEMan SOMEEManClassData.classObject

/* The API to parentMtabs for SOMEEMan, and the instance data it introduces. */
SOMEXTERN struct SOMEEManCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMEEManCClassData;

/*
 * -- Typedefs for SOMEEMan Method Procedures
 */
SOMEXTERN {
typedef void   SOMLINK somTP_SOMEEMan_someGetEManSem(SOMEEMan *somSelf, Environment *ev);
typedef somTP_SOMEEMan_someGetEManSem *somTD_SOMEEMan_someGetEManSem;
typedef void   SOMLINK somTP_SOMEEMan_someReleaseEManSem(SOMEEMan *somSelf, Environment *ev);
typedef somTP_SOMEEMan_someReleaseEManSem *somTD_SOMEEMan_someReleaseEManSem;
typedef void   SOMLINK somTP_SOMEEMan_someChangeRegData(SOMEEMan *somSelf, Environment *ev, 
		long registrationId, 
		SOMEEMRegisterData* registerData);
typedef somTP_SOMEEMan_someChangeRegData *somTD_SOMEEMan_someChangeRegData;
typedef void   SOMLINK somTP_SOMEEMan_someProcessEvent(SOMEEMan *somSelf, Environment *ev, 
		unsigned long mask);
typedef somTP_SOMEEMan_someProcessEvent *somTD_SOMEEMan_someProcessEvent;
typedef void   SOMLINK somTP_SOMEEMan_someProcessEvents(SOMEEMan *somSelf, Environment *ev);
typedef somTP_SOMEEMan_someProcessEvents *somTD_SOMEEMan_someProcessEvents;
typedef void   SOMLINK somTP_SOMEEMan_someQueueEvent(SOMEEMan *somSelf, Environment *ev, 
		SOMEClientEvent* event);
typedef somTP_SOMEEMan_someQueueEvent *somTD_SOMEEMan_someQueueEvent;
typedef long   SOMLINK somTP_SOMEEMan_someRegister(SOMEEMan *somSelf, Environment *ev, 
		SOMEEMRegisterData* registerData, 
		SOMObject* targetObject, 
		string targetMethod, 
		void* targetData);
typedef somTP_SOMEEMan_someRegister *somTD_SOMEEMan_someRegister;
typedef long   SOMLINK somTP_SOMEEMan_someRegisterEv(SOMEEMan *somSelf, Environment *ev, 
		SOMEEMRegisterData* registerData, 
		SOMObject* targetObject, 
		Environment* callbackEv, 
		string targetMethod, 
		void* targetData);
typedef somTP_SOMEEMan_someRegisterEv *somTD_SOMEEMan_someRegisterEv;
typedef long   SOMLINK somTP_SOMEEMan_someRegisterProc(SOMEEMan *somSelf, Environment *ev, 
		SOMEEMRegisterData* registerData, 
		EMRegProc* targetProcedure, 
		void* targetData);
typedef somTP_SOMEEMan_someRegisterProc *somTD_SOMEEMan_someRegisterProc;
typedef void   SOMLINK somTP_SOMEEMan_someShutdown(SOMEEMan *somSelf, Environment *ev);
typedef somTP_SOMEEMan_someShutdown *somTD_SOMEEMan_someShutdown;
typedef void   SOMLINK somTP_SOMEEMan_someUnRegister(SOMEEMan *somSelf, Environment *ev, 
		long registrationId);
typedef somTP_SOMEEMan_someUnRegister *somTD_SOMEEMan_someUnRegister;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_SOMEEMan_somDefaultInit(SOMEEMan *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_SOMEEMan_somDefaultInit *somTD_SOMEEMan_somDefaultInit;
typedef void   SOMLINK somTP_SOMEEMan_somDestruct(SOMEEMan *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_SOMEEMan_somDestruct *somTD_SOMEEMan_somDestruct;
typedef void   SOMLINK somTP_SOMEEMan_somDefaultCopyInit(SOMEEMan *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEEMan_somDefaultCopyInit *somTD_SOMEEMan_somDefaultCopyInit;
typedef SOMEEMan*   SOMLINK somTP_SOMEEMan_somDefaultAssign(SOMEEMan *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEEMan_somDefaultAssign *somTD_SOMEEMan_somDefaultAssign;
typedef void   SOMLINK somTP_SOMEEMan_somDefaultConstCopyInit(SOMEEMan *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEEMan_somDefaultConstCopyInit *somTD_SOMEEMan_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_SOMEEMan_somDefaultVCopyInit(SOMEEMan *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEEMan_somDefaultVCopyInit *somTD_SOMEEMan_somDefaultVCopyInit;
typedef void   SOMLINK somTP_SOMEEMan_somDefaultConstVCopyInit(SOMEEMan *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEEMan_somDefaultConstVCopyInit *somTD_SOMEEMan_somDefaultConstVCopyInit;
typedef SOMEEMan*   SOMLINK somTP_SOMEEMan_somDefaultConstAssign(SOMEEMan *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEEMan_somDefaultConstAssign *somTD_SOMEEMan_somDefaultConstAssign;
typedef SOMEEMan*   SOMLINK somTP_SOMEEMan_somDefaultVAssign(SOMEEMan *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEEMan_somDefaultVAssign *somTD_SOMEEMan_somDefaultVAssign;
typedef SOMEEMan*   SOMLINK somTP_SOMEEMan_somDefaultConstVAssign(SOMEEMan *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMEEMan_somDefaultConstVAssign *somTD_SOMEEMan_somDefaultConstVAssign;
typedef void   SOMLINK somTP_SOMEEMan_somInit(SOMEEMan *somSelf);
typedef somTP_SOMEEMan_somInit *somTD_SOMEEMan_somInit;
typedef void   SOMLINK somTP_SOMEEMan_somFree(SOMEEMan *somSelf);
typedef somTP_SOMEEMan_somFree *somTD_SOMEEMan_somFree;
typedef void   SOMLINK somTP_SOMEEMan_somUninit(SOMEEMan *somSelf);
typedef somTP_SOMEEMan_somUninit *somTD_SOMEEMan_somUninit;
typedef SOMMSingleInstance*   SOMLINK somTP_SOMEEMan_somGetClass(SOMEEMan *somSelf);
typedef somTP_SOMEEMan_somGetClass *somTD_SOMEEMan_somGetClass;
typedef string   SOMLINK somTP_SOMEEMan_somGetClassName(SOMEEMan *somSelf);
typedef somTP_SOMEEMan_somGetClassName *somTD_SOMEEMan_somGetClassName;
typedef long   SOMLINK somTP_SOMEEMan_somGetSize(SOMEEMan *somSelf);
typedef somTP_SOMEEMan_somGetSize *somTD_SOMEEMan_somGetSize;
typedef boolean   SOMLINK somTP_SOMEEMan_somIsA(SOMEEMan *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMEEMan_somIsA *somTD_SOMEEMan_somIsA;
typedef boolean   SOMLINK somTP_SOMEEMan_somIsInstanceOf(SOMEEMan *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMEEMan_somIsInstanceOf *somTD_SOMEEMan_somIsInstanceOf;
typedef boolean   SOMLINK somTP_SOMEEMan_somRespondsTo(SOMEEMan *somSelf, 
		somId mId);
typedef somTP_SOMEEMan_somRespondsTo *somTD_SOMEEMan_somRespondsTo;
typedef boolean   SOMLINK somTP_SOMEEMan_somDispatch(SOMEEMan *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMEEMan_somDispatch *somTD_SOMEEMan_somDispatch;
typedef boolean   SOMLINK somTP_SOMEEMan_somClassDispatch(SOMEEMan *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMEEMan_somClassDispatch *somTD_SOMEEMan_somClassDispatch;
typedef boolean   SOMLINK somTP_SOMEEMan_somCastObj(SOMEEMan *somSelf, 
		SOMClass* cls);
typedef somTP_SOMEEMan_somCastObj *somTD_SOMEEMan_somCastObj;
typedef boolean   SOMLINK somTP_SOMEEMan_somResetObj(SOMEEMan *somSelf);
typedef somTP_SOMEEMan_somResetObj *somTD_SOMEEMan_somResetObj;
typedef void   SOMLINK somTP_SOMEEMan_somDispatchV(SOMEEMan *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMEEMan_somDispatchV *somTD_SOMEEMan_somDispatchV;
typedef long   SOMLINK somTP_SOMEEMan_somDispatchL(SOMEEMan *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMEEMan_somDispatchL *somTD_SOMEEMan_somDispatchL;
typedef void*   SOMLINK somTP_SOMEEMan_somDispatchA(SOMEEMan *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMEEMan_somDispatchA *somTD_SOMEEMan_somDispatchA;
typedef double   SOMLINK somTP_SOMEEMan_somDispatchD(SOMEEMan *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMEEMan_somDispatchD *somTD_SOMEEMan_somDispatchD;
typedef SOMObject*   SOMLINK somTP_SOMEEMan_somPrintSelf(SOMEEMan *somSelf);
typedef somTP_SOMEEMan_somPrintSelf *somTD_SOMEEMan_somPrintSelf;
typedef void   SOMLINK somTP_SOMEEMan_somDumpSelf(SOMEEMan *somSelf, 
		long level);
typedef somTP_SOMEEMan_somDumpSelf *somTD_SOMEEMan_somDumpSelf;
typedef void   SOMLINK somTP_SOMEEMan_somDumpSelfInt(SOMEEMan *somSelf, 
		long level);
typedef somTP_SOMEEMan_somDumpSelfInt *somTD_SOMEEMan_somDumpSelfInt;
}

#endif /* SOMEEMan_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMEEMan
 */
class SOMEEMan : public SOMObject
{
/*
 *  The Event Manager class (EMan for short) is used to handle several input
 *  events. The main purpose of this class is to provide a service that can do
 *  a blocked (or timed) wait on several event sources concurrently.  Typically,
 *  in a main program,  one registers an interest in an event type with EMan and
 *  specifies a callback (a procedure or a method) to be invoked when the event
 *  of interest occurs. After all the necessary registrations are done, the main
 *  program is ended by a call to process events in EMan. This call is non-returning.
 *  Eman then waits on multiple registered sources of events. The application is then
 *  completely event driven. I.E., it does something only when an event occurs.
 *  The control returns to EMan after processing each event. Further registrations
 *  can be done inside of callback routines. So also unregistrations.
 * 
 *  AIX Specifics:
 *  On AIX this event manager supports Timer, Sink (any file, pipe,
 *  socket and Message Queue), Client and WorkProc events.
 * 
 *  OS/2 Specifics:
 *  On OS/2 this event manager supports Timer, Sink(sockets only). Client and
 *  WorkProc events.
 *  To cope with multi-threaded applications on OS/2, the event manager
 *  methods are mutually exclusive (i.e., at any time only one thread can be
 *  executing inside of EMan).
 *  If an application thread needs to stop EMan from running (i.e., achieve
 *  mutual exclusion with EMan), it can use the two methods someGetEmanSem
 *  and someReleaseEManSem to acquire and release EMan semaphore(s).
 *  On AIX, at present, since AIX does not support threads calling these two methods
 *  has no effect.
 */
public:

// SOMEEMan::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMEEMan) SOMEEManNewClass(SOMEEMan_MajorVersion,SOMEEMan_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMEEMan,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMEEMan));
}

// SOMEEMan::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

SOMEEMan& operator=(SOMEEMan& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

SOMEEMan()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEEManCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMEEMan(SOMEEMan* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEEManCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
SOMEEMan(const SOMEEMan* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMEEManCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: someGetEManSem */
void   someGetEManSem(Environment *ev)
{
/*
 *  Gets a semaphore to achieve mutual exclusion with EMan's activity.
 *  Callers should not hold this semaphore for too long since it essentially
 *  stops EMan activity for that duration.
 */
   SOM_ResolveD(this,SOMEEMan,SOMEEMan,someGetEManSem)
	(this, ev);
}


/* method: someReleaseEManSem */
void   someReleaseEManSem(Environment *ev)
{
/*
 *  Release the semaphore obtained by someGetEManSem.
 */
   SOM_ResolveD(this,SOMEEMan,SOMEEMan,someReleaseEManSem)
	(this, ev);
}


/* method: someChangeRegData */
void   someChangeRegData(Environment *ev, 
		long registrationId, 
		SOMEEMRegisterData* registerData)
{
/*
 *  Change the registration data associated with the specified id.
 *  This id must have been returned by EMan in a previous Register call.
 */
   SOM_ResolveD(this,SOMEEMan,SOMEEMan,someChangeRegData)
	(this, ev,registrationId,registerData);
}


/* method: someProcessEvent */
void   someProcessEvent(Environment *ev, 
		unsigned long mask)
{
/*
 *  Process one event. This call is non-blocking. If there are no events to
 *  process it returns immediately. The mask specifies what events to process.
 *  The mask is formed by ORing the bit constants specified in eventmsk.h
 *  For example, to processs Timer and Sink events only one would specify
 *  the mask as:  EMProcessTimerEvent | EMProcessSinkEvent
 */
   SOM_ResolveD(this,SOMEEMan,SOMEEMan,someProcessEvent)
	(this, ev,mask);
}


/* method: someProcessEvents */
void   someProcessEvents(Environment *ev)
{
/*
 *  Process infinite events. Does not return. Loops forever waiting for events
 *  and dispatching events. The only way this can be broken is by calling
 *  someShutdown in a callback.
 */
   SOM_ResolveD(this,SOMEEMan,SOMEEMan,someProcessEvents)
	(this, ev);
}


/* method: someQueueEvent */
void   someQueueEvent(Environment *ev, 
		SOMEClientEvent* event)
{
/*
 *  Used to be: void someQueueEvent(inout SOMEClientEvent event);
 *  Enqueue the specified client event
 */
   SOM_ResolveD(this,SOMEEMan,SOMEEMan,someQueueEvent)
	(this, ev,event);
}


/* method: someRegister */
long   someRegister(Environment *ev, 
		SOMEEMRegisterData* registerData, 
		SOMObject* targetObject, 
		string targetMethod, 
		void* targetData)
{
/*
 *  Register the object/method pair with EMan given the specified 'registerData'.
 */
   return SOM_ResolveD(this,SOMEEMan,SOMEEMan,someRegister)
	(this, ev,registerData,targetObject,targetMethod,targetData);
}


/* method: someRegisterEv */
long   someRegisterEv(Environment *ev, 
		SOMEEMRegisterData* registerData, 
		SOMObject* targetObject, 
		Environment* callbackEv, 
		string targetMethod, 
		void* targetData)
{
/*
 *  Register the object/method pair together with the callback Environment parameter
 *  with EMan given the specified 'registerData'.
 */
   return SOM_ResolveD(this,SOMEEMan,SOMEEMan,someRegisterEv)
	(this, ev,registerData,targetObject,callbackEv,targetMethod,targetData);
}


/* method: someRegisterProc */
long   someRegisterProc(Environment *ev, 
		SOMEEMRegisterData* registerData, 
		EMRegProc* targetProcedure, 
		void* targetData)
{
/*
 *  Register the procedure with EMan given the specified 'registerData'.
 */
   return SOM_ResolveD(this,SOMEEMan,SOMEEMan,someRegisterProc)
	(this, ev,registerData,targetProcedure,targetData);
}


/* method: someShutdown */
void   someShutdown(Environment *ev)
{
/*
 *  Shutdown EMan event loop. (i.e., makes the someProcessEvents return!)
 */
   SOM_ResolveD(this,SOMEEMan,SOMEEMan,someShutdown)
	(this, ev);
}


/* method: someUnRegister */
void   someUnRegister(Environment *ev, 
		long registrationId)
{
/*
 *  Unregister the data associated with the specified 'registrationId' within EMan
 */
   SOM_ResolveD(this,SOMEEMan,SOMEEMan,someUnRegister)
	(this, ev,registrationId);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,SOMEEMan,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,SOMEEMan,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,SOMEEMan,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMEEMan*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,SOMEEMan,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,SOMEEMan,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,SOMEEMan,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,SOMEEMan,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMEEMan*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,SOMEEMan,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMEEMan*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,SOMEEMan,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMEEMan*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,SOMEEMan,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,SOMEEMan,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,SOMEEMan,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,SOMEEMan,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMMSingleInstance*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,SOMEEMan,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,SOMEEMan,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,SOMEEMan,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMEEMan,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMEEMan,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMEEMan,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   SOMEEMan_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMEEMan,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMEEMan,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   SOMEEMan_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMEEMan,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMEEMan,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,SOMEEMan,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,SOMEEMan,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   SOMEEMan_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,SOMEEMan,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,SOMEEMan,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   SOMEEMan_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMEEMan,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,SOMEEMan,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   SOMEEMan_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMEEMan,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,SOMEEMan,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   SOMEEMan_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMEEMan,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,SOMEEMan,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,SOMEEMan,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,SOMEEMan,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,SOMEEMan,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* SOMEEMan */



#endif       /* SOM_SOMEEMan_xh */

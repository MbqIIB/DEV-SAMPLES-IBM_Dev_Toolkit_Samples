
/*
 * This file was generated by the SOM Compiler.
 * FileName: tpq.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    COMPONENT_NAME: somuc
 * 
 *    ORIGINS: 82, 81, 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *    Copyright © 1988, 1989 Apple Computer, Inc. All rights reserved.
 * 
 * CLASS_NAME: somf_TPriorityQueue
 * 
 * DESCRIPTION: A TPriorityQueue is a subclass of TCollection which keeps
 *              the elements of the collection partially ordered based on
 *              some ordering function.  Priority Queues are often used
 *              when you must collect a set of records, then process the
 *              largest, then collect more, the process the largest, etc.
 * 
 */


#ifndef SOM_somf_TPriorityQueue_xh
#define SOM_somf_TPriorityQueue_xh

class somf_TPriorityQueue;

#define somf_TPriorityQueue_MajorVersion 2
#define somf_TPriorityQueue_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_somf_TCollection_xh
#include <tcollect.xh>
#endif

#ifndef somf_TPriorityQueue_API
#define somf_TPriorityQueue_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class somf_TIterator;
#define somf_TPriorityQueue_kInitialPriorityQueueSize 20 /* 20 */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_kInitialPriorityQueueSize
    #ifdef kInitialPriorityQueueSize
        #undef kInitialPriorityQueueSize
        #define SOMTGD_kInitialPriorityQueueSize 1
    #else
        #define kInitialPriorityQueueSize somf_TPriorityQueue_kInitialPriorityQueueSize
    #endif /* kInitialPriorityQueueSize */
#endif /* SOMTGD_kInitialPriorityQueueSize */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */

#include <morder.xh>

/* A procedure to create the somf_TPriorityQueue Class */
SOMEXTERN SOMClass * SOMLINK somf_TPriorityQueueNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the somf_TPriorityQueue class object, and the methods it introduces. */
SOMEXTERN struct somf_TPriorityQueueClassDataStructure {
	SOMClass *classObject;
	somMToken somfInsert;
	somMToken somfPop;
	somMToken somfPeek;
	somMToken somfReplace;
	somMToken somfChange;
	somMToken somfSetEqualityComparisonFunction;
	somMToken somfGetEqualityComparisonFunction;
	somMToken somfDownHeap;
	somMToken somfUpHeap;
	somMToken somfGrowHeap;
	somMToken somfMakeNewTable;
	somMToken somfCopyIn;
	somMToken somfAssign;
	somMToken somfTPriorityQueueInitF;
	somMToken somfTPriorityQueueInitP;
} SOMDLINK somf_TPriorityQueueClassData;
#define _somf_TPriorityQueue somf_TPriorityQueueClassData.classObject

/* The API to parentMtabs for somf_TPriorityQueue, and the instance data it introduces. */
SOMEXTERN struct somf_TPriorityQueueCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK somf_TPriorityQueueCClassData;

/*
 * -- Typedefs for somf_TPriorityQueue Method Procedures
 */
SOMEXTERN {
typedef somf_TPriorityQueue*   SOMLINK somTP_somf_TPriorityQueue_somfTPriorityQueueInitF(somf_TPriorityQueue *somSelf, Environment *ev, 
		somf_MOrderableCollectible_somf_MOrderableCompareFn testfn);
typedef somTP_somf_TPriorityQueue_somfTPriorityQueueInitF *somTD_somf_TPriorityQueue_somfTPriorityQueueInitF;
typedef somf_TPriorityQueue*   SOMLINK somTP_somf_TPriorityQueue_somfTPriorityQueueInitP(somf_TPriorityQueue *somSelf, Environment *ev, 
		somf_TPriorityQueue* q);
typedef somTP_somf_TPriorityQueue_somfTPriorityQueueInitP *somTD_somf_TPriorityQueue_somfTPriorityQueueInitP;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somfAssign(somf_TPriorityQueue *somSelf, Environment *ev, 
		somf_TPriorityQueue* source);
typedef somTP_somf_TPriorityQueue_somfAssign *somTD_somf_TPriorityQueue_somfAssign;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somfInsert(somf_TPriorityQueue *somSelf, Environment *ev, 
		somf_MOrderableCollectible* obj);
typedef somTP_somf_TPriorityQueue_somfInsert *somTD_somf_TPriorityQueue_somfInsert;
typedef somf_MOrderableCollectible*   SOMLINK somTP_somf_TPriorityQueue_somfPop(somf_TPriorityQueue *somSelf, Environment *ev);
typedef somTP_somf_TPriorityQueue_somfPop *somTD_somf_TPriorityQueue_somfPop;
typedef somf_MOrderableCollectible*   SOMLINK somTP_somf_TPriorityQueue_somfPeek(somf_TPriorityQueue *somSelf, Environment *ev);
typedef somTP_somf_TPriorityQueue_somfPeek *somTD_somf_TPriorityQueue_somfPeek;
typedef somf_MOrderableCollectible*   SOMLINK somTP_somf_TPriorityQueue_somfReplace(somf_TPriorityQueue *somSelf, Environment *ev, 
		somf_MOrderableCollectible* obj);
typedef somTP_somf_TPriorityQueue_somfReplace *somTD_somf_TPriorityQueue_somfReplace;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somfChange(somf_TPriorityQueue *somSelf, Environment *ev, 
		somf_MOrderableCollectible* obj);
typedef somTP_somf_TPriorityQueue_somfChange *somTD_somf_TPriorityQueue_somfChange;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somfSetEqualityComparisonFunction(somf_TPriorityQueue *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn fn);
typedef somTP_somf_TPriorityQueue_somfSetEqualityComparisonFunction *somTD_somf_TPriorityQueue_somfSetEqualityComparisonFunction;
typedef somf_MCollectible_somf_MCollectibleCompareFn   SOMLINK somTP_somf_TPriorityQueue_somfGetEqualityComparisonFunction(somf_TPriorityQueue *somSelf, Environment *ev);
typedef somTP_somf_TPriorityQueue_somfGetEqualityComparisonFunction *somTD_somf_TPriorityQueue_somfGetEqualityComparisonFunction;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef somf_MCollectible*   SOMLINK somTP_somf_TPriorityQueue_somfAdd(somf_TPriorityQueue *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_TPriorityQueue_somfAdd *somTD_somf_TPriorityQueue_somfAdd;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somfAddAll(somf_TPriorityQueue *somSelf, Environment *ev, 
		somf_TCollection* col);
typedef somTP_somf_TPriorityQueue_somfAddAll *somTD_somf_TPriorityQueue_somfAddAll;
typedef somf_MCollectible*   SOMLINK somTP_somf_TPriorityQueue_somfRemove(somf_TPriorityQueue *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_TPriorityQueue_somfRemove *somTD_somf_TPriorityQueue_somfRemove;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somfRemoveAll(somf_TPriorityQueue *somSelf, Environment *ev);
typedef somTP_somf_TPriorityQueue_somfRemoveAll *somTD_somf_TPriorityQueue_somfRemoveAll;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somfDeleteAll(somf_TPriorityQueue *somSelf, Environment *ev);
typedef somTP_somf_TPriorityQueue_somfDeleteAll *somTD_somf_TPriorityQueue_somfDeleteAll;
typedef long   SOMLINK somTP_somf_TPriorityQueue_somfCount(somf_TPriorityQueue *somSelf, Environment *ev);
typedef somTP_somf_TPriorityQueue_somfCount *somTD_somf_TPriorityQueue_somfCount;
typedef somf_MCollectible*   SOMLINK somTP_somf_TPriorityQueue_somfMember(somf_TPriorityQueue *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_TPriorityQueue_somfMember *somTD_somf_TPriorityQueue_somfMember;
typedef somf_TIterator*   SOMLINK somTP_somf_TPriorityQueue_somfCreateIterator(somf_TPriorityQueue *somSelf, Environment *ev);
typedef somTP_somf_TPriorityQueue_somfCreateIterator *somTD_somf_TPriorityQueue_somfCreateIterator;
typedef somf_MCollectible_somf_MCollectibleCompareFn   SOMLINK somTP_somf_TPriorityQueue_somfTestFunction(somf_TPriorityQueue *somSelf, Environment *ev);
typedef somTP_somf_TPriorityQueue_somfTestFunction *somTD_somf_TPriorityQueue_somfTestFunction;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somfSetTestFunction(somf_TPriorityQueue *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn);
typedef somTP_somf_TPriorityQueue_somfSetTestFunction *somTD_somf_TPriorityQueue_somfSetTestFunction;
typedef somf_TCollection*   SOMLINK somTP_somf_TPriorityQueue_somfTCollectionInit(somf_TPriorityQueue *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn);
typedef somTP_somf_TPriorityQueue_somfTCollectionInit *somTD_somf_TPriorityQueue_somfTCollectionInit;
typedef boolean   SOMLINK somTP_somf_TPriorityQueue_somfIsEqual(somf_TPriorityQueue *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_TPriorityQueue_somfIsEqual *somTD_somf_TPriorityQueue_somfIsEqual;
typedef somf_MCollectible*   SOMLINK somTP_somf_TPriorityQueue_somfClone(somf_TPriorityQueue *somSelf, Environment *ev);
typedef somTP_somf_TPriorityQueue_somfClone *somTD_somf_TPriorityQueue_somfClone;
typedef somf_MCollectible*   SOMLINK somTP_somf_TPriorityQueue_somfClonePointer(somf_TPriorityQueue *somSelf, Environment *ev, 
		somf_MCollectible* clonee);
typedef somTP_somf_TPriorityQueue_somfClonePointer *somTD_somf_TPriorityQueue_somfClonePointer;
typedef long   SOMLINK somTP_somf_TPriorityQueue_somfHash(somf_TPriorityQueue *somSelf, Environment *ev);
typedef somTP_somf_TPriorityQueue_somfHash *somTD_somf_TPriorityQueue_somfHash;
typedef boolean   SOMLINK somTP_somf_TPriorityQueue_somfIsSame(somf_TPriorityQueue *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_TPriorityQueue_somfIsSame *somTD_somf_TPriorityQueue_somfIsSame;
typedef boolean   SOMLINK somTP_somf_TPriorityQueue_somfIsNotEqual(somf_TPriorityQueue *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_TPriorityQueue_somfIsNotEqual *somTD_somf_TPriorityQueue_somfIsNotEqual;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somDefaultInit(somf_TPriorityQueue *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_somf_TPriorityQueue_somDefaultInit *somTD_somf_TPriorityQueue_somDefaultInit;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somDestruct(somf_TPriorityQueue *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_somf_TPriorityQueue_somDestruct *somTD_somf_TPriorityQueue_somDestruct;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somDefaultCopyInit(somf_TPriorityQueue *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TPriorityQueue_somDefaultCopyInit *somTD_somf_TPriorityQueue_somDefaultCopyInit;
typedef somf_TPriorityQueue*   SOMLINK somTP_somf_TPriorityQueue_somDefaultAssign(somf_TPriorityQueue *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TPriorityQueue_somDefaultAssign *somTD_somf_TPriorityQueue_somDefaultAssign;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somDefaultConstCopyInit(somf_TPriorityQueue *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TPriorityQueue_somDefaultConstCopyInit *somTD_somf_TPriorityQueue_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somDefaultVCopyInit(somf_TPriorityQueue *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TPriorityQueue_somDefaultVCopyInit *somTD_somf_TPriorityQueue_somDefaultVCopyInit;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somDefaultConstVCopyInit(somf_TPriorityQueue *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TPriorityQueue_somDefaultConstVCopyInit *somTD_somf_TPriorityQueue_somDefaultConstVCopyInit;
typedef somf_TPriorityQueue*   SOMLINK somTP_somf_TPriorityQueue_somDefaultConstAssign(somf_TPriorityQueue *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TPriorityQueue_somDefaultConstAssign *somTD_somf_TPriorityQueue_somDefaultConstAssign;
typedef somf_TPriorityQueue*   SOMLINK somTP_somf_TPriorityQueue_somDefaultVAssign(somf_TPriorityQueue *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TPriorityQueue_somDefaultVAssign *somTD_somf_TPriorityQueue_somDefaultVAssign;
typedef somf_TPriorityQueue*   SOMLINK somTP_somf_TPriorityQueue_somDefaultConstVAssign(somf_TPriorityQueue *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TPriorityQueue_somDefaultConstVAssign *somTD_somf_TPriorityQueue_somDefaultConstVAssign;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somInit(somf_TPriorityQueue *somSelf);
typedef somTP_somf_TPriorityQueue_somInit *somTD_somf_TPriorityQueue_somInit;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somFree(somf_TPriorityQueue *somSelf);
typedef somTP_somf_TPriorityQueue_somFree *somTD_somf_TPriorityQueue_somFree;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somUninit(somf_TPriorityQueue *somSelf);
typedef somTP_somf_TPriorityQueue_somUninit *somTD_somf_TPriorityQueue_somUninit;
typedef SOMClass*   SOMLINK somTP_somf_TPriorityQueue_somGetClass(somf_TPriorityQueue *somSelf);
typedef somTP_somf_TPriorityQueue_somGetClass *somTD_somf_TPriorityQueue_somGetClass;
typedef string   SOMLINK somTP_somf_TPriorityQueue_somGetClassName(somf_TPriorityQueue *somSelf);
typedef somTP_somf_TPriorityQueue_somGetClassName *somTD_somf_TPriorityQueue_somGetClassName;
typedef long   SOMLINK somTP_somf_TPriorityQueue_somGetSize(somf_TPriorityQueue *somSelf);
typedef somTP_somf_TPriorityQueue_somGetSize *somTD_somf_TPriorityQueue_somGetSize;
typedef boolean   SOMLINK somTP_somf_TPriorityQueue_somIsA(somf_TPriorityQueue *somSelf, 
		SOMClass* aClassObj);
typedef somTP_somf_TPriorityQueue_somIsA *somTD_somf_TPriorityQueue_somIsA;
typedef boolean   SOMLINK somTP_somf_TPriorityQueue_somIsInstanceOf(somf_TPriorityQueue *somSelf, 
		SOMClass* aClassObj);
typedef somTP_somf_TPriorityQueue_somIsInstanceOf *somTD_somf_TPriorityQueue_somIsInstanceOf;
typedef boolean   SOMLINK somTP_somf_TPriorityQueue_somRespondsTo(somf_TPriorityQueue *somSelf, 
		somId mId);
typedef somTP_somf_TPriorityQueue_somRespondsTo *somTD_somf_TPriorityQueue_somRespondsTo;
typedef boolean   SOMLINK somTP_somf_TPriorityQueue_somDispatch(somf_TPriorityQueue *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_somf_TPriorityQueue_somDispatch *somTD_somf_TPriorityQueue_somDispatch;
typedef boolean   SOMLINK somTP_somf_TPriorityQueue_somClassDispatch(somf_TPriorityQueue *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_somf_TPriorityQueue_somClassDispatch *somTD_somf_TPriorityQueue_somClassDispatch;
typedef boolean   SOMLINK somTP_somf_TPriorityQueue_somCastObj(somf_TPriorityQueue *somSelf, 
		SOMClass* cls);
typedef somTP_somf_TPriorityQueue_somCastObj *somTD_somf_TPriorityQueue_somCastObj;
typedef boolean   SOMLINK somTP_somf_TPriorityQueue_somResetObj(somf_TPriorityQueue *somSelf);
typedef somTP_somf_TPriorityQueue_somResetObj *somTD_somf_TPriorityQueue_somResetObj;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somDispatchV(somf_TPriorityQueue *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_TPriorityQueue_somDispatchV *somTD_somf_TPriorityQueue_somDispatchV;
typedef long   SOMLINK somTP_somf_TPriorityQueue_somDispatchL(somf_TPriorityQueue *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_TPriorityQueue_somDispatchL *somTD_somf_TPriorityQueue_somDispatchL;
typedef void*   SOMLINK somTP_somf_TPriorityQueue_somDispatchA(somf_TPriorityQueue *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_TPriorityQueue_somDispatchA *somTD_somf_TPriorityQueue_somDispatchA;
typedef double   SOMLINK somTP_somf_TPriorityQueue_somDispatchD(somf_TPriorityQueue *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_TPriorityQueue_somDispatchD *somTD_somf_TPriorityQueue_somDispatchD;
typedef SOMObject*   SOMLINK somTP_somf_TPriorityQueue_somPrintSelf(somf_TPriorityQueue *somSelf);
typedef somTP_somf_TPriorityQueue_somPrintSelf *somTD_somf_TPriorityQueue_somPrintSelf;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somDumpSelf(somf_TPriorityQueue *somSelf, 
		long level);
typedef somTP_somf_TPriorityQueue_somDumpSelf *somTD_somf_TPriorityQueue_somDumpSelf;
typedef void   SOMLINK somTP_somf_TPriorityQueue_somDumpSelfInt(somf_TPriorityQueue *somSelf, 
		long level);
typedef somTP_somf_TPriorityQueue_somDumpSelfInt *somTD_somf_TPriorityQueue_somDumpSelfInt;
}

#endif /* somf_TPriorityQueue_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for somf_TPriorityQueue
 */
class somf_TPriorityQueue : public somf_TCollection
{
public:

// somf_TPriorityQueue::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_somf_TPriorityQueue) somf_TPriorityQueueNewClass(somf_TPriorityQueue_MajorVersion,somf_TPriorityQueue_MinorVersion);
   return (void*)
      SOM_Resolve(_somf_TPriorityQueue,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_somf_TPriorityQueue));
}

// somf_TPriorityQueue::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

somf_TPriorityQueue& operator=(somf_TPriorityQueue& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

somf_TPriorityQueue()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_TPriorityQueueCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

somf_TPriorityQueue(somf_TPriorityQueue* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_TPriorityQueueCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
somf_TPriorityQueue(const somf_TPriorityQueue* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_TPriorityQueueCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: somfTPriorityQueueInitF */
somf_TPriorityQueue*   somfTPriorityQueueInitF(Environment *ev, 
		somf_MOrderableCollectible_somf_MOrderableCompareFn testfn)
{
/*
 *  Initialize a new TPriorityQueue
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_TPriorityQueue,somfTPriorityQueueInitF)
	(this, ev,testfn);
}


/* method: somfTPriorityQueueInitP */
somf_TPriorityQueue*   somfTPriorityQueueInitP(Environment *ev, 
		somf_TPriorityQueue* q)
{
/*
 *  Initialize a new TPriorityQueue
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_TPriorityQueue,somfTPriorityQueueInitP)
	(this, ev,q);
}


/* method: somfAssign */
void   somfAssign(Environment *ev, 
		somf_TPriorityQueue* source)
{
/*
 *  Assign the instance of this equal to the instance of source.
 */
   SOM_ResolveD(this,somf_TPriorityQueue,somf_TPriorityQueue,somfAssign)
	(this, ev,source);
}


/* method: somfInsert */
void   somfInsert(Environment *ev, 
		somf_MOrderableCollectible* obj)
{
/*
 *  Insert obj in this
 */
   SOM_ResolveD(this,somf_TPriorityQueue,somf_TPriorityQueue,somfInsert)
	(this, ev,obj);
}


/* method: somfPop */
somf_MOrderableCollectible*   somfPop(Environment *ev)
{
/*
 *  Remove the object with the "highest" priority from the priority queue,
 *  and return it.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_TPriorityQueue,somfPop)
	(this, ev);
}


/* method: somfPeek */
somf_MOrderableCollectible*   somfPeek(Environment *ev)
{
/*
 *  Determine the object with the "highest" priority from the TPriorityQueue,
 *  but don't remove it.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_TPriorityQueue,somfPeek)
	(this, ev);
}


/* method: somfReplace */
somf_MOrderableCollectible*   somfReplace(Environment *ev, 
		somf_MOrderableCollectible* obj)
{
/*
 *  This method removes the object with the highest priority from the
 *  TPriorityQueue, then inserts obj into the TPriorityQueue.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_TPriorityQueue,somfReplace)
	(this, ev,obj);
}


/* method: somfChange */
void   somfChange(Environment *ev, 
		somf_MOrderableCollectible* obj)
{
/*
 *  DO NOT USE THIS METHOD, it does nothing.
 */
   SOM_ResolveD(this,somf_TPriorityQueue,somf_TPriorityQueue,somfChange)
	(this, ev,obj);
}


/* method: somfSetEqualityComparisonFunction */
void   somfSetEqualityComparisonFunction(Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn fn)
{
/*
 *  Set the equality comparison function being used by the priority queue.
 */
   SOM_ResolveD(this,somf_TPriorityQueue,somf_TPriorityQueue,somfSetEqualityComparisonFunction)
	(this, ev,fn);
}


/* method: somfGetEqualityComparisonFunction */
somf_MCollectible_somf_MCollectibleCompareFn   somfGetEqualityComparisonFunction(Environment *ev)
{
/*
 *  Return the equality comparison function being used by the priority queue.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_TPriorityQueue,somfGetEqualityComparisonFunction)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: somfAdd */
somf_MCollectible*   somfAdd(Environment *ev, 
		somf_MCollectible* obj)
{
/*
 *  Add obj to this.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_TCollection,somfAdd)
	(this, ev,obj);
}


/* method: somfAddAll */
void   somfAddAll(Environment *ev, 
		somf_TCollection* col)
{
/*
 *  Add all of the objects in collection to this.  Essentially this is
 *  equivalent to getting an iterator for the collection passed in and adding
 *  each element in the collection to this.
 */
   SOM_ResolveD(this,somf_TPriorityQueue,somf_TCollection,somfAddAll)
	(this, ev,col);
}


/* method: somfRemove */
somf_MCollectible*   somfRemove(Environment *ev, 
		somf_MCollectible* obj)
{
/*
 *  Remove obj from this.  Return the object which was actually removed
 *  (which if you are using an IsEqual test function may not be the same as the
 *  object passed in only "equal")
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_TCollection,somfRemove)
	(this, ev,obj);
}


/* method: somfRemoveAll */
void   somfRemoveAll(Environment *ev)
{
/*
 *  Remove all of the objects from this.
 */
   SOM_ResolveD(this,somf_TPriorityQueue,somf_TCollection,somfRemoveAll)
	(this, ev);
}


/* method: somfDeleteAll */
void   somfDeleteAll(Environment *ev)
{
/*
 *  Remove all of the objects from this and deallocate the storage that these
 *  objects might have owned (that is, the destructor function is called
 *  for each object in the collection).
 */
   SOM_ResolveD(this,somf_TPriorityQueue,somf_TCollection,somfDeleteAll)
	(this, ev);
}


/* method: somfCount */
long   somfCount(Environment *ev)
{
/*
 *  Return the number of objects in this.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_TCollection,somfCount)
	(this, ev);
}


/* method: somfMember */
somf_MCollectible*   somfMember(Environment *ev, 
		somf_MCollectible* obj)
{
/*
 *  Each object in this is compared to obj using the function testFn.  Return the
 *  object for which testFn returned TRUE.  Return SOMF_NIL if not object was found.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_TCollection,somfMember)
	(this, ev,obj);
}


/* method: somfCreateIterator */
somf_TIterator*   somfCreateIterator(Environment *ev)
{
/*
 *  This method returns a new iterator which is suitable for use in iterating
 *  over the objects in this collection.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_TCollection,somfCreateIterator)
	(this, ev);
}


/* method: somfTestFunction */
somf_MCollectible_somf_MCollectibleCompareFn   somfTestFunction(Environment *ev)
{
/*
 *  Return the test function.  This is usually either IsSame or IsEqual.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_TCollection,somfTestFunction)
	(this, ev);
}


/* method: somfSetTestFunction */
void   somfSetTestFunction(Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn)
{
/*
 *  Set the test function.
 */
   SOM_ResolveD(this,somf_TPriorityQueue,somf_TCollection,somfSetTestFunction)
	(this, ev,testfn);
}


/* method: somfTCollectionInit */
somf_TCollection*   somfTCollectionInit(Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn)
{
/*
 *  Initialize the somf_TCollection test function to testfn.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_TCollection,somfTCollectionInit)
	(this, ev,testfn);
}


/* method: somfIsEqual */
boolean   somfIsEqual(Environment *ev, 
		somf_MCollectible* obj)
{
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_MCollectible,somfIsEqual)
	(this, ev,obj);
}


/* method: somfClone */
somf_MCollectible*   somfClone(Environment *ev)
{
/*
 *  somfClone provides a general function for creating a new instance of this.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_MCollectible,somfClone)
	(this, ev);
}


/* method: somfClonePointer */
somf_MCollectible*   somfClonePointer(Environment *ev, 
		somf_MCollectible* clonee)
{
/*
 *  somfClonePointer returns a pointer to a Clone
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_MCollectible,somfClonePointer)
	(this, ev,clonee);
}


/* method: somfHash */
long   somfHash(Environment *ev)
{
/*
 *  somfHash returns a value suitable for use as a hashing probe for this.
 *  The default function will simply return the address of the object.
 *  The default function is almost certainly not adequate if you are overriding
 *  somfIsEqual because you need to make sure that all objects that "are equal"
 *  to each other return the same hash value.  For example, a TText object would
 *  return a hash value computed using the characters in the string instead of
 *  the address of the string.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_MCollectible,somfHash)
	(this, ev);
}


/* method: somfIsSame */
boolean   somfIsSame(Environment *ev, 
		somf_MCollectible* obj)
{
/*
 *  The default function for somfIsSame is a pointer comparison
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_MCollectible,somfIsSame)
	(this, ev,obj);
}


/* method: somfIsNotEqual */
boolean   somfIsNotEqual(Environment *ev, 
		somf_MCollectible* obj)
{
/*
 *  somfIsNotEqual returns TRUE if obj is NOT isomorphic to this.  It uses
 *  somfIsEqual, so overriding somfIsEqual will handle the logic of somfIsNotEqual too.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,somf_MCollectible,somfIsNotEqual)
	(this, ev,obj);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
somf_TPriorityQueue*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
somf_TPriorityQueue*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
somf_TPriorityQueue*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
somf_TPriorityQueue*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   somf_TPriorityQueue_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   somf_TPriorityQueue_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   somf_TPriorityQueue_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   somf_TPriorityQueue_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   somf_TPriorityQueue_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   somf_TPriorityQueue_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,somf_TPriorityQueue,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* somf_TPriorityQueue */



#endif       /* SOM_somf_TPriorityQueue_xh */

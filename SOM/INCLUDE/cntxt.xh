
/*
 * This file was generated by the SOM Compiler.
 * FileName: cntxt.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *   IDL specification for CORBA Context Object.
 */


#ifndef SOM_Context_xh
#define SOM_Context_xh

class Context;

#define Context_MajorVersion 2
#define Context_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef Context_API
#define Context_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class Container;
class NVList;

/*
 * End of bindings for IDL types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */

/*
 * Context flags
 */
#define CTX_DELETE_DESCENDENTS      0x00000200
#define CTX_RESTRICT_SCOPE          0x00000400


/* A procedure to create the Context Class */
SOMEXTERN SOMClass * SOMLINK ContextNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Context class object, and the methods it introduces. */
SOMEXTERN struct ContextClassDataStructure {
	SOMClass *classObject;
	somMToken set_one_value;
	somMToken set_values;
	somMToken get_values;
	somMToken delete_values;
	somMToken create_child;
	somMToken destroy;
	somMToken _get_context_name;
	somMToken _set_context_name;
	somMToken _get_context_parent;
	somMToken _set_context_parent;
	somMToken _get_properties;
	somMToken _set_properties;
} SOMDLINK ContextClassData;
#define _Context ContextClassData.classObject

/* The API to parentMtabs for Context, and the instance data it introduces. */
SOMEXTERN struct ContextCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ContextCClassData;

/*
 * -- Typedefs for Context Method Procedures
 */
SOMEXTERN {
typedef ORBStatus   SOMLINK somTP_Context_set_one_value(Context *somSelf, Environment *ev, 
		Identifier prop_name, 
		string value);
typedef somTP_Context_set_one_value *somTD_Context_set_one_value;
typedef ORBStatus   SOMLINK somTP_Context_set_values(Context *somSelf, Environment *ev, 
		NVList* values);
typedef somTP_Context_set_values *somTD_Context_set_values;
typedef ORBStatus   SOMLINK somTP_Context_get_values(Context *somSelf, Environment *ev, 
		Identifier start_scope, 
		Flags op_flags, 
		Identifier prop_name, 
		NVList** values);
typedef somTP_Context_get_values *somTD_Context_get_values;
typedef ORBStatus   SOMLINK somTP_Context_delete_values(Context *somSelf, Environment *ev, 
		Identifier prop_name);
typedef somTP_Context_delete_values *somTD_Context_delete_values;
typedef ORBStatus   SOMLINK somTP_Context_create_child(Context *somSelf, Environment *ev, 
		Identifier ctx_name, 
		Context** child_ctx);
typedef somTP_Context_create_child *somTD_Context_create_child;
typedef ORBStatus   SOMLINK somTP_Context_destroy(Context *somSelf, Environment *ev, 
		Flags flags);
typedef somTP_Context_destroy *somTD_Context_destroy;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_Context_somDefaultInit(Context *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_Context_somDefaultInit *somTD_Context_somDefaultInit;
typedef void   SOMLINK somTP_Context_somDestruct(Context *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_Context_somDestruct *somTD_Context_somDestruct;
typedef void   SOMLINK somTP_Context_somDefaultCopyInit(Context *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Context_somDefaultCopyInit *somTD_Context_somDefaultCopyInit;
typedef Context*   SOMLINK somTP_Context_somDefaultAssign(Context *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Context_somDefaultAssign *somTD_Context_somDefaultAssign;
typedef void   SOMLINK somTP_Context_somDefaultConstCopyInit(Context *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Context_somDefaultConstCopyInit *somTD_Context_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_Context_somDefaultVCopyInit(Context *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Context_somDefaultVCopyInit *somTD_Context_somDefaultVCopyInit;
typedef void   SOMLINK somTP_Context_somDefaultConstVCopyInit(Context *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Context_somDefaultConstVCopyInit *somTD_Context_somDefaultConstVCopyInit;
typedef Context*   SOMLINK somTP_Context_somDefaultConstAssign(Context *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Context_somDefaultConstAssign *somTD_Context_somDefaultConstAssign;
typedef Context*   SOMLINK somTP_Context_somDefaultVAssign(Context *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Context_somDefaultVAssign *somTD_Context_somDefaultVAssign;
typedef Context*   SOMLINK somTP_Context_somDefaultConstVAssign(Context *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Context_somDefaultConstVAssign *somTD_Context_somDefaultConstVAssign;
typedef void   SOMLINK somTP_Context_somInit(Context *somSelf);
typedef somTP_Context_somInit *somTD_Context_somInit;
typedef void   SOMLINK somTP_Context_somFree(Context *somSelf);
typedef somTP_Context_somFree *somTD_Context_somFree;
typedef void   SOMLINK somTP_Context_somUninit(Context *somSelf);
typedef somTP_Context_somUninit *somTD_Context_somUninit;
typedef SOMClass*   SOMLINK somTP_Context_somGetClass(Context *somSelf);
typedef somTP_Context_somGetClass *somTD_Context_somGetClass;
typedef string   SOMLINK somTP_Context_somGetClassName(Context *somSelf);
typedef somTP_Context_somGetClassName *somTD_Context_somGetClassName;
typedef long   SOMLINK somTP_Context_somGetSize(Context *somSelf);
typedef somTP_Context_somGetSize *somTD_Context_somGetSize;
typedef boolean   SOMLINK somTP_Context_somIsA(Context *somSelf, 
		SOMClass* aClassObj);
typedef somTP_Context_somIsA *somTD_Context_somIsA;
typedef boolean   SOMLINK somTP_Context_somIsInstanceOf(Context *somSelf, 
		SOMClass* aClassObj);
typedef somTP_Context_somIsInstanceOf *somTD_Context_somIsInstanceOf;
typedef boolean   SOMLINK somTP_Context_somRespondsTo(Context *somSelf, 
		somId mId);
typedef somTP_Context_somRespondsTo *somTD_Context_somRespondsTo;
typedef boolean   SOMLINK somTP_Context_somDispatch(Context *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_Context_somDispatch *somTD_Context_somDispatch;
typedef boolean   SOMLINK somTP_Context_somClassDispatch(Context *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_Context_somClassDispatch *somTD_Context_somClassDispatch;
typedef boolean   SOMLINK somTP_Context_somCastObj(Context *somSelf, 
		SOMClass* cls);
typedef somTP_Context_somCastObj *somTD_Context_somCastObj;
typedef boolean   SOMLINK somTP_Context_somResetObj(Context *somSelf);
typedef somTP_Context_somResetObj *somTD_Context_somResetObj;
typedef void   SOMLINK somTP_Context_somDispatchV(Context *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Context_somDispatchV *somTD_Context_somDispatchV;
typedef long   SOMLINK somTP_Context_somDispatchL(Context *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Context_somDispatchL *somTD_Context_somDispatchL;
typedef void*   SOMLINK somTP_Context_somDispatchA(Context *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Context_somDispatchA *somTD_Context_somDispatchA;
typedef double   SOMLINK somTP_Context_somDispatchD(Context *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Context_somDispatchD *somTD_Context_somDispatchD;
typedef SOMObject*   SOMLINK somTP_Context_somPrintSelf(Context *somSelf);
typedef somTP_Context_somPrintSelf *somTD_Context_somPrintSelf;
typedef void   SOMLINK somTP_Context_somDumpSelf(Context *somSelf, 
		long level);
typedef somTP_Context_somDumpSelf *somTD_Context_somDumpSelf;
typedef void   SOMLINK somTP_Context_somDumpSelfInt(Context *somSelf, 
		long level);
typedef somTP_Context_somDumpSelfInt *somTD_Context_somDumpSelfInt;
}

#endif /* Context_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Context
 */
class Context : public SOMObject
{
public:

// Context::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_Context) ContextNewClass(Context_MajorVersion,Context_MinorVersion);
   return (void*)
      SOM_Resolve(_Context,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_Context));
}

// Context::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

Context& operator=(Context& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

Context()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ContextCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

Context(Context* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ContextCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
Context(const Context* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ContextCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: set_one_value */
ORBStatus   set_one_value(Environment *ev, 
		Identifier prop_name, 
		string value)
{
/*
 *   This method sets or adds a single context object property. If prop_name
 *   does not exist in the property list, it is added. If prop_name
 *   does exist, its value is changed.
 * 
 */
   return SOM_ResolveD(this,Context,Context,set_one_value)
	(this, ev,prop_name,value);
}


/* method: set_values */
ORBStatus   set_values(Environment *ev, 
		NVList* values)
{
/*
 *   This method sets or changes one or more property values in the context
 *   object. If a prop_name specified in the NVList does not exist in the
 *   Context object property list, it is added. If a prop_name specified in
 *   the NVList does exist in the Context object property list, its value
 *   is changed.
 * 
 */
   return SOM_ResolveD(this,Context,Context,set_values)
	(this, ev,values);
}


/* method: get_values */
ORBStatus   get_values(Environment *ev, 
		Identifier start_scope, 
		Flags op_flags, 
		Identifier prop_name, 
		NVList** values)
{
/*
 *   This method retrieves the specified context property value(s) If
 *   prop_name has a trailing wildcard ("*"), then all matching properties
 *   and their values are returned. The returned NVList is the responsibility
 *   of the caller,
 * 
 *   If no matching properties are found, and error is returned the property
 *   list contains no values.
 * 
 *   Scope indicates the context object level at which to initiate the search
 *   for the specified properties (e.g. "_USER", "_SYSTEM"). If the property
 *   is not found at the indicated level, the search continues up the context
 *   object tree until a match is found or all context objects in the chain
 *   have been searched.
 * 
 *   If scope name is ommitted, the search begins with the specified context
 *   object. If the specified scope name is not found, an exception is
 *   returned.
 * 
 *   The following operation flags may be specified:
 * 
 *   CTX_RESTRICT_SCOPE  Searching is limited to the specified search scope or
 *                       context object.
 * 
 */
   return SOM_ResolveD(this,Context,Context,get_values)
	(this, ev,start_scope,op_flags,prop_name,values);
}


/* method: delete_values */
ORBStatus   delete_values(Environment *ev, 
		Identifier prop_name)
{
/*
 *   This method deletes the specified property value(s) from the context
 *   object.  If prop_name has a trailing wildcard character ("*"), then
 *   all property names which match will be deleted.
 * 
 *   Search scope is always limited to the specified context object.
 * 
 *   If no matching property is found, an exception is returned.
 * 
 */
   return SOM_ResolveD(this,Context,Context,delete_values)
	(this, ev,prop_name);
}


/* method: create_child */
ORBStatus   create_child(Environment *ev, 
		Identifier ctx_name, 
		Context** child_ctx)
{
/*
 *   This method creates a child context object.
 * 
 *   The returned context object is chained to its parent context. That is,
 *   searches on the child context object will look in the parent context
 *   (and so on, up the context tree), if necessary, for matching property
 *   names.
 * 
 */
   return SOM_ResolveD(this,Context,Context,create_child)
	(this, ev,ctx_name,child_ctx);
}


/* method: destroy */
ORBStatus   destroy(Environment *ev, 
		Flags flags)
{
/*
 *   This operation deletes the indicated context object.
 *   The following flags may be specified:
 * 
 *   CTX_DELETE_DESCENDENTS    Deletes the indicated context object and all
 *                             of its descendent context objects as well.
 * 
 *   An exception is returned if there are one or more child context objects
 *   and the CTX_DELETE_DESCENDENTS flag was not set.
 * 
 */
   return SOM_ResolveD(this,Context,Context,destroy)
	(this, ev,flags);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,Context,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,Context,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,Context,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
Context*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,Context,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,Context,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,Context,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,Context,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
Context*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,Context,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
Context*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,Context,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
Context*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,Context,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,Context,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,Context,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,Context,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,Context,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,Context,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,Context,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,Context,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,Context,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,Context,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   Context_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,Context,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,Context,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   Context_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,Context,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,Context,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,Context,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,Context,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   Context_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,Context,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,Context,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   Context_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,Context,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,Context,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   Context_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,Context,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,Context,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   Context_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,Context,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,Context,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,Context,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,Context,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,Context,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* Context */



#endif       /* SOM_Context_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: somsid.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    COMPONENT_NAME: somu
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMUTStringId_xh
#define SOM_SOMUTStringId_xh

class SOMUTStringId;

/*
 *  This is the abstract base class for an ASCIIZ string (an ASCII string
 *  terminated with a zero) based ID. Refer to derived classes for details.
 * 
 *  Intances of classes derived from this one should represent a string
 *  value which can be used to identify something... such as an object,
 *  a file, a network node, etc, etc...
 * 
 */

#define SOMUTStringId_MajorVersion 2
#define SOMUTStringId_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMUTId_xh
#include <somida.xh>
#endif

#ifndef SOMUTStringId_API
#define SOMUTStringId_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the SOMUTStringId Class */
SOMEXTERN SOMClass * SOMLINK SOMUTStringIdNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMUTStringId class object, and the methods it introduces. */
SOMEXTERN struct SOMUTStringIdClassDataStructure {
	SOMClass *classObject;
	somMToken somutSetIdString;
	somMToken somutGetIdString;
	somMToken somutGetIdStringLen;
	somMToken somutEqualsString;
	somMToken somutCompareString;
} SOMDLINK SOMUTStringIdClassData;
#define _SOMUTStringId SOMUTStringIdClassData.classObject

/* The API to parentMtabs for SOMUTStringId, and the instance data it introduces. */
SOMEXTERN struct SOMUTStringIdCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMUTStringIdCClassData;

/*
 * -- Typedefs for SOMUTStringId Method Procedures
 */
SOMEXTERN {
typedef long   SOMLINK somTP_SOMUTStringId_somutSetIdString(SOMUTStringId *somSelf, Environment *ev, 
		string IdString);
typedef somTP_SOMUTStringId_somutSetIdString *somTD_SOMUTStringId_somutSetIdString;
typedef string   SOMLINK somTP_SOMUTStringId_somutGetIdString(SOMUTStringId *somSelf, Environment *ev, 
		string toBuffer);
typedef somTP_SOMUTStringId_somutGetIdString *somTD_SOMUTStringId_somutGetIdString;
typedef long   SOMLINK somTP_SOMUTStringId_somutGetIdStringLen(SOMUTStringId *somSelf, Environment *ev);
typedef somTP_SOMUTStringId_somutGetIdStringLen *somTD_SOMUTStringId_somutGetIdStringLen;
typedef boolean   SOMLINK somTP_SOMUTStringId_somutEqualsString(SOMUTStringId *somSelf, Environment *ev, 
		string IdString);
typedef somTP_SOMUTStringId_somutEqualsString *somTD_SOMUTStringId_somutEqualsString;
typedef short   SOMLINK somTP_SOMUTStringId_somutCompareString(SOMUTStringId *somSelf, Environment *ev, 
		string IdString);
typedef somTP_SOMUTStringId_somutCompareString *somTD_SOMUTStringId_somutCompareString;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_SOMUTStringId_somutSetIdId(SOMUTStringId *somSelf, Environment *ev, 
		SOMUTId* otherId);
typedef somTP_SOMUTStringId_somutSetIdId *somTD_SOMUTStringId_somutSetIdId;
typedef boolean   SOMLINK somTP_SOMUTStringId_somutEqualsId(SOMUTStringId *somSelf, Environment *ev, 
		SOMUTId* otherId);
typedef somTP_SOMUTStringId_somutEqualsId *somTD_SOMUTStringId_somutEqualsId;
typedef short   SOMLINK somTP_SOMUTStringId_somutCompareId(SOMUTStringId *somSelf, Environment *ev, 
		SOMUTId* otherId);
typedef somTP_SOMUTStringId_somutCompareId *somTD_SOMUTStringId_somutCompareId;
typedef unsigned long   SOMLINK somTP_SOMUTStringId_somutHashId(SOMUTStringId *somSelf, Environment *ev);
typedef somTP_SOMUTStringId_somutHashId *somTD_SOMUTStringId_somutHashId;
typedef void   SOMLINK somTP_SOMUTStringId_somDefaultInit(SOMUTStringId *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_SOMUTStringId_somDefaultInit *somTD_SOMUTStringId_somDefaultInit;
typedef void   SOMLINK somTP_SOMUTStringId_somDestruct(SOMUTStringId *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_SOMUTStringId_somDestruct *somTD_SOMUTStringId_somDestruct;
typedef void   SOMLINK somTP_SOMUTStringId_somDefaultCopyInit(SOMUTStringId *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMUTStringId_somDefaultCopyInit *somTD_SOMUTStringId_somDefaultCopyInit;
typedef SOMUTStringId*   SOMLINK somTP_SOMUTStringId_somDefaultAssign(SOMUTStringId *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMUTStringId_somDefaultAssign *somTD_SOMUTStringId_somDefaultAssign;
typedef void   SOMLINK somTP_SOMUTStringId_somDefaultConstCopyInit(SOMUTStringId *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMUTStringId_somDefaultConstCopyInit *somTD_SOMUTStringId_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_SOMUTStringId_somDefaultVCopyInit(SOMUTStringId *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMUTStringId_somDefaultVCopyInit *somTD_SOMUTStringId_somDefaultVCopyInit;
typedef void   SOMLINK somTP_SOMUTStringId_somDefaultConstVCopyInit(SOMUTStringId *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMUTStringId_somDefaultConstVCopyInit *somTD_SOMUTStringId_somDefaultConstVCopyInit;
typedef SOMUTStringId*   SOMLINK somTP_SOMUTStringId_somDefaultConstAssign(SOMUTStringId *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMUTStringId_somDefaultConstAssign *somTD_SOMUTStringId_somDefaultConstAssign;
typedef SOMUTStringId*   SOMLINK somTP_SOMUTStringId_somDefaultVAssign(SOMUTStringId *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMUTStringId_somDefaultVAssign *somTD_SOMUTStringId_somDefaultVAssign;
typedef SOMUTStringId*   SOMLINK somTP_SOMUTStringId_somDefaultConstVAssign(SOMUTStringId *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMUTStringId_somDefaultConstVAssign *somTD_SOMUTStringId_somDefaultConstVAssign;
typedef void   SOMLINK somTP_SOMUTStringId_somInit(SOMUTStringId *somSelf);
typedef somTP_SOMUTStringId_somInit *somTD_SOMUTStringId_somInit;
typedef void   SOMLINK somTP_SOMUTStringId_somFree(SOMUTStringId *somSelf);
typedef somTP_SOMUTStringId_somFree *somTD_SOMUTStringId_somFree;
typedef void   SOMLINK somTP_SOMUTStringId_somUninit(SOMUTStringId *somSelf);
typedef somTP_SOMUTStringId_somUninit *somTD_SOMUTStringId_somUninit;
typedef SOMClass*   SOMLINK somTP_SOMUTStringId_somGetClass(SOMUTStringId *somSelf);
typedef somTP_SOMUTStringId_somGetClass *somTD_SOMUTStringId_somGetClass;
typedef string   SOMLINK somTP_SOMUTStringId_somGetClassName(SOMUTStringId *somSelf);
typedef somTP_SOMUTStringId_somGetClassName *somTD_SOMUTStringId_somGetClassName;
typedef long   SOMLINK somTP_SOMUTStringId_somGetSize(SOMUTStringId *somSelf);
typedef somTP_SOMUTStringId_somGetSize *somTD_SOMUTStringId_somGetSize;
typedef boolean   SOMLINK somTP_SOMUTStringId_somIsA(SOMUTStringId *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMUTStringId_somIsA *somTD_SOMUTStringId_somIsA;
typedef boolean   SOMLINK somTP_SOMUTStringId_somIsInstanceOf(SOMUTStringId *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMUTStringId_somIsInstanceOf *somTD_SOMUTStringId_somIsInstanceOf;
typedef boolean   SOMLINK somTP_SOMUTStringId_somRespondsTo(SOMUTStringId *somSelf, 
		somId mId);
typedef somTP_SOMUTStringId_somRespondsTo *somTD_SOMUTStringId_somRespondsTo;
typedef boolean   SOMLINK somTP_SOMUTStringId_somDispatch(SOMUTStringId *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMUTStringId_somDispatch *somTD_SOMUTStringId_somDispatch;
typedef boolean   SOMLINK somTP_SOMUTStringId_somClassDispatch(SOMUTStringId *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMUTStringId_somClassDispatch *somTD_SOMUTStringId_somClassDispatch;
typedef boolean   SOMLINK somTP_SOMUTStringId_somCastObj(SOMUTStringId *somSelf, 
		SOMClass* cls);
typedef somTP_SOMUTStringId_somCastObj *somTD_SOMUTStringId_somCastObj;
typedef boolean   SOMLINK somTP_SOMUTStringId_somResetObj(SOMUTStringId *somSelf);
typedef somTP_SOMUTStringId_somResetObj *somTD_SOMUTStringId_somResetObj;
typedef void   SOMLINK somTP_SOMUTStringId_somDispatchV(SOMUTStringId *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMUTStringId_somDispatchV *somTD_SOMUTStringId_somDispatchV;
typedef long   SOMLINK somTP_SOMUTStringId_somDispatchL(SOMUTStringId *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMUTStringId_somDispatchL *somTD_SOMUTStringId_somDispatchL;
typedef void*   SOMLINK somTP_SOMUTStringId_somDispatchA(SOMUTStringId *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMUTStringId_somDispatchA *somTD_SOMUTStringId_somDispatchA;
typedef double   SOMLINK somTP_SOMUTStringId_somDispatchD(SOMUTStringId *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMUTStringId_somDispatchD *somTD_SOMUTStringId_somDispatchD;
typedef SOMObject*   SOMLINK somTP_SOMUTStringId_somPrintSelf(SOMUTStringId *somSelf);
typedef somTP_SOMUTStringId_somPrintSelf *somTD_SOMUTStringId_somPrintSelf;
typedef void   SOMLINK somTP_SOMUTStringId_somDumpSelf(SOMUTStringId *somSelf, 
		long level);
typedef somTP_SOMUTStringId_somDumpSelf *somTD_SOMUTStringId_somDumpSelf;
typedef void   SOMLINK somTP_SOMUTStringId_somDumpSelfInt(SOMUTStringId *somSelf, 
		long level);
typedef somTP_SOMUTStringId_somDumpSelfInt *somTD_SOMUTStringId_somDumpSelfInt;
}

#endif /* SOMUTStringId_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMUTStringId
 */
class SOMUTStringId : public SOMUTId
{
/*
 *  This is the abstract base class for an ASCIIZ string (an ASCII string
 *  terminated with a zero) based ID. Refer to derived classes for details.
 * 
 *  Intances of classes derived from this one should represent a string
 *  value which can be used to identify something... such as an object,
 *  a file, a network node, etc, etc...
 * 
 */
public:

// SOMUTStringId::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMUTStringId) SOMUTStringIdNewClass(SOMUTStringId_MajorVersion,SOMUTStringId_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMUTStringId,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMUTStringId));
}

// SOMUTStringId::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

SOMUTStringId& operator=(SOMUTStringId& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

SOMUTStringId()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMUTStringIdCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMUTStringId(SOMUTStringId* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMUTStringIdCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
SOMUTStringId(const SOMUTStringId* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMUTStringIdCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: somutSetIdString */
long   somutSetIdString(Environment *ev, 
		string IdString)
{
/*
 *  Sets the ID to the given string.
 *  Returns nonzero error code if given IdString is not syntactically correct.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMUTStringId,somutSetIdString)
	(this, ev,IdString);
}


/* method: somutGetIdString */
string   somutGetIdString(Environment *ev, 
		string toBuffer)
{
/*
 *  Stores the ID as a string into the given buffer <toBuffer> and
 *  returns the buffer <toBuffer>.
 *  Use somutGetIdStringLen to determine appropriate <toBuffer> size.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMUTStringId,somutGetIdString)
	(this, ev,toBuffer);
}


/* method: somutGetIdStringLen */
long   somutGetIdStringLen(Environment *ev)
{
/*
 *  Returns the length of the ID string.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMUTStringId,somutGetIdStringLen)
	(this, ev);
}


/* method: somutEqualsString */
boolean   somutEqualsString(Environment *ev, 
		string IdString)
{
/*
 *  Checks to see if this object's ID is equivalent to the given string.
 *  Returns TRUE if the ID is equivalent to the string, FALSE otherwise.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMUTStringId,somutEqualsString)
	(this, ev,IdString);
}


/* method: somutCompareString */
short   somutCompareString(Environment *ev, 
		string IdString)
{
/*
 *  Performs an ordered comparison with the given string.
 *  If this ID < IdString -1 is returned.
 *  If this ID = IdString  0 is returned.
 *  If this ID > IdString  1 is returned.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMUTStringId,somutCompareString)
	(this, ev,IdString);
}


/*
 * Reintroduce inherited methods
 */

/* method: somutSetIdId */
void   somutSetIdId(Environment *ev, 
		SOMUTId* otherId)
{
/*
 *  Sets the ID equal to ID of the given ID.
 */
   SOM_ResolveD(this,SOMUTStringId,SOMUTId,somutSetIdId)
	(this, ev,otherId);
}


/* method: somutEqualsId */
boolean   somutEqualsId(Environment *ev, 
		SOMUTId* otherId)
{
/*
 *  Checks to see if this object's ID is equivalent to the given ID.
 *  Returns TRUE if the ID's are equivalent, FALSE otherwise.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMUTId,somutEqualsId)
	(this, ev,otherId);
}


/* method: somutCompareId */
short   somutCompareId(Environment *ev, 
		SOMUTId* otherId)
{
/*
 *  Performs an ordered comparison with another Id.
 *  If this ID < otherId  -1 is returned.
 *  If this ID = otherId   0 is returned.
 *  If this ID > otherId   1 is returned.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMUTId,somutCompareId)
	(this, ev,otherId);
}


/* method: somutHashId */
unsigned long   somutHashId(Environment *ev)
{
/*
 *  Returns an unsigned integer hash value based on the ID.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMUTId,somutHashId)
	(this, ev);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,SOMUTStringId,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,SOMUTStringId,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,SOMUTStringId,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMUTStringId*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,SOMUTStringId,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,SOMUTStringId,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,SOMUTStringId,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMUTStringId*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMUTStringId*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMUTStringId*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,SOMUTStringId,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,SOMUTStringId,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,SOMUTStringId,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   SOMUTStringId_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMUTStringId,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMUTStringId,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   SOMUTStringId_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMUTStringId,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMUTStringId,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   SOMUTStringId_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,SOMUTStringId,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,SOMUTStringId,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   SOMUTStringId_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMUTStringId,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,SOMUTStringId,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   SOMUTStringId_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMUTStringId,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,SOMUTStringId,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   SOMUTStringId_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMUTStringId,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,SOMUTStringId,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,SOMUTStringId,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,SOMUTStringId,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,SOMUTStringId,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* SOMUTStringId */



#endif       /* SOM_SOMUTStringId_xh */

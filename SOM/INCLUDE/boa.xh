
/*
 * This file was generated by the SOM Compiler.
 * FileName: boa.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    IDL interface spec for CORBA Basic Object Adapter.
 * 
 *    This is an abstract class which defines the CORBA-defined interface
 *    for a Basic Object Adapter.
 * 
 *    The SOM Object Adapter interface is derived from this one.
 *    SOMOA provides the actual implementation in DSOM.
 */


#ifndef SOM_BOA_xh
#define SOM_BOA_xh

class BOA;

#define BOA_MajorVersion 2
#define BOA_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

/*
 * C++ metaclass def
 */
#include <snglicls.xh>

#ifndef BOA_API
#define BOA_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class Container;
class SOMDObject;
class Principal;
class ImplementationDef;
class InterfaceDef;
class Context;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the BOA Class */
class SOMMSingleInstance;
SOMEXTERN SOMMSingleInstance * SOMLINK BOANewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the BOA class object, and the methods it introduces. */
SOMEXTERN struct BOAClassDataStructure {
	SOMMSingleInstance *classObject;
	somMToken create;
	somMToken dispose;
	somMToken get_id;
	somMToken change_implementation;
	somMToken get_principal;
	somMToken set_exception;
	somMToken impl_is_ready;
	somMToken deactivate_impl;
	somMToken obj_is_ready;
	somMToken deactivate_obj;
	somMToken activate_impl;
	somMToken activate_obj;
} SOMDLINK BOAClassData;
#define _BOA BOAClassData.classObject

/* The API to parentMtabs for BOA, and the instance data it introduces. */
SOMEXTERN struct BOACClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK BOACClassData;

/*
 * -- Typedefs for BOA Method Procedures
 */
SOMEXTERN {
typedef SOMDObject*   SOMLINK somTP_BOA_create(BOA *somSelf, Environment *ev, 
		ReferenceData* id, 
		InterfaceDef* intf, 
		ImplementationDef* impl);
typedef somTP_BOA_create *somTD_BOA_create;
typedef void   SOMLINK somTP_BOA_dispose(BOA *somSelf, Environment *ev, 
		SOMDObject* obj);
typedef somTP_BOA_dispose *somTD_BOA_dispose;
typedef ReferenceData   SOMLINK somTP_BOA_get_id(BOA *somSelf, Environment *ev, 
		SOMDObject* obj);
typedef somTP_BOA_get_id *somTD_BOA_get_id;
typedef Principal*   SOMLINK somTP_BOA_get_principal(BOA *somSelf, Environment *ev, 
		SOMDObject* obj, 
		Environment* req_ev);
typedef somTP_BOA_get_principal *somTD_BOA_get_principal;
typedef void   SOMLINK somTP_BOA_set_exception(BOA *somSelf, Environment *ev, 
		exception_type major, 
		string userid, 
		void* param);
typedef somTP_BOA_set_exception *somTD_BOA_set_exception;
typedef void   SOMLINK somTP_BOA_impl_is_ready(BOA *somSelf, Environment *ev, 
		ImplementationDef* impl);
typedef somTP_BOA_impl_is_ready *somTD_BOA_impl_is_ready;
typedef void   SOMLINK somTP_BOA_deactivate_impl(BOA *somSelf, Environment *ev, 
		ImplementationDef* impl);
typedef somTP_BOA_deactivate_impl *somTD_BOA_deactivate_impl;
typedef void   SOMLINK somTP_BOA_change_implementation(BOA *somSelf, Environment *ev, 
		SOMDObject* obj, 
		ImplementationDef* impl);
typedef somTP_BOA_change_implementation *somTD_BOA_change_implementation;
typedef void   SOMLINK somTP_BOA_obj_is_ready(BOA *somSelf, Environment *ev, 
		SOMDObject* obj, 
		ImplementationDef* impl);
typedef somTP_BOA_obj_is_ready *somTD_BOA_obj_is_ready;
typedef void   SOMLINK somTP_BOA_deactivate_obj(BOA *somSelf, Environment *ev, 
		SOMDObject* obj);
typedef somTP_BOA_deactivate_obj *somTD_BOA_deactivate_obj;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_BOA_somDefaultInit(BOA *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_BOA_somDefaultInit *somTD_BOA_somDefaultInit;
typedef void   SOMLINK somTP_BOA_somDestruct(BOA *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_BOA_somDestruct *somTD_BOA_somDestruct;
typedef void   SOMLINK somTP_BOA_somDefaultCopyInit(BOA *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_BOA_somDefaultCopyInit *somTD_BOA_somDefaultCopyInit;
typedef BOA*   SOMLINK somTP_BOA_somDefaultAssign(BOA *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_BOA_somDefaultAssign *somTD_BOA_somDefaultAssign;
typedef void   SOMLINK somTP_BOA_somDefaultConstCopyInit(BOA *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_BOA_somDefaultConstCopyInit *somTD_BOA_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_BOA_somDefaultVCopyInit(BOA *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_BOA_somDefaultVCopyInit *somTD_BOA_somDefaultVCopyInit;
typedef void   SOMLINK somTP_BOA_somDefaultConstVCopyInit(BOA *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_BOA_somDefaultConstVCopyInit *somTD_BOA_somDefaultConstVCopyInit;
typedef BOA*   SOMLINK somTP_BOA_somDefaultConstAssign(BOA *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_BOA_somDefaultConstAssign *somTD_BOA_somDefaultConstAssign;
typedef BOA*   SOMLINK somTP_BOA_somDefaultVAssign(BOA *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_BOA_somDefaultVAssign *somTD_BOA_somDefaultVAssign;
typedef BOA*   SOMLINK somTP_BOA_somDefaultConstVAssign(BOA *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_BOA_somDefaultConstVAssign *somTD_BOA_somDefaultConstVAssign;
typedef void   SOMLINK somTP_BOA_somInit(BOA *somSelf);
typedef somTP_BOA_somInit *somTD_BOA_somInit;
typedef void   SOMLINK somTP_BOA_somFree(BOA *somSelf);
typedef somTP_BOA_somFree *somTD_BOA_somFree;
typedef void   SOMLINK somTP_BOA_somUninit(BOA *somSelf);
typedef somTP_BOA_somUninit *somTD_BOA_somUninit;
typedef SOMMSingleInstance*   SOMLINK somTP_BOA_somGetClass(BOA *somSelf);
typedef somTP_BOA_somGetClass *somTD_BOA_somGetClass;
typedef string   SOMLINK somTP_BOA_somGetClassName(BOA *somSelf);
typedef somTP_BOA_somGetClassName *somTD_BOA_somGetClassName;
typedef long   SOMLINK somTP_BOA_somGetSize(BOA *somSelf);
typedef somTP_BOA_somGetSize *somTD_BOA_somGetSize;
typedef boolean   SOMLINK somTP_BOA_somIsA(BOA *somSelf, 
		SOMClass* aClassObj);
typedef somTP_BOA_somIsA *somTD_BOA_somIsA;
typedef boolean   SOMLINK somTP_BOA_somIsInstanceOf(BOA *somSelf, 
		SOMClass* aClassObj);
typedef somTP_BOA_somIsInstanceOf *somTD_BOA_somIsInstanceOf;
typedef boolean   SOMLINK somTP_BOA_somRespondsTo(BOA *somSelf, 
		somId mId);
typedef somTP_BOA_somRespondsTo *somTD_BOA_somRespondsTo;
typedef boolean   SOMLINK somTP_BOA_somDispatch(BOA *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_BOA_somDispatch *somTD_BOA_somDispatch;
typedef boolean   SOMLINK somTP_BOA_somClassDispatch(BOA *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_BOA_somClassDispatch *somTD_BOA_somClassDispatch;
typedef boolean   SOMLINK somTP_BOA_somCastObj(BOA *somSelf, 
		SOMClass* cls);
typedef somTP_BOA_somCastObj *somTD_BOA_somCastObj;
typedef boolean   SOMLINK somTP_BOA_somResetObj(BOA *somSelf);
typedef somTP_BOA_somResetObj *somTD_BOA_somResetObj;
typedef void   SOMLINK somTP_BOA_somDispatchV(BOA *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_BOA_somDispatchV *somTD_BOA_somDispatchV;
typedef long   SOMLINK somTP_BOA_somDispatchL(BOA *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_BOA_somDispatchL *somTD_BOA_somDispatchL;
typedef void*   SOMLINK somTP_BOA_somDispatchA(BOA *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_BOA_somDispatchA *somTD_BOA_somDispatchA;
typedef double   SOMLINK somTP_BOA_somDispatchD(BOA *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_BOA_somDispatchD *somTD_BOA_somDispatchD;
typedef SOMObject*   SOMLINK somTP_BOA_somPrintSelf(BOA *somSelf);
typedef somTP_BOA_somPrintSelf *somTD_BOA_somPrintSelf;
typedef void   SOMLINK somTP_BOA_somDumpSelf(BOA *somSelf, 
		long level);
typedef somTP_BOA_somDumpSelf *somTD_BOA_somDumpSelf;
typedef void   SOMLINK somTP_BOA_somDumpSelfInt(BOA *somSelf, 
		long level);
typedef somTP_BOA_somDumpSelfInt *somTD_BOA_somDumpSelfInt;
}

#endif /* BOA_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for BOA
 */
class BOA : public SOMObject
{
public:

// BOA::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_BOA) BOANewClass(BOA_MajorVersion,BOA_MinorVersion);
   return (void*)
      SOM_Resolve(_BOA,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_BOA));
}

// BOA::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

BOA& operator=(BOA& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

BOA()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (BOACClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

BOA(BOA* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (BOACClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
BOA(const BOA* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (BOACClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: create */
SOMDObject*   create(Environment *ev, 
		ReferenceData* id, 
		InterfaceDef* intf, 
		ImplementationDef* impl)
{
/*
 *  Create an object reference.
 */
   return SOM_ResolveD(this,BOA,BOA,create)
	(this, ev,id,intf,impl);
}


/* method: dispose */
void   dispose(Environment *ev, 
		SOMDObject* obj)
{
/*
 *  Destroy an object reference.
 */
   SOM_ResolveD(this,BOA,BOA,dispose)
	(this, ev,obj);
}


/* method: get_id */
ReferenceData   get_id(Environment *ev, 
		SOMDObject* obj)
{
/*
 *  Return ReferenceData associated with referenced object.
 */
   return SOM_ResolveD(this,BOA,BOA,get_id)
	(this, ev,obj);
}


/* method: get_principal */
Principal*   get_principal(Environment *ev, 
		SOMDObject* obj, 
		Environment* req_ev)
{
/*
 *  Return a Principal object, which describes who issued a request on
 *  the specified object.  The "req_ev" parameter is the Environment
 *  which was passed as part of the request.
 */
   return SOM_ResolveD(this,BOA,BOA,get_principal)
	(this, ev,obj,req_ev);
}


/* method: set_exception */
void   set_exception(Environment *ev, 
		exception_type major, 
		string userid, 
		void* param)
{
/*
 *  Return an exception to the client.
 */
   SOM_ResolveD(this,BOA,BOA,set_exception)
	(this, ev,major,userid,param);
}


/* method: impl_is_ready */
void   impl_is_ready(Environment *ev, 
		ImplementationDef* impl)
{
/*
 *  Indicate that the implementation is now ready to process requests.
 */
   SOM_ResolveD(this,BOA,BOA,impl_is_ready)
	(this, ev,impl);
}


/* method: deactivate_impl */
void   deactivate_impl(Environment *ev, 
		ImplementationDef* impl)
{
/*
 *  Indicate that the implementation is no longer ready to process reqs.
 */
   SOM_ResolveD(this,BOA,BOA,deactivate_impl)
	(this, ev,impl);
}


/* method: change_implementation */
void   change_implementation(Environment *ev, 
		SOMDObject* obj, 
		ImplementationDef* impl)
{
/*
 *  Change the implementation associated with the referenced object.
 *  (NOTE: Null implementation in this release of DSOM.)
 */
   SOM_ResolveD(this,BOA,BOA,change_implementation)
	(this, ev,obj,impl);
}


/* method: obj_is_ready */
void   obj_is_ready(Environment *ev, 
		SOMDObject* obj, 
		ImplementationDef* impl)
{
/*
 *  Indicate that the object is ready to process requests.
 *  (NOTE: Null implementation in this release of DSOM.)
 */
   SOM_ResolveD(this,BOA,BOA,obj_is_ready)
	(this, ev,obj,impl);
}


/* method: deactivate_obj */
void   deactivate_obj(Environment *ev, 
		SOMDObject* obj)
{
/*
 *  Indicate that the object is no longer ready to process requests.
 *  (NOTE: Null implementation in this release of DSOM.)
 */
   SOM_ResolveD(this,BOA,BOA,deactivate_obj)
	(this, ev,obj);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,BOA,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,BOA,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,BOA,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
BOA*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,BOA,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,BOA,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,BOA,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,BOA,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
BOA*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,BOA,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
BOA*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,BOA,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
BOA*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,BOA,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,BOA,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,BOA,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,BOA,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMMSingleInstance*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,BOA,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,BOA,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,BOA,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,BOA,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,BOA,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,BOA,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   BOA_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,BOA,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,BOA,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   BOA_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,BOA,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,BOA,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,BOA,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,BOA,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   BOA_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,BOA,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,BOA,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   BOA_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,BOA,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,BOA,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   BOA_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,BOA,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,BOA,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   BOA_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,BOA,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,BOA,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,BOA,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,BOA,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,BOA,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* BOA */



#endif       /* SOM_BOA_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: constdef.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

#ifndef SOM_ConstantDef_xh
#define SOM_ConstantDef_xh

class ConstantDef;

/*
 *  This interface is used to access information associated with
 *  constants defined in an IDL file.
 * 
 *  See CORBA 1.1, 7.5.9, p.137
 */

#define ConstantDef_MajorVersion 2
#define ConstantDef_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */

    #include <somtcnst.xh>
    #include <somir.xh>
    #include <containd.xh>


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_Contained_xh
#include <containd.xh>
#endif

#ifndef ConstantDef_API
#define ConstantDef_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class Container;
typedef
struct ConstantDef_ConstantDescription {
Identifier name;
RepositoryId id;
RepositoryId defined_in;
TypeCode type;
any  value;
} ConstantDef_ConstantDescription;
/*
 *  The inherited describe method returns an instance of this
 *  (ConstantDescription) structure in the "value" member of the
 *  Description structure defined in the Contained interface.
 */


#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_ConstantDescription
    #ifdef ConstantDescription
        #undef ConstantDescription
        #define SOMTGD_ConstantDescription 1
    #else
        #define ConstantDescription ConstantDef_ConstantDescription
    #endif /* ConstantDescription */
#endif /* SOMTGD_ConstantDescription */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the ConstantDef Class */
SOMEXTERN SOMClass * SOMLINK ConstantDefNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the ConstantDef class object, and the methods it introduces. */
SOMEXTERN struct ConstantDefClassDataStructure {
	SOMClass *classObject;
	somMToken _get_type;
	somMToken _set_type;
	somMToken _get_value;
	somMToken _set_value;
} SOMDLINK ConstantDefClassData;
#define _ConstantDef ConstantDefClassData.classObject

/* The API to parentMtabs for ConstantDef, and the instance data it introduces. */
SOMEXTERN struct ConstantDefCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ConstantDefCClassData;

/*
 * -- Typedefs for ConstantDef Method Procedures
 */
SOMEXTERN {
typedef TypeCode   SOMLINK somTP_ConstantDef__get_type(ConstantDef *somSelf, Environment *ev);
typedef somTP_ConstantDef__get_type *somTD_ConstantDef__get_type;
typedef void   SOMLINK somTP_ConstantDef__set_type(ConstantDef *somSelf, Environment *ev, 
		TypeCode type);
typedef somTP_ConstantDef__set_type *somTD_ConstantDef__set_type;
typedef any   SOMLINK somTP_ConstantDef__get_value(ConstantDef *somSelf, Environment *ev);
typedef somTP_ConstantDef__get_value *somTD_ConstantDef__get_value;
typedef void   SOMLINK somTP_ConstantDef__set_value(ConstantDef *somSelf, Environment *ev, 
		any* value);
typedef somTP_ConstantDef__set_value *somTD_ConstantDef__set_value;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef Identifier   SOMLINK somTP_ConstantDef__get_name(ConstantDef *somSelf, Environment *ev);
typedef somTP_ConstantDef__get_name *somTD_ConstantDef__get_name;
typedef void   SOMLINK somTP_ConstantDef__set_name(ConstantDef *somSelf, Environment *ev, 
		Identifier name);
typedef somTP_ConstantDef__set_name *somTD_ConstantDef__set_name;
typedef RepositoryId   SOMLINK somTP_ConstantDef__get_id(ConstantDef *somSelf, Environment *ev);
typedef somTP_ConstantDef__get_id *somTD_ConstantDef__get_id;
typedef void   SOMLINK somTP_ConstantDef__set_id(ConstantDef *somSelf, Environment *ev, 
		RepositoryId id);
typedef somTP_ConstantDef__set_id *somTD_ConstantDef__set_id;
typedef RepositoryId   SOMLINK somTP_ConstantDef__get_defined_in(ConstantDef *somSelf, Environment *ev);
typedef somTP_ConstantDef__get_defined_in *somTD_ConstantDef__get_defined_in;
typedef void   SOMLINK somTP_ConstantDef__set_defined_in(ConstantDef *somSelf, Environment *ev, 
		RepositoryId defined_in);
typedef somTP_ConstantDef__set_defined_in *somTD_ConstantDef__set_defined_in;
typedef _IDL_SEQUENCE_somModifier   SOMLINK somTP_ConstantDef__get_somModifiers(ConstantDef *somSelf, Environment *ev);
typedef somTP_ConstantDef__get_somModifiers *somTD_ConstantDef__get_somModifiers;
typedef void   SOMLINK somTP_ConstantDef__set_somModifiers(ConstantDef *somSelf, Environment *ev, 
		_IDL_SEQUENCE_somModifier* somModifiers);
typedef somTP_ConstantDef__set_somModifiers *somTD_ConstantDef__set_somModifiers;
typedef _IDL_SEQUENCE_Container   SOMLINK somTP_ConstantDef_within(ConstantDef *somSelf, Environment *ev);
typedef somTP_ConstantDef_within *somTD_ConstantDef_within;
typedef Contained_Description   SOMLINK somTP_ConstantDef_describe(ConstantDef *somSelf, Environment *ev);
typedef somTP_ConstantDef_describe *somTD_ConstantDef_describe;
typedef void   SOMLINK somTP_ConstantDef_somFree(ConstantDef *somSelf);
typedef somTP_ConstantDef_somFree *somTD_ConstantDef_somFree;
typedef void   SOMLINK somTP_ConstantDef_somDefaultInit(ConstantDef *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_ConstantDef_somDefaultInit *somTD_ConstantDef_somDefaultInit;
typedef void   SOMLINK somTP_ConstantDef_somDestruct(ConstantDef *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_ConstantDef_somDestruct *somTD_ConstantDef_somDestruct;
typedef void   SOMLINK somTP_ConstantDef_somDumpSelf(ConstantDef *somSelf, 
		long level);
typedef somTP_ConstantDef_somDumpSelf *somTD_ConstantDef_somDumpSelf;
typedef void   SOMLINK somTP_ConstantDef_somDumpSelfInt(ConstantDef *somSelf, 
		long level);
typedef somTP_ConstantDef_somDumpSelfInt *somTD_ConstantDef_somDumpSelfInt;
typedef void   SOMLINK somTP_ConstantDef_somDefaultCopyInit(ConstantDef *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ConstantDef_somDefaultCopyInit *somTD_ConstantDef_somDefaultCopyInit;
typedef ConstantDef*   SOMLINK somTP_ConstantDef_somDefaultAssign(ConstantDef *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ConstantDef_somDefaultAssign *somTD_ConstantDef_somDefaultAssign;
typedef void   SOMLINK somTP_ConstantDef_somDefaultConstCopyInit(ConstantDef *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ConstantDef_somDefaultConstCopyInit *somTD_ConstantDef_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ConstantDef_somDefaultVCopyInit(ConstantDef *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ConstantDef_somDefaultVCopyInit *somTD_ConstantDef_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ConstantDef_somDefaultConstVCopyInit(ConstantDef *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ConstantDef_somDefaultConstVCopyInit *somTD_ConstantDef_somDefaultConstVCopyInit;
typedef ConstantDef*   SOMLINK somTP_ConstantDef_somDefaultConstAssign(ConstantDef *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ConstantDef_somDefaultConstAssign *somTD_ConstantDef_somDefaultConstAssign;
typedef ConstantDef*   SOMLINK somTP_ConstantDef_somDefaultVAssign(ConstantDef *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ConstantDef_somDefaultVAssign *somTD_ConstantDef_somDefaultVAssign;
typedef ConstantDef*   SOMLINK somTP_ConstantDef_somDefaultConstVAssign(ConstantDef *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ConstantDef_somDefaultConstVAssign *somTD_ConstantDef_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ConstantDef_somInit(ConstantDef *somSelf);
typedef somTP_ConstantDef_somInit *somTD_ConstantDef_somInit;
typedef void   SOMLINK somTP_ConstantDef_somUninit(ConstantDef *somSelf);
typedef somTP_ConstantDef_somUninit *somTD_ConstantDef_somUninit;
typedef SOMClass*   SOMLINK somTP_ConstantDef_somGetClass(ConstantDef *somSelf);
typedef somTP_ConstantDef_somGetClass *somTD_ConstantDef_somGetClass;
typedef string   SOMLINK somTP_ConstantDef_somGetClassName(ConstantDef *somSelf);
typedef somTP_ConstantDef_somGetClassName *somTD_ConstantDef_somGetClassName;
typedef long   SOMLINK somTP_ConstantDef_somGetSize(ConstantDef *somSelf);
typedef somTP_ConstantDef_somGetSize *somTD_ConstantDef_somGetSize;
typedef boolean   SOMLINK somTP_ConstantDef_somIsA(ConstantDef *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ConstantDef_somIsA *somTD_ConstantDef_somIsA;
typedef boolean   SOMLINK somTP_ConstantDef_somIsInstanceOf(ConstantDef *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ConstantDef_somIsInstanceOf *somTD_ConstantDef_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ConstantDef_somRespondsTo(ConstantDef *somSelf, 
		somId mId);
typedef somTP_ConstantDef_somRespondsTo *somTD_ConstantDef_somRespondsTo;
typedef boolean   SOMLINK somTP_ConstantDef_somDispatch(ConstantDef *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ConstantDef_somDispatch *somTD_ConstantDef_somDispatch;
typedef boolean   SOMLINK somTP_ConstantDef_somClassDispatch(ConstantDef *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ConstantDef_somClassDispatch *somTD_ConstantDef_somClassDispatch;
typedef boolean   SOMLINK somTP_ConstantDef_somCastObj(ConstantDef *somSelf, 
		SOMClass* cls);
typedef somTP_ConstantDef_somCastObj *somTD_ConstantDef_somCastObj;
typedef boolean   SOMLINK somTP_ConstantDef_somResetObj(ConstantDef *somSelf);
typedef somTP_ConstantDef_somResetObj *somTD_ConstantDef_somResetObj;
typedef void   SOMLINK somTP_ConstantDef_somDispatchV(ConstantDef *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ConstantDef_somDispatchV *somTD_ConstantDef_somDispatchV;
typedef long   SOMLINK somTP_ConstantDef_somDispatchL(ConstantDef *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ConstantDef_somDispatchL *somTD_ConstantDef_somDispatchL;
typedef void*   SOMLINK somTP_ConstantDef_somDispatchA(ConstantDef *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ConstantDef_somDispatchA *somTD_ConstantDef_somDispatchA;
typedef double   SOMLINK somTP_ConstantDef_somDispatchD(ConstantDef *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ConstantDef_somDispatchD *somTD_ConstantDef_somDispatchD;
typedef SOMObject*   SOMLINK somTP_ConstantDef_somPrintSelf(ConstantDef *somSelf);
typedef somTP_ConstantDef_somPrintSelf *somTD_ConstantDef_somPrintSelf;
}

#endif /* ConstantDef_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for ConstantDef
 */
class ConstantDef : public Contained
{
/*
 *  This interface is used to access information associated with
 *  constants defined in an IDL file.
 * 
 *  See CORBA 1.1, 7.5.9, p.137
 */
public:

// ConstantDef::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ConstantDef) ConstantDefNewClass(ConstantDef_MajorVersion,ConstantDef_MinorVersion);
   return (void*)
      SOM_Resolve(_ConstantDef,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ConstantDef));
}

// ConstantDef::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

ConstantDef& operator=(ConstantDef& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

ConstantDef()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ConstantDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ConstantDef(ConstantDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ConstantDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
ConstantDef(const ConstantDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ConstantDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: _get_type */
TypeCode   _get_type(Environment *ev)
{
/*
 *  The TypeCode of the receiving object.  The memory used to hold
 *  the TypeCode is contained in the receiving object, which retains
 *  ownership.  Hence, do not free the returned TypeCode.  If you want
 *  to obtain a separate copy, use the TypeCode_copy operation.
 */
   return SOM_ResolveD(this,ConstantDef,ConstantDef,_get_type)
	(this, ev);
}


/* method: _set_type */
void   _set_type(Environment *ev, 
		TypeCode type)
{
/*
 *  The TypeCode of the receiving object.  The memory used to hold
 *  the TypeCode is contained in the receiving object, which retains
 *  ownership.  Hence, do not free the returned TypeCode.  If you want
 *  to obtain a separate copy, use the TypeCode_copy operation.
 */
   SOM_ResolveD(this,ConstantDef,ConstantDef,_set_type)
	(this, ev,type);
}


/* method: _get_value */
any   _get_value(Environment *ev)
{
/*
 *  The value of the receiving constant object;
 *  "value" is an any carrying a string per CORBA 7.5.9 p. 123
 */
   return SOM_ResolveD(this,ConstantDef,ConstantDef,_get_value)
	(this, ev);
}


/* method: _set_value */
void   _set_value(Environment *ev, 
		any* value)
{
/*
 *  The value of the receiving constant object;
 *  "value" is an any carrying a string per CORBA 7.5.9 p. 123
 */
   SOM_ResolveD(this,ConstantDef,ConstantDef,_set_value)
	(this, ev,value);
}


/*
 * Reintroduce inherited methods
 */

/* method: _get_name */
Identifier   _get_name(Environment *ev)
{
/*
 *  The value of the "name" field of the receiving object
 * 
 *  This is a simple name that indentifies the receiving object
 *  within its containment hierarchy.  Outside of the containment
 *  hierarchy this name is not necessarily unique, and may require
 *  qualification by ModuleDef name, InterfaceDef name, etc.
 */
   return SOM_ResolveD(this,ConstantDef,Contained,_get_name)
	(this, ev);
}


/* method: _set_name */
void   _set_name(Environment *ev, 
		Identifier name)
{
/*
 *  The value of the "name" field of the receiving object
 * 
 *  This is a simple name that indentifies the receiving object
 *  within its containment hierarchy.  Outside of the containment
 *  hierarchy this name is not necessarily unique, and may require
 *  qualification by ModuleDef name, InterfaceDef name, etc.
 */
   SOM_ResolveD(this,ConstantDef,Contained,_set_name)
	(this, ev,name);
}


/* method: _get_id */
RepositoryId   _get_id(Environment *ev)
{
/*
 *  The value of the "id" field of the receiving object
 * 
 *  The "id" is a string that uniquely identifies any object in
 *  the interface repository.  No qualification is needed for
 *  an "id".  Notice that "RepositoryId"s have no relationship
 *  to the SOM type "somId".
 */
   return SOM_ResolveD(this,ConstantDef,Contained,_get_id)
	(this, ev);
}


/* method: _set_id */
void   _set_id(Environment *ev, 
		RepositoryId id)
{
/*
 *  The value of the "id" field of the receiving object
 * 
 *  The "id" is a string that uniquely identifies any object in
 *  the interface repository.  No qualification is needed for
 *  an "id".  Notice that "RepositoryId"s have no relationship
 *  to the SOM type "somId".
 */
   SOM_ResolveD(this,ConstantDef,Contained,_set_id)
	(this, ev,id);
}


/* method: _get_defined_in */
RepositoryId   _get_defined_in(Environment *ev)
{
/*
 *  The value of the "defined_in" field of the receiving object
 * 
 *  This "id" uniquely identifies the container where the
 *  receiving object is defined.  Objects that have global scope
 *  and do not appear within any other objects are by default
 *  placed in the "Repository" object.
 */
   return SOM_ResolveD(this,ConstantDef,Contained,_get_defined_in)
	(this, ev);
}


/* method: _set_defined_in */
void   _set_defined_in(Environment *ev, 
		RepositoryId defined_in)
{
/*
 *  The value of the "defined_in" field of the receiving object
 * 
 *  This "id" uniquely identifies the container where the
 *  receiving object is defined.  Objects that have global scope
 *  and do not appear within any other objects are by default
 *  placed in the "Repository" object.
 */
   SOM_ResolveD(this,ConstantDef,Contained,_set_defined_in)
	(this, ev,defined_in);
}


/* method: _get_somModifiers */
_IDL_SEQUENCE_somModifier   _get_somModifiers(Environment *ev)
{
/*
 *  [SOM-unique extension]
 * 
 *  The somModifiers attribute is a sequence containing all of
 *  the "modifiers" attached to the corresponding IDL object in
 *  the SOM-unique implementation section of the IDL file where
 *  the receiving object was originally defined.
 */
   return SOM_ResolveD(this,ConstantDef,Contained,_get_somModifiers)
	(this, ev);
}


/* method: _set_somModifiers */
void   _set_somModifiers(Environment *ev, 
		_IDL_SEQUENCE_somModifier* somModifiers)
{
/*
 *  [SOM-unique extension]
 * 
 *  The somModifiers attribute is a sequence containing all of
 *  the "modifiers" attached to the corresponding IDL object in
 *  the SOM-unique implementation section of the IDL file where
 *  the receiving object was originally defined.
 */
   SOM_ResolveD(this,ConstantDef,Contained,_set_somModifiers)
	(this, ev,somModifiers);
}


/* method: within */
_IDL_SEQUENCE_Container   within(Environment *ev)
{
/*
 *  Returns a list of objects that contain the receiving object.
 *  If the object is an interface or module, it can only be contained
 *  by the object that defines it.  Other objects can be contained by
 *  objects that define or inherit them.
 * 
 *  When you have finished using the sequence returned by this method
 *  it is your responsibility to release the storage allocated for it.
 *  To free the sequence, use a call similar to the following:
 * 
 * 	  if (seqname._length)
 * 	      long i;
 * 	      for(i=0; i<seqname._length; i++)
 * 		_somFree(seqname._buffer[i]);
 * 	      SOMFree (seqname._buffer);
 */
   return SOM_ResolveD(this,ConstantDef,Contained,within)
	(this, ev);
}


/* method: describe */
Contained_Description   describe(Environment *ev)
{
/*
 *  Returns a structure containing all of the attributes defined in
 *  the interface of the receiving object.
 * 
 *  Warning: this method returns pointers to things withing objects
 *  (for example, name).  Don't use the somFree method to release
 *  any of these objects while this information is still needed..
 * 
 *  When you have finished using the information in the returned
 *  Description structure, it is your responsibility to release
 *  the associated storage using a call similar to the following:
 * 
 * 	  if (desc.value._value)
 * 	      SOMFree (desc.value._value);
 */
   return SOM_ResolveD(this,ConstantDef,Contained,describe)
	(this, ev);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,ConstantDef,SOMObject,somFree)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
   SOM_ResolveD(this,ConstantDef,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
   SOM_ResolveD(this,ConstantDef,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,ConstantDef,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,ConstantDef,SOMObject,somDumpSelfInt)
	(this,level);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,ConstantDef,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ConstantDef*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,ConstantDef,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,ConstantDef,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,ConstantDef,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,ConstantDef,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ConstantDef*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,ConstantDef,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ConstantDef*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,ConstantDef,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ConstantDef*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,ConstantDef,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,ConstantDef,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,ConstantDef,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,ConstantDef,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,ConstantDef,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,ConstantDef,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ConstantDef,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ConstantDef,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ConstantDef,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   ConstantDef_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ConstantDef,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ConstantDef,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   ConstantDef_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ConstantDef,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ConstantDef,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,ConstantDef,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,ConstantDef,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   ConstantDef_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,ConstantDef,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,ConstantDef,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   ConstantDef_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ConstantDef,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,ConstantDef,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   ConstantDef_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ConstantDef,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,ConstantDef,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   ConstantDef_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ConstantDef,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,ConstantDef,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,ConstantDef,SOMObject,somPrintSelf)
	(this);
}



};   /* ConstantDef */



#endif       /* SOM_ConstantDef_xh */

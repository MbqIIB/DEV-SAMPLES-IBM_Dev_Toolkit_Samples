
/*
 * This file was generated by the SOM Compiler.
 * FileName: psma.h.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emith: 2.47
 */

/*
 *    COMPONENT_NAME: somp
 * 
 *    ORIGINS: 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1994,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMPPersistentStorageMgr_h
#define SOM_SOMPPersistentStorageMgr_h


#include <som.h>

/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * Define the class name as an object type
 */
#ifndef SOMPPersistentStorageMgr
#define SOMPPersistentStorageMgr SOMObject
#endif
/*
 *  The Persistent Storage Manager is the primary interface for clients
 *  of the Persistence Framework to read and write persistent objects
 *  to/from storage.
 * 
 *  Only a single instance of this class exists in the Persistence Framework
 *  by virtue of the metaclass SOMMSingleInstance.
 */
#include <somobj.h>

/*
 * Start of bindings for IDL types
 */

#ifndef SOMClass
    #define SOMClass SOMObject
#endif /* SOMClass */
#ifndef SOMPIOGroupMgrAbstract
    #define SOMPIOGroupMgrAbstract SOMObject
#endif /* SOMPIOGroupMgrAbstract */
#ifndef SOMPIOGroup
    #define SOMPIOGroup SOMObject
#endif /* SOMPIOGroup */
#ifndef SOMPNameSpaceMgr
    #define SOMPNameSpaceMgr SOMObject
#endif /* SOMPNameSpaceMgr */
#ifndef SOMPAscii
    #define SOMPAscii SOMObject
#endif /* SOMPAscii */
#ifndef SOMPKeyedSet
    #define SOMPKeyedSet SOMObject
#endif /* SOMPKeyedSet */
#ifndef SOMPPersistentId
    #define SOMPPersistentId SOMObject
#endif /* SOMPPersistentId */
#ifndef SOMPPersistentObject
    #define SOMPPersistentObject SOMObject
#endif /* SOMPPersistentObject */
#define SOMPPersistentStorageMgr_SOMP_STORING_ON 3 /* 3 */
#define SOMPPersistentStorageMgr_SOMP_STORING_OFF 4 /* 4 */
#define SOMPPersistentStorageMgr_SOMP_RESTORING_ON 5 /* 5 */
#define SOMPPersistentStorageMgr_SOMP_RESTORING_OFF 6 /* 6 */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_SOMP_STORING_ON
    #ifdef SOMP_STORING_ON
        #undef SOMP_STORING_ON
        #define SOMTGD_SOMP_STORING_ON 1
    #else
        #define SOMP_STORING_ON SOMPPersistentStorageMgr_SOMP_STORING_ON
    #endif /* SOMP_STORING_ON */
#endif /* SOMTGD_SOMP_STORING_ON */
#ifndef SOMTGD_SOMP_STORING_OFF
    #ifdef SOMP_STORING_OFF
        #undef SOMP_STORING_OFF
        #define SOMTGD_SOMP_STORING_OFF 1
    #else
        #define SOMP_STORING_OFF SOMPPersistentStorageMgr_SOMP_STORING_OFF
    #endif /* SOMP_STORING_OFF */
#endif /* SOMTGD_SOMP_STORING_OFF */
#ifndef SOMTGD_SOMP_RESTORING_ON
    #ifdef SOMP_RESTORING_ON
        #undef SOMP_RESTORING_ON
        #define SOMTGD_SOMP_RESTORING_ON 1
    #else
        #define SOMP_RESTORING_ON SOMPPersistentStorageMgr_SOMP_RESTORING_ON
    #endif /* SOMP_RESTORING_ON */
#endif /* SOMTGD_SOMP_RESTORING_ON */
#ifndef SOMTGD_SOMP_RESTORING_OFF
    #ifdef SOMP_RESTORING_OFF
        #undef SOMP_RESTORING_OFF
        #define SOMTGD_SOMP_RESTORING_OFF 1
    #else
        #define SOMP_RESTORING_OFF SOMPPersistentStorageMgr_SOMP_RESTORING_OFF
    #endif /* SOMP_RESTORING_OFF */
#endif /* SOMTGD_SOMP_RESTORING_OFF */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

#define SOMPPersistentStorageMgr_MajorVersion 2
#define SOMPPersistentStorageMgr_MinorVersion 1

/*
 * External name shortening if required
 */
#ifdef SOM_USE_SHORT_EXTERNAL_NAMES
#define SOMPPersistentStorageMgrNewClass c
#pragma linkage(c, system)
#define SOMPPersistentStorageMgrClassData d
#define SOMPPersistentStorageMgrCClassData x
#endif /* SOM_USE_SHORT_EXTERNAL_NAMES */

/*
 * Include the metaclass file
 */
#ifndef SOM_SOMMSingleInstance_h
#include <snglicls.h>
#endif
/*--------------Migration------------*/
#define SOMPPersistentStorageMgr_classObj SOMPPersistentStorageMgrClassData.classObject
#define _SOMPPersistentStorageMgr SOMPPersistentStorageMgr_classObj

/*
 * Declare the class creation procedure
 */
SOMEXTERN SOMClass * SOMLINK SOMPPersistentStorageMgrNewClass(integer4 somtmajorVersion,
		integer4 somtminorVersion);
#pragma linkage(SOMPPersistentStorageMgrNewClass, system)

/*
 * Declare the class data structure
 */
SOMEXTERN struct SOMPPersistentStorageMgrClassDataStructure {
	SOMClass *classObject;
	somMToken sompStoreObject;
	somMToken sompRestoreObject;
	somMToken sompStoreObjectWithoutChildren;
	somMToken sompRestoreObjectWithoutChildren;
	somMToken sompDeleteObject;
	somMToken sompObjectExists;
	somMToken sompAddObjectToWriteSet;
	somMToken sompRestoreObjectToNameSpace;
	somMToken sompAddIdToReadSet;
	somMToken sompRestoreStableObject;
	somMToken sompAddRegisteredChildrenToReadSet;
	somMToken sompPrepareWriteSet;
	somMToken sompStoreWriteSet;
	somMToken sompAddChildIfNecessary;
	somMToken sompRemoveIOGroupFromSet;
	somMToken sompRestoreObjectFromIdString;
	somMToken sompSetPSMFlags;
	somMToken sompRemoveObjectFromSet;
	somMToken sompNewGroupMgr;
	somMToken sompPSMInitThreadData;
	somMToken sompPSMUninitThreadData;
	somMToken sompPSMGetThreadData;
} SOMDLINK SOMPPersistentStorageMgrClassData;

/*
 * Declare the C specific class data structure
 */
SOMEXTERN struct SOMPPersistentStorageMgrCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} SOMDLINK SOMPPersistentStorageMgrCClassData;

/*
 * New and Renew macros for SOMPPersistentStorageMgr
 */
#define SOMPPersistentStorageMgrNew() \
   ( _SOMPPersistentStorageMgr ? \
	_somNew(_SOMPPersistentStorageMgr) \
	: ( SOMPPersistentStorageMgrNewClass(\
		SOMPPersistentStorageMgr_MajorVersion, \
		SOMPPersistentStorageMgr_MinorVersion),\
	   _somNew(_SOMPPersistentStorageMgr)))
#define SOMPPersistentStorageMgrRenew(buf) \
   ( _SOMPPersistentStorageMgr ? \
	_somRenew(_SOMPPersistentStorageMgr, buf) \
	: ( SOMPPersistentStorageMgrNewClass(\
		SOMPPersistentStorageMgr_MajorVersion, \
		SOMPPersistentStorageMgr_MinorVersion),\
	   _somRenew(_SOMPPersistentStorageMgr, buf)))

/*
 * Override method: somInit
 */
#define SOMPPersistentStorageMgr_somInit(somSelf) \
	SOMObject_somInit(somSelf)

/*
 * Override method: somUninit
 */
#define SOMPPersistentStorageMgr_somUninit(somSelf) \
	SOMObject_somUninit(somSelf)

/*
 * New Method: sompStoreObject
 */
typedef void   SOMLINK somTP_SOMPPersistentStorageMgr_sompStoreObject(SOMPPersistentStorageMgr *somSelf, Environment *ev, 
		SOMPPersistentObject* thisObject);
#pragma linkage(somTP_SOMPPersistentStorageMgr_sompStoreObject, system)
typedef somTP_SOMPPersistentStorageMgr_sompStoreObject *somTD_SOMPPersistentStorageMgr_sompStoreObject;
/*
 *  Stores a persistent object and all its persistent children.
 */
#define somMD_SOMPPersistentStorageMgr_sompStoreObject "::SOMPPersistentStorageMgr::sompStoreObject"
#define SOMPPersistentStorageMgr_sompStoreObject(somSelf,ev,thisObject) \
    (SOM_Resolve(somSelf, SOMPPersistentStorageMgr, sompStoreObject) \
	(somSelf,ev,thisObject))
#ifndef SOMGD_sompStoreObject
    #if (defined(_sompStoreObject) || defined(__sompStoreObject))
        #undef _sompStoreObject
        #undef __sompStoreObject
        #define SOMGD_sompStoreObject 1
    #else
        #define _sompStoreObject SOMPPersistentStorageMgr_sompStoreObject
    #endif /* _sompStoreObject */
#endif /* SOMGD_sompStoreObject */

/*
 * New Method: sompRestoreObject
 */
typedef SOMObject*   SOMLINK somTP_SOMPPersistentStorageMgr_sompRestoreObject(SOMPPersistentStorageMgr *somSelf, Environment *ev, 
		SOMPPersistentId* objectID);
#pragma linkage(somTP_SOMPPersistentStorageMgr_sompRestoreObject, system)
typedef somTP_SOMPPersistentStorageMgr_sompRestoreObject *somTD_SOMPPersistentStorageMgr_sompRestoreObject;
/*
 *  Restores an object and its children.
 *  If error, returns NULL.
 */
#define somMD_SOMPPersistentStorageMgr_sompRestoreObject "::SOMPPersistentStorageMgr::sompRestoreObject"
#define SOMPPersistentStorageMgr_sompRestoreObject(somSelf,ev,objectID) \
    (SOM_Resolve(somSelf, SOMPPersistentStorageMgr, sompRestoreObject) \
	(somSelf,ev,objectID))
#ifndef SOMGD_sompRestoreObject
    #if (defined(_sompRestoreObject) || defined(__sompRestoreObject))
        #undef _sompRestoreObject
        #undef __sompRestoreObject
        #define SOMGD_sompRestoreObject 1
    #else
        #define _sompRestoreObject SOMPPersistentStorageMgr_sompRestoreObject
    #endif /* _sompRestoreObject */
#endif /* SOMGD_sompRestoreObject */

/*
 * New Method: sompStoreObjectWithoutChildren
 */
typedef void   SOMLINK somTP_SOMPPersistentStorageMgr_sompStoreObjectWithoutChildren(SOMPPersistentStorageMgr *somSelf, Environment *ev, 
		SOMPPersistentObject* thisObject);
#pragma linkage(somTP_SOMPPersistentStorageMgr_sompStoreObjectWithoutChildren, system)
typedef somTP_SOMPPersistentStorageMgr_sompStoreObjectWithoutChildren *somTD_SOMPPersistentStorageMgr_sompStoreObjectWithoutChildren;
/*
 *  Stores a persistent object.
 */
#define somMD_SOMPPersistentStorageMgr_sompStoreObjectWithoutChildren "::SOMPPersistentStorageMgr::sompStoreObjectWithoutChildren"
#define SOMPPersistentStorageMgr_sompStoreObjectWithoutChildren(somSelf,ev,thisObject) \
    (SOM_Resolve(somSelf, SOMPPersistentStorageMgr, sompStoreObjectWithoutChildren) \
	(somSelf,ev,thisObject))
#ifndef SOMGD_sompStoreObjectWithoutChildren
    #if (defined(_sompStoreObjectWithoutChildren) || defined(__sompStoreObjectWithoutChildren))
        #undef _sompStoreObjectWithoutChildren
        #undef __sompStoreObjectWithoutChildren
        #define SOMGD_sompStoreObjectWithoutChildren 1
    #else
        #define _sompStoreObjectWithoutChildren SOMPPersistentStorageMgr_sompStoreObjectWithoutChildren
    #endif /* _sompStoreObjectWithoutChildren */
#endif /* SOMGD_sompStoreObjectWithoutChildren */

/*
 * New Method: sompRestoreObjectWithoutChildren
 */
typedef SOMObject*   SOMLINK somTP_SOMPPersistentStorageMgr_sompRestoreObjectWithoutChildren(SOMPPersistentStorageMgr *somSelf, Environment *ev, 
		SOMPPersistentId* objectID);
#pragma linkage(somTP_SOMPPersistentStorageMgr_sompRestoreObjectWithoutChildren, system)
typedef somTP_SOMPPersistentStorageMgr_sompRestoreObjectWithoutChildren *somTD_SOMPPersistentStorageMgr_sompRestoreObjectWithoutChildren;
/*
 *  Restores an object to a stable state.
 *  If error, returns NULL.
 */
#define somMD_SOMPPersistentStorageMgr_sompRestoreObjectWithoutChildren "::SOMPPersistentStorageMgr::sompRestoreObjectWithoutChildren"
#define SOMPPersistentStorageMgr_sompRestoreObjectWithoutChildren(somSelf,ev,objectID) \
    (SOM_Resolve(somSelf, SOMPPersistentStorageMgr, sompRestoreObjectWithoutChildren) \
	(somSelf,ev,objectID))
#ifndef SOMGD_sompRestoreObjectWithoutChildren
    #if (defined(_sompRestoreObjectWithoutChildren) || defined(__sompRestoreObjectWithoutChildren))
        #undef _sompRestoreObjectWithoutChildren
        #undef __sompRestoreObjectWithoutChildren
        #define SOMGD_sompRestoreObjectWithoutChildren 1
    #else
        #define _sompRestoreObjectWithoutChildren SOMPPersistentStorageMgr_sompRestoreObjectWithoutChildren
    #endif /* _sompRestoreObjectWithoutChildren */
#endif /* SOMGD_sompRestoreObjectWithoutChildren */

/*
 * New Method: sompDeleteObject
 */
typedef void   SOMLINK somTP_SOMPPersistentStorageMgr_sompDeleteObject(SOMPPersistentStorageMgr *somSelf, Environment *ev, 
		SOMPPersistentId* objectID);
#pragma linkage(somTP_SOMPPersistentStorageMgr_sompDeleteObject, system)
typedef somTP_SOMPPersistentStorageMgr_sompDeleteObject *somTD_SOMPPersistentStorageMgr_sompDeleteObject;
/*
 *  Delete the given persistent object.
 * 
 *  If the object is an in-memory object only, it is removed from the Name
 *  Space Mgr and its in-memory IO Group object and then freed.  If the
 *  object also previously existed in a stored IO Group, then the stored
 *  IO Group is modified to indicate that the object has been removed.
 */
#define somMD_SOMPPersistentStorageMgr_sompDeleteObject "::SOMPPersistentStorageMgr::sompDeleteObject"
#define SOMPPersistentStorageMgr_sompDeleteObject(somSelf,ev,objectID) \
    (SOM_Resolve(somSelf, SOMPPersistentStorageMgr, sompDeleteObject) \
	(somSelf,ev,objectID))
#ifndef SOMGD_sompDeleteObject
    #if (defined(_sompDeleteObject) || defined(__sompDeleteObject))
        #undef _sompDeleteObject
        #undef __sompDeleteObject
        #define SOMGD_sompDeleteObject 1
    #else
        #define _sompDeleteObject SOMPPersistentStorageMgr_sompDeleteObject
    #endif /* _sompDeleteObject */
#endif /* SOMGD_sompDeleteObject */

/*
 * New Method: sompObjectExists
 */
typedef boolean   SOMLINK somTP_SOMPPersistentStorageMgr_sompObjectExists(SOMPPersistentStorageMgr *somSelf, Environment *ev, 
		SOMPPersistentId* objectID);
#pragma linkage(somTP_SOMPPersistentStorageMgr_sompObjectExists, system)
typedef somTP_SOMPPersistentStorageMgr_sompObjectExists *somTD_SOMPPersistentStorageMgr_sompObjectExists;
/*
 *  Checks to see if object exists.  If so, returns TRUE otherwise
 *  returns FALSE.
 */
#define somMD_SOMPPersistentStorageMgr_sompObjectExists "::SOMPPersistentStorageMgr::sompObjectExists"
#define SOMPPersistentStorageMgr_sompObjectExists(somSelf,ev,objectID) \
    (SOM_Resolve(somSelf, SOMPPersistentStorageMgr, sompObjectExists) \
	(somSelf,ev,objectID))
#ifndef SOMGD_sompObjectExists
    #if (defined(_sompObjectExists) || defined(__sompObjectExists))
        #undef _sompObjectExists
        #undef __sompObjectExists
        #define SOMGD_sompObjectExists 1
    #else
        #define _sompObjectExists SOMPPersistentStorageMgr_sompObjectExists
    #endif /* _sompObjectExists */
#endif /* SOMGD_sompObjectExists */

/*
 * New Method: sompAddObjectToWriteSet
 */
typedef void   SOMLINK somTP_SOMPPersistentStorageMgr_sompAddObjectToWriteSet(SOMPPersistentStorageMgr *somSelf, Environment *ev, 
		SOMPPersistentObject* thisObject);
#pragma linkage(somTP_SOMPPersistentStorageMgr_sompAddObjectToWriteSet, system)
typedef somTP_SOMPPersistentStorageMgr_sompAddObjectToWriteSet *somTD_SOMPPersistentStorageMgr_sompAddObjectToWriteSet;
/*
 *  Adds the given object to the set of objects being written by
 *  sompStoreObject. An error occurs if this method is called
 *  before sompStoreObject is called.
 * 
 *  This method provides a way for an object's encoder/decoder to add
 *  a persistent object to the set to be written. This is useful for saving
 *  persistent child objects which were not "registered" with their
 *  parent object.
 */
#define somMD_SOMPPersistentStorageMgr_sompAddObjectToWriteSet "::SOMPPersistentStorageMgr::sompAddObjectToWriteSet"
#define SOMPPersistentStorageMgr_sompAddObjectToWriteSet(somSelf,ev,thisObject) \
    (SOM_Resolve(somSelf, SOMPPersistentStorageMgr, sompAddObjectToWriteSet) \
	(somSelf,ev,thisObject))
#ifndef SOMGD_sompAddObjectToWriteSet
    #if (defined(_sompAddObjectToWriteSet) || defined(__sompAddObjectToWriteSet))
        #undef _sompAddObjectToWriteSet
        #undef __sompAddObjectToWriteSet
        #define SOMGD_sompAddObjectToWriteSet 1
    #else
        #define _sompAddObjectToWriteSet SOMPPersistentStorageMgr_sompAddObjectToWriteSet
    #endif /* _sompAddObjectToWriteSet */
#endif /* SOMGD_sompAddObjectToWriteSet */

/*
 * New Method: sompAddIdToReadSet
 */
typedef void   SOMLINK somTP_SOMPPersistentStorageMgr_sompAddIdToReadSet(SOMPPersistentStorageMgr *somSelf, Environment *ev, 
		SOMPPersistentId* objectID);
#pragma linkage(somTP_SOMPPersistentStorageMgr_sompAddIdToReadSet, system)
typedef somTP_SOMPPersistentStorageMgr_sompAddIdToReadSet *somTD_SOMPPersistentStorageMgr_sompAddIdToReadSet;
/*
 *  This method adds the given persistent ID to the set of ID's which
 *  represent the persistent object's to be restored by
 *  sompRestoreObject.  If an error occurs the ID is not added to the read set.
 * 
 *  ID's can only be added to the read set following a call to
 *  sompRestoreObject. It is expected that encoder/decoder
 *  writers will make use of this method when restoring child objects.
 *  For example:
 *     1) decoder reads object ID in string form
 *     2) decoder creates persistent ID object based on string
 *     3) decoder calls sompAddIdToReadSet with the persistent ID.
 */
#define somMD_SOMPPersistentStorageMgr_sompAddIdToReadSet "::SOMPPersistentStorageMgr::sompAddIdToReadSet"
#define SOMPPersistentStorageMgr_sompAddIdToReadSet(somSelf,ev,objectID) \
    (SOM_Resolve(somSelf, SOMPPersistentStorageMgr, sompAddIdToReadSet) \
	(somSelf,ev,objectID))
#ifndef SOMGD_sompAddIdToReadSet
    #if (defined(_sompAddIdToReadSet) || defined(__sompAddIdToReadSet))
        #undef _sompAddIdToReadSet
        #undef __sompAddIdToReadSet
        #define SOMGD_sompAddIdToReadSet 1
    #else
        #define _sompAddIdToReadSet SOMPPersistentStorageMgr_sompAddIdToReadSet
    #endif /* _sompAddIdToReadSet */
#endif /* SOMGD_sompAddIdToReadSet */

/*
 * New Method: sompRestoreObjectFromIdString
 */
typedef SOMObject*   SOMLINK somTP_SOMPPersistentStorageMgr_sompRestoreObjectFromIdString(SOMPPersistentStorageMgr *somSelf, Environment *ev, 
		string idString);
#pragma linkage(somTP_SOMPPersistentStorageMgr_sompRestoreObjectFromIdString, system)
typedef somTP_SOMPPersistentStorageMgr_sompRestoreObjectFromIdString *somTD_SOMPPersistentStorageMgr_sompRestoreObjectFromIdString;
/*
 *  Instantiate a persistent ID from the given string and then restore
 *  the object and its children.
 *  If error, returns NULL.
 */
#define somMD_SOMPPersistentStorageMgr_sompRestoreObjectFromIdString "::SOMPPersistentStorageMgr::sompRestoreObjectFromIdString"
#define SOMPPersistentStorageMgr_sompRestoreObjectFromIdString(somSelf,ev,idString) \
    (SOM_Resolve(somSelf, SOMPPersistentStorageMgr, sompRestoreObjectFromIdString) \
	(somSelf,ev,idString))
#ifndef SOMGD_sompRestoreObjectFromIdString
    #if (defined(_sompRestoreObjectFromIdString) || defined(__sompRestoreObjectFromIdString))
        #undef _sompRestoreObjectFromIdString
        #undef __sompRestoreObjectFromIdString
        #define SOMGD_sompRestoreObjectFromIdString 1
    #else
        #define _sompRestoreObjectFromIdString SOMPPersistentStorageMgr_sompRestoreObjectFromIdString
    #endif /* _sompRestoreObjectFromIdString */
#endif /* SOMGD_sompRestoreObjectFromIdString */
#ifndef SOM_DONT_USE_INHERITED_MACROS
#define SOMPPersistentStorageMgr_somDefaultInit SOMObject_somDefaultInit
#define SOMPPersistentStorageMgr_somDestruct SOMObject_somDestruct
#define SOMPPersistentStorageMgr_somDefaultCopyInit SOMObject_somDefaultCopyInit
#define SOMPPersistentStorageMgr_somDefaultAssign SOMObject_somDefaultAssign
#define SOMPPersistentStorageMgr_somDefaultConstCopyInit SOMObject_somDefaultConstCopyInit
#define SOMPPersistentStorageMgr_somDefaultVCopyInit SOMObject_somDefaultVCopyInit
#define SOMPPersistentStorageMgr_somDefaultConstVCopyInit SOMObject_somDefaultConstVCopyInit
#define SOMPPersistentStorageMgr_somDefaultConstAssign SOMObject_somDefaultConstAssign
#define SOMPPersistentStorageMgr_somDefaultVAssign SOMObject_somDefaultVAssign
#define SOMPPersistentStorageMgr_somDefaultConstVAssign SOMObject_somDefaultConstVAssign
#define SOMPPersistentStorageMgr_somFree SOMObject_somFree
#define SOMPPersistentStorageMgr_somGetClass SOMObject_somGetClass
#define SOMPPersistentStorageMgr_somGetClassName SOMObject_somGetClassName
#define SOMPPersistentStorageMgr_somGetSize SOMObject_somGetSize
#define SOMPPersistentStorageMgr_somIsA SOMObject_somIsA
#define SOMPPersistentStorageMgr_somIsInstanceOf SOMObject_somIsInstanceOf
#define SOMPPersistentStorageMgr_somRespondsTo SOMObject_somRespondsTo
#define SOMPPersistentStorageMgr_somDispatch SOMObject_somDispatch
#define SOMPPersistentStorageMgr_somClassDispatch SOMObject_somClassDispatch
#define SOMPPersistentStorageMgr_somCastObj SOMObject_somCastObj
#define SOMPPersistentStorageMgr_somResetObj SOMObject_somResetObj
#define SOMPPersistentStorageMgr_somDispatchV SOMObject_somDispatchV
#define SOMPPersistentStorageMgr_somDispatchL SOMObject_somDispatchL
#define SOMPPersistentStorageMgr_somDispatchA SOMObject_somDispatchA
#define SOMPPersistentStorageMgr_somDispatchD SOMObject_somDispatchD
#define SOMPPersistentStorageMgr_somPrintSelf SOMObject_somPrintSelf
#define SOMPPersistentStorageMgr_somDumpSelf SOMObject_somDumpSelf
#define SOMPPersistentStorageMgr_somDumpSelfInt SOMObject_somDumpSelfInt
#endif /* SOM_DONT_USE_INHERITED_MACROS */

#endif       /* SOM_SOMPPersistentStorageMgr_h */

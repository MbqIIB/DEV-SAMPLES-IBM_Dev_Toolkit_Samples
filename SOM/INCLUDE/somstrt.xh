
/*
 * This file was generated by the SOM Compiler.
 * FileName: somstrt.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    COMPONENT_NAME: some
 * 
 *    ORIGINS: 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1994,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMStringTableC_xh
#define SOM_SOMStringTableC_xh

class SOMStringTableC;

/*
 *  Objects of the SOMStringTableC class are symbol tables that map null
 *  terminated strings to null terminated strings.  While any instance
 *  of this class can hold an indefinite number of sysbols, performance
 *  will be inproved if the instance is created with an appropriate
 *  maximum target capacity.
 */

#define SOMStringTableC_MajorVersion 2
#define SOMStringTableC_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef SOMStringTableC_API
#define SOMStringTableC_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the SOMStringTableC Class */
SOMEXTERN SOMClass * SOMLINK SOMStringTableCNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMStringTableC class object, and the methods it introduces. */
SOMEXTERN struct SOMStringTableCClassDataStructure {
	SOMClass *classObject;
	somMToken _get_somstTargetCapacity;
	somMToken _set_somstTargetCapacity;
	somMToken _get_somstAssociationsCount;
	somMToken somstAssociate;
	somMToken somstAssociateCopyKey;
	somMToken somstAssociateCopyValue;
	somMToken somstAssociateCopyBoth;
	somMToken somstGetAssociation;
	somMToken somstClearAssociation;
	somMToken somstGetIthKey;
	somMToken somstGetIthValue;
} SOMDLINK SOMStringTableCClassData;
#define _SOMStringTableC SOMStringTableCClassData.classObject

/* The API to parentMtabs for SOMStringTableC, and the instance data it introduces. */
SOMEXTERN struct SOMStringTableCCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMStringTableCCClassData;

/*
 * -- Typedefs for SOMStringTableC Method Procedures
 */
SOMEXTERN {
typedef unsigned long   SOMLINK somTP_SOMStringTableC__get_somstTargetCapacity(SOMStringTableC *somSelf);
typedef somTP_SOMStringTableC__get_somstTargetCapacity *somTD_SOMStringTableC__get_somstTargetCapacity;
typedef void   SOMLINK somTP_SOMStringTableC__set_somstTargetCapacity(SOMStringTableC *somSelf, 
		unsigned long somstTargetCapacity);
typedef somTP_SOMStringTableC__set_somstTargetCapacity *somTD_SOMStringTableC__set_somstTargetCapacity;
typedef unsigned long   SOMLINK somTP_SOMStringTableC__get_somstAssociationsCount(SOMStringTableC *somSelf);
typedef somTP_SOMStringTableC__get_somstAssociationsCount *somTD_SOMStringTableC__get_somstAssociationsCount;
typedef short   SOMLINK somTP_SOMStringTableC_somstAssociate(SOMStringTableC *somSelf, 
		string key, 
		string value);
typedef somTP_SOMStringTableC_somstAssociate *somTD_SOMStringTableC_somstAssociate;
typedef short   SOMLINK somTP_SOMStringTableC_somstAssociateCopyKey(SOMStringTableC *somSelf, 
		string key, 
		string value);
typedef somTP_SOMStringTableC_somstAssociateCopyKey *somTD_SOMStringTableC_somstAssociateCopyKey;
typedef short   SOMLINK somTP_SOMStringTableC_somstAssociateCopyValue(SOMStringTableC *somSelf, 
		string key, 
		string value);
typedef somTP_SOMStringTableC_somstAssociateCopyValue *somTD_SOMStringTableC_somstAssociateCopyValue;
typedef short   SOMLINK somTP_SOMStringTableC_somstAssociateCopyBoth(SOMStringTableC *somSelf, 
		string key, 
		string value);
typedef somTP_SOMStringTableC_somstAssociateCopyBoth *somTD_SOMStringTableC_somstAssociateCopyBoth;
typedef string   SOMLINK somTP_SOMStringTableC_somstGetAssociation(SOMStringTableC *somSelf, 
		string key);
typedef somTP_SOMStringTableC_somstGetAssociation *somTD_SOMStringTableC_somstGetAssociation;
typedef boolean   SOMLINK somTP_SOMStringTableC_somstClearAssociation(SOMStringTableC *somSelf, 
		string key);
typedef somTP_SOMStringTableC_somstClearAssociation *somTD_SOMStringTableC_somstClearAssociation;
typedef string   SOMLINK somTP_SOMStringTableC_somstGetIthKey(SOMStringTableC *somSelf, 
		unsigned long i);
typedef somTP_SOMStringTableC_somstGetIthKey *somTD_SOMStringTableC_somstGetIthKey;
typedef string   SOMLINK somTP_SOMStringTableC_somstGetIthValue(SOMStringTableC *somSelf, 
		unsigned long i);
typedef somTP_SOMStringTableC_somstGetIthValue *somTD_SOMStringTableC_somstGetIthValue;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_SOMStringTableC_somDefaultInit(SOMStringTableC *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_SOMStringTableC_somDefaultInit *somTD_SOMStringTableC_somDefaultInit;
typedef void   SOMLINK somTP_SOMStringTableC_somDestruct(SOMStringTableC *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_SOMStringTableC_somDestruct *somTD_SOMStringTableC_somDestruct;
typedef void   SOMLINK somTP_SOMStringTableC_somDefaultCopyInit(SOMStringTableC *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMStringTableC_somDefaultCopyInit *somTD_SOMStringTableC_somDefaultCopyInit;
typedef SOMStringTableC*   SOMLINK somTP_SOMStringTableC_somDefaultAssign(SOMStringTableC *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMStringTableC_somDefaultAssign *somTD_SOMStringTableC_somDefaultAssign;
typedef void   SOMLINK somTP_SOMStringTableC_somDefaultConstCopyInit(SOMStringTableC *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMStringTableC_somDefaultConstCopyInit *somTD_SOMStringTableC_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_SOMStringTableC_somDefaultVCopyInit(SOMStringTableC *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMStringTableC_somDefaultVCopyInit *somTD_SOMStringTableC_somDefaultVCopyInit;
typedef void   SOMLINK somTP_SOMStringTableC_somDefaultConstVCopyInit(SOMStringTableC *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMStringTableC_somDefaultConstVCopyInit *somTD_SOMStringTableC_somDefaultConstVCopyInit;
typedef SOMStringTableC*   SOMLINK somTP_SOMStringTableC_somDefaultConstAssign(SOMStringTableC *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMStringTableC_somDefaultConstAssign *somTD_SOMStringTableC_somDefaultConstAssign;
typedef SOMStringTableC*   SOMLINK somTP_SOMStringTableC_somDefaultVAssign(SOMStringTableC *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMStringTableC_somDefaultVAssign *somTD_SOMStringTableC_somDefaultVAssign;
typedef SOMStringTableC*   SOMLINK somTP_SOMStringTableC_somDefaultConstVAssign(SOMStringTableC *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMStringTableC_somDefaultConstVAssign *somTD_SOMStringTableC_somDefaultConstVAssign;
typedef void   SOMLINK somTP_SOMStringTableC_somInit(SOMStringTableC *somSelf);
typedef somTP_SOMStringTableC_somInit *somTD_SOMStringTableC_somInit;
typedef void   SOMLINK somTP_SOMStringTableC_somFree(SOMStringTableC *somSelf);
typedef somTP_SOMStringTableC_somFree *somTD_SOMStringTableC_somFree;
typedef void   SOMLINK somTP_SOMStringTableC_somUninit(SOMStringTableC *somSelf);
typedef somTP_SOMStringTableC_somUninit *somTD_SOMStringTableC_somUninit;
typedef SOMClass*   SOMLINK somTP_SOMStringTableC_somGetClass(SOMStringTableC *somSelf);
typedef somTP_SOMStringTableC_somGetClass *somTD_SOMStringTableC_somGetClass;
typedef string   SOMLINK somTP_SOMStringTableC_somGetClassName(SOMStringTableC *somSelf);
typedef somTP_SOMStringTableC_somGetClassName *somTD_SOMStringTableC_somGetClassName;
typedef long   SOMLINK somTP_SOMStringTableC_somGetSize(SOMStringTableC *somSelf);
typedef somTP_SOMStringTableC_somGetSize *somTD_SOMStringTableC_somGetSize;
typedef boolean   SOMLINK somTP_SOMStringTableC_somIsA(SOMStringTableC *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMStringTableC_somIsA *somTD_SOMStringTableC_somIsA;
typedef boolean   SOMLINK somTP_SOMStringTableC_somIsInstanceOf(SOMStringTableC *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMStringTableC_somIsInstanceOf *somTD_SOMStringTableC_somIsInstanceOf;
typedef boolean   SOMLINK somTP_SOMStringTableC_somRespondsTo(SOMStringTableC *somSelf, 
		somId mId);
typedef somTP_SOMStringTableC_somRespondsTo *somTD_SOMStringTableC_somRespondsTo;
typedef boolean   SOMLINK somTP_SOMStringTableC_somDispatch(SOMStringTableC *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMStringTableC_somDispatch *somTD_SOMStringTableC_somDispatch;
typedef boolean   SOMLINK somTP_SOMStringTableC_somClassDispatch(SOMStringTableC *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMStringTableC_somClassDispatch *somTD_SOMStringTableC_somClassDispatch;
typedef boolean   SOMLINK somTP_SOMStringTableC_somCastObj(SOMStringTableC *somSelf, 
		SOMClass* cls);
typedef somTP_SOMStringTableC_somCastObj *somTD_SOMStringTableC_somCastObj;
typedef boolean   SOMLINK somTP_SOMStringTableC_somResetObj(SOMStringTableC *somSelf);
typedef somTP_SOMStringTableC_somResetObj *somTD_SOMStringTableC_somResetObj;
typedef void   SOMLINK somTP_SOMStringTableC_somDispatchV(SOMStringTableC *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMStringTableC_somDispatchV *somTD_SOMStringTableC_somDispatchV;
typedef long   SOMLINK somTP_SOMStringTableC_somDispatchL(SOMStringTableC *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMStringTableC_somDispatchL *somTD_SOMStringTableC_somDispatchL;
typedef void*   SOMLINK somTP_SOMStringTableC_somDispatchA(SOMStringTableC *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMStringTableC_somDispatchA *somTD_SOMStringTableC_somDispatchA;
typedef double   SOMLINK somTP_SOMStringTableC_somDispatchD(SOMStringTableC *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMStringTableC_somDispatchD *somTD_SOMStringTableC_somDispatchD;
typedef SOMObject*   SOMLINK somTP_SOMStringTableC_somPrintSelf(SOMStringTableC *somSelf);
typedef somTP_SOMStringTableC_somPrintSelf *somTD_SOMStringTableC_somPrintSelf;
typedef void   SOMLINK somTP_SOMStringTableC_somDumpSelf(SOMStringTableC *somSelf, 
		long level);
typedef somTP_SOMStringTableC_somDumpSelf *somTD_SOMStringTableC_somDumpSelf;
typedef void   SOMLINK somTP_SOMStringTableC_somDumpSelfInt(SOMStringTableC *somSelf, 
		long level);
typedef somTP_SOMStringTableC_somDumpSelfInt *somTD_SOMStringTableC_somDumpSelfInt;
}

#endif /* SOMStringTableC_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMStringTableC
 */
class SOMStringTableC : public SOMObject
{
/*
 *  Objects of the SOMStringTableC class are symbol tables that map null
 *  terminated strings to null terminated strings.  While any instance
 *  of this class can hold an indefinite number of sysbols, performance
 *  will be inproved if the instance is created with an appropriate
 *  maximum target capacity.
 */
public:

// SOMStringTableC::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMStringTableC) SOMStringTableCNewClass(SOMStringTableC_MajorVersion,SOMStringTableC_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMStringTableC,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMStringTableC));
}

// SOMStringTableC::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

SOMStringTableC& operator=(SOMStringTableC& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

SOMStringTableC()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMStringTableCCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMStringTableC(SOMStringTableC* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMStringTableCCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
SOMStringTableC(const SOMStringTableC* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMStringTableCCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: _get_somstTargetCapacity */
unsigned long   _get_somstTargetCapacity()
{
/*
 *  The expected maximum number of associations for this table.
 *  Accuracy can result in improved performance.  A low target may
 *  result in some storage saving, but at the cost of performance.
 *  Note: this attribute must be set before any strings are added to
 *  the string table or it will not be setable.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMStringTableC,_get_somstTargetCapacity)
	(this);
}


/* method: _set_somstTargetCapacity */
void   _set_somstTargetCapacity(unsigned long somstTargetCapacity)
{
/*
 *  The expected maximum number of associations for this table.
 *  Accuracy can result in improved performance.  A low target may
 *  result in some storage saving, but at the cost of performance.
 *  Note: this attribute must be set before any strings are added to
 *  the string table or it will not be setable.
 */
   SOM_ResolveD(this,SOMStringTableC,SOMStringTableC,_set_somstTargetCapacity)
	(this,somstTargetCapacity);
}


/* method: _get_somstAssociationsCount */
unsigned long   _get_somstAssociationsCount()
{
/*
 *  The number of associations currently in this table
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMStringTableC,_get_somstAssociationsCount)
	(this);
}


/* method: somstAssociate */
short   somstAssociate(string key, 
		string value)
{
/*
 *  Associates <key> and <value>.  After this call, whenever <key> is
 *  lookedup, <value> will be returned.
 *  Zero will be returned if the association cannot be accomplished
 *  (<key> is null, or memory is not available), -1 will be returned
 *  if the association suceeds, but <key> had a previous association,
 *  and 1 is returned if the association suceeds and <key> had no
 *  previous association.
 *  Note: the string table takes over ownership of both <key> and
 *  <value>.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMStringTableC,somstAssociate)
	(this,key,value);
}


/* method: somstAssociateCopyKey */
short   somstAssociateCopyKey(string key, 
		string value)
{
/*
 *  Same as <somstAssociate> except don't take ownership of <key>.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMStringTableC,somstAssociateCopyKey)
	(this,key,value);
}


/* method: somstAssociateCopyValue */
short   somstAssociateCopyValue(string key, 
		string value)
{
/*
 *  Same as <somstAssociate> except don't take ownership of <value>.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMStringTableC,somstAssociateCopyValue)
	(this,key,value);
}


/* method: somstAssociateCopyBoth */
short   somstAssociateCopyBoth(string key, 
		string value)
{
/*
 *  Same as <somstAssociate> except don't take ownership of <key> or
 *  <value>.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMStringTableC,somstAssociateCopyBoth)
	(this,key,value);
}


/* method: somstGetAssociation */
string   somstGetAssociation(string key)
{
/*
 *  The string associated with <key> is returned if there is one and
 *  NULL is returned if <key> has no association.
 *  The string table will maintain ownership of any returned value.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMStringTableC,somstGetAssociation)
	(this,key);
}


/* method: somstClearAssociation */
boolean   somstClearAssociation(string key)
{
/*
 *  The association for <key>, if any, is removed.
 *  1 is returned if <key> had an association, and 0 is returned if
 *  it did not.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMStringTableC,somstClearAssociation)
	(this,key);
}


/* method: somstGetIthKey */
string   somstGetIthKey(unsigned long i)
{
/*
 *  Returns the key part of the <i> association in this string table
 *  if there is one and null otherwise.
 *  The order of associations in a string table is not specified, but
 *  will not change unless changes are made in the table.
 *  Ownership of the key is retained, the pointer returned is valid
 *  until any changes are made in the table.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMStringTableC,somstGetIthKey)
	(this,i);
}


/* method: somstGetIthValue */
string   somstGetIthValue(unsigned long i)
{
/*
 *  Returns the value part of the <i> association in this string table
 *  if there is one and null otherwise.
 *  The order of associations in a string table is not specified, but
 *  will not change unless changes are made in the table.
 *  Ownership of the value is retained, the pointer returned is valid
 *  until any changes are made in the table.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMStringTableC,somstGetIthValue)
	(this,i);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,SOMStringTableC,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,SOMStringTableC,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,SOMStringTableC,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMStringTableC*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,SOMStringTableC,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,SOMStringTableC,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,SOMStringTableC,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMStringTableC*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMStringTableC*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMStringTableC*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,SOMStringTableC,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,SOMStringTableC,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,SOMStringTableC,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   SOMStringTableC_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMStringTableC,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMStringTableC,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   SOMStringTableC_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMStringTableC,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMStringTableC,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   SOMStringTableC_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,SOMStringTableC,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,SOMStringTableC,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   SOMStringTableC_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMStringTableC,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,SOMStringTableC,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   SOMStringTableC_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMStringTableC,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,SOMStringTableC,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   SOMStringTableC_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMStringTableC,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,SOMStringTableC,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,SOMStringTableC,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,SOMStringTableC,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,SOMStringTableC,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* SOMStringTableC */



#endif       /* SOM_SOMStringTableC_xh */

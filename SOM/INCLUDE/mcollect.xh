
/*
 * This file was generated by the SOM Compiler.
 * FileName: mcollect.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    COMPONENT_NAME: somuc
 * 
 *    ORIGINS: 82, 81, 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *    Copyright © 1988-92 Apple Computer, Inc.  All rights reserved.
 * 
 * CLASS_NAME: somf_MCollectible
 * 
 * DESCRIPTION: The class somf_MCollectible defines the generic object class
 *              from which all other classes are derived.  It is an abstract
 *              class in that many subclasses will define some or all of the
 *              methods presented below.
 * 
 * 
 *  This file was generated by the SOM Compiler.
 *  FileName: MCollect.id2.
 *  Generated using:
 *      SOM Precompiler spc: 6.13
 *      SOM Emitter emitidl.dll: 6.18
 */


#ifndef SOM_somf_MCollectible_xh
#define SOM_somf_MCollectible_xh

class somf_MCollectible;

#define somf_MCollectible_MajorVersion 2
#define somf_MCollectible_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef somf_MCollectible_API
#define somf_MCollectible_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
#define somf_MCollectible_kReasonableLowerBound 5 /* 5 */
typedef
somMToken somf_MCollectible_somf_MCollectibleCompareFn;
typedef
somMToken somf_MCollectible_somf_MCollectibleHashFn;

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_kReasonableLowerBound
    #ifdef kReasonableLowerBound
        #undef kReasonableLowerBound
        #define SOMTGD_kReasonableLowerBound 1
    #else
        #define kReasonableLowerBound somf_MCollectible_kReasonableLowerBound
    #endif /* kReasonableLowerBound */
#endif /* SOMTGD_kReasonableLowerBound */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_somf_MCollectibleCompareFn
    #ifdef somf_MCollectibleCompareFn
        #undef somf_MCollectibleCompareFn
        #define SOMTGD_somf_MCollectibleCompareFn 1
    #else
        #define somf_MCollectibleCompareFn somf_MCollectible_somf_MCollectibleCompareFn
    #endif /* somf_MCollectibleCompareFn */
#endif /* SOMTGD_somf_MCollectibleCompareFn */
#endif /* SOM_DONT_USE_SHORT_NAMES */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_somf_MCollectibleHashFn
    #ifdef somf_MCollectibleHashFn
        #undef somf_MCollectibleHashFn
        #define SOMTGD_somf_MCollectibleHashFn 1
    #else
        #define somf_MCollectibleHashFn somf_MCollectible_somf_MCollectibleHashFn
    #endif /* somf_MCollectibleHashFn */
#endif /* SOMTGD_somf_MCollectibleHashFn */
#endif /* SOM_DONT_USE_SHORT_NAMES */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */


#define SOMF_NIL 0

#define SOMF_CALL_COMPARE_FN(obj,token,parameter) (((somTD_somf_MCollectible_somfIsEqual) somResolve(obj,token))(obj, ev, parameter))

#define SOMF_CALL_HASH_FN(obj,token) (((somTD_somf_MCollectible_somfHash) somResolve(obj,token))(obj, ev))

#define kDeleted (somf_MCollectible*) 0xFFFFFFFF

/* A procedure to create the somf_MCollectible Class */
SOMEXTERN SOMClass * SOMLINK somf_MCollectibleNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the somf_MCollectible class object, and the methods it introduces. */
SOMEXTERN struct somf_MCollectibleClassDataStructure {
	SOMClass *classObject;
	somMToken somfClone;
	somMToken somfClonePointer;
	somMToken somfHash;
	somMToken somfIsEqual;
	somMToken somfIsSame;
	somMToken somfIsNotEqual;
} SOMDLINK somf_MCollectibleClassData;
#define _somf_MCollectible somf_MCollectibleClassData.classObject

/* The API to parentMtabs for somf_MCollectible, and the instance data it introduces. */
SOMEXTERN struct somf_MCollectibleCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK somf_MCollectibleCClassData;

/*
 * -- Typedefs for somf_MCollectible Method Procedures
 */
SOMEXTERN {
typedef somf_MCollectible*   SOMLINK somTP_somf_MCollectible_somfClone(somf_MCollectible *somSelf, Environment *ev);
typedef somTP_somf_MCollectible_somfClone *somTD_somf_MCollectible_somfClone;
typedef somf_MCollectible*   SOMLINK somTP_somf_MCollectible_somfClonePointer(somf_MCollectible *somSelf, Environment *ev, 
		somf_MCollectible* clonee);
typedef somTP_somf_MCollectible_somfClonePointer *somTD_somf_MCollectible_somfClonePointer;
typedef long   SOMLINK somTP_somf_MCollectible_somfHash(somf_MCollectible *somSelf, Environment *ev);
typedef somTP_somf_MCollectible_somfHash *somTD_somf_MCollectible_somfHash;
typedef boolean   SOMLINK somTP_somf_MCollectible_somfIsEqual(somf_MCollectible *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_MCollectible_somfIsEqual *somTD_somf_MCollectible_somfIsEqual;
typedef boolean   SOMLINK somTP_somf_MCollectible_somfIsSame(somf_MCollectible *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_MCollectible_somfIsSame *somTD_somf_MCollectible_somfIsSame;
typedef boolean   SOMLINK somTP_somf_MCollectible_somfIsNotEqual(somf_MCollectible *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_MCollectible_somfIsNotEqual *somTD_somf_MCollectible_somfIsNotEqual;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_somf_MCollectible_somDefaultInit(somf_MCollectible *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_somf_MCollectible_somDefaultInit *somTD_somf_MCollectible_somDefaultInit;
typedef void   SOMLINK somTP_somf_MCollectible_somDestruct(somf_MCollectible *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_somf_MCollectible_somDestruct *somTD_somf_MCollectible_somDestruct;
typedef void   SOMLINK somTP_somf_MCollectible_somDefaultCopyInit(somf_MCollectible *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_MCollectible_somDefaultCopyInit *somTD_somf_MCollectible_somDefaultCopyInit;
typedef somf_MCollectible*   SOMLINK somTP_somf_MCollectible_somDefaultAssign(somf_MCollectible *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_MCollectible_somDefaultAssign *somTD_somf_MCollectible_somDefaultAssign;
typedef void   SOMLINK somTP_somf_MCollectible_somDefaultConstCopyInit(somf_MCollectible *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_MCollectible_somDefaultConstCopyInit *somTD_somf_MCollectible_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_somf_MCollectible_somDefaultVCopyInit(somf_MCollectible *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_MCollectible_somDefaultVCopyInit *somTD_somf_MCollectible_somDefaultVCopyInit;
typedef void   SOMLINK somTP_somf_MCollectible_somDefaultConstVCopyInit(somf_MCollectible *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_MCollectible_somDefaultConstVCopyInit *somTD_somf_MCollectible_somDefaultConstVCopyInit;
typedef somf_MCollectible*   SOMLINK somTP_somf_MCollectible_somDefaultConstAssign(somf_MCollectible *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_MCollectible_somDefaultConstAssign *somTD_somf_MCollectible_somDefaultConstAssign;
typedef somf_MCollectible*   SOMLINK somTP_somf_MCollectible_somDefaultVAssign(somf_MCollectible *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_MCollectible_somDefaultVAssign *somTD_somf_MCollectible_somDefaultVAssign;
typedef somf_MCollectible*   SOMLINK somTP_somf_MCollectible_somDefaultConstVAssign(somf_MCollectible *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_MCollectible_somDefaultConstVAssign *somTD_somf_MCollectible_somDefaultConstVAssign;
typedef void   SOMLINK somTP_somf_MCollectible_somInit(somf_MCollectible *somSelf);
typedef somTP_somf_MCollectible_somInit *somTD_somf_MCollectible_somInit;
typedef void   SOMLINK somTP_somf_MCollectible_somFree(somf_MCollectible *somSelf);
typedef somTP_somf_MCollectible_somFree *somTD_somf_MCollectible_somFree;
typedef void   SOMLINK somTP_somf_MCollectible_somUninit(somf_MCollectible *somSelf);
typedef somTP_somf_MCollectible_somUninit *somTD_somf_MCollectible_somUninit;
typedef SOMClass*   SOMLINK somTP_somf_MCollectible_somGetClass(somf_MCollectible *somSelf);
typedef somTP_somf_MCollectible_somGetClass *somTD_somf_MCollectible_somGetClass;
typedef string   SOMLINK somTP_somf_MCollectible_somGetClassName(somf_MCollectible *somSelf);
typedef somTP_somf_MCollectible_somGetClassName *somTD_somf_MCollectible_somGetClassName;
typedef long   SOMLINK somTP_somf_MCollectible_somGetSize(somf_MCollectible *somSelf);
typedef somTP_somf_MCollectible_somGetSize *somTD_somf_MCollectible_somGetSize;
typedef boolean   SOMLINK somTP_somf_MCollectible_somIsA(somf_MCollectible *somSelf, 
		SOMClass* aClassObj);
typedef somTP_somf_MCollectible_somIsA *somTD_somf_MCollectible_somIsA;
typedef boolean   SOMLINK somTP_somf_MCollectible_somIsInstanceOf(somf_MCollectible *somSelf, 
		SOMClass* aClassObj);
typedef somTP_somf_MCollectible_somIsInstanceOf *somTD_somf_MCollectible_somIsInstanceOf;
typedef boolean   SOMLINK somTP_somf_MCollectible_somRespondsTo(somf_MCollectible *somSelf, 
		somId mId);
typedef somTP_somf_MCollectible_somRespondsTo *somTD_somf_MCollectible_somRespondsTo;
typedef boolean   SOMLINK somTP_somf_MCollectible_somDispatch(somf_MCollectible *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_somf_MCollectible_somDispatch *somTD_somf_MCollectible_somDispatch;
typedef boolean   SOMLINK somTP_somf_MCollectible_somClassDispatch(somf_MCollectible *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_somf_MCollectible_somClassDispatch *somTD_somf_MCollectible_somClassDispatch;
typedef boolean   SOMLINK somTP_somf_MCollectible_somCastObj(somf_MCollectible *somSelf, 
		SOMClass* cls);
typedef somTP_somf_MCollectible_somCastObj *somTD_somf_MCollectible_somCastObj;
typedef boolean   SOMLINK somTP_somf_MCollectible_somResetObj(somf_MCollectible *somSelf);
typedef somTP_somf_MCollectible_somResetObj *somTD_somf_MCollectible_somResetObj;
typedef void   SOMLINK somTP_somf_MCollectible_somDispatchV(somf_MCollectible *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_MCollectible_somDispatchV *somTD_somf_MCollectible_somDispatchV;
typedef long   SOMLINK somTP_somf_MCollectible_somDispatchL(somf_MCollectible *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_MCollectible_somDispatchL *somTD_somf_MCollectible_somDispatchL;
typedef void*   SOMLINK somTP_somf_MCollectible_somDispatchA(somf_MCollectible *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_MCollectible_somDispatchA *somTD_somf_MCollectible_somDispatchA;
typedef double   SOMLINK somTP_somf_MCollectible_somDispatchD(somf_MCollectible *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_MCollectible_somDispatchD *somTD_somf_MCollectible_somDispatchD;
typedef SOMObject*   SOMLINK somTP_somf_MCollectible_somPrintSelf(somf_MCollectible *somSelf);
typedef somTP_somf_MCollectible_somPrintSelf *somTD_somf_MCollectible_somPrintSelf;
typedef void   SOMLINK somTP_somf_MCollectible_somDumpSelf(somf_MCollectible *somSelf, 
		long level);
typedef somTP_somf_MCollectible_somDumpSelf *somTD_somf_MCollectible_somDumpSelf;
typedef void   SOMLINK somTP_somf_MCollectible_somDumpSelfInt(somf_MCollectible *somSelf, 
		long level);
typedef somTP_somf_MCollectible_somDumpSelfInt *somTD_somf_MCollectible_somDumpSelfInt;
}

#endif /* somf_MCollectible_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for somf_MCollectible
 */
class somf_MCollectible : public SOMObject
{
public:

// somf_MCollectible::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_somf_MCollectible) somf_MCollectibleNewClass(somf_MCollectible_MajorVersion,somf_MCollectible_MinorVersion);
   return (void*)
      SOM_Resolve(_somf_MCollectible,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_somf_MCollectible));
}

// somf_MCollectible::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

somf_MCollectible& operator=(somf_MCollectible& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

somf_MCollectible()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_MCollectibleCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

somf_MCollectible(somf_MCollectible* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_MCollectibleCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
somf_MCollectible(const somf_MCollectible* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_MCollectibleCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: somfClone */
somf_MCollectible*   somfClone(Environment *ev)
{
/*
 *  somfClone provides a general function for creating a new instance of this.
 */
   return SOM_ResolveD(this,somf_MCollectible,somf_MCollectible,somfClone)
	(this, ev);
}


/* method: somfClonePointer */
somf_MCollectible*   somfClonePointer(Environment *ev, 
		somf_MCollectible* clonee)
{
/*
 *  somfClonePointer returns a pointer to a Clone
 */
   return SOM_ResolveD(this,somf_MCollectible,somf_MCollectible,somfClonePointer)
	(this, ev,clonee);
}


/* method: somfHash */
long   somfHash(Environment *ev)
{
/*
 *  somfHash returns a value suitable for use as a hashing probe for this.
 *  The default function will simply return the address of the object.
 *  The default function is almost certainly not adequate if you are overriding
 *  somfIsEqual because you need to make sure that all objects that "are equal"
 *  to each other return the same hash value.  For example, a TText object would
 *  return a hash value computed using the characters in the string instead of
 *  the address of the string.
 */
   return SOM_ResolveD(this,somf_MCollectible,somf_MCollectible,somfHash)
	(this, ev);
}


/* method: somfIsEqual */
boolean   somfIsEqual(Environment *ev, 
		somf_MCollectible* obj)
{
/*
 *  somfIsEqual returns TRUE if obj is isomorphic to this.  The default function
 *  will give you a nasty message.  For example, the somfIsEqual method
 *  for TText objects will do a string comparison.  All of the utility classes
 *  allow you to specify what methods to use when comparing objects for
 *  insertion, deletion, etc.
 */
   return SOM_ResolveD(this,somf_MCollectible,somf_MCollectible,somfIsEqual)
	(this, ev,obj);
}


/* method: somfIsSame */
boolean   somfIsSame(Environment *ev, 
		somf_MCollectible* obj)
{
/*
 *  The default function for somfIsSame is a pointer comparison
 */
   return SOM_ResolveD(this,somf_MCollectible,somf_MCollectible,somfIsSame)
	(this, ev,obj);
}


/* method: somfIsNotEqual */
boolean   somfIsNotEqual(Environment *ev, 
		somf_MCollectible* obj)
{
/*
 *  somfIsNotEqual returns TRUE if obj is NOT isomorphic to this.  It uses
 *  somfIsEqual, so overriding somfIsEqual will handle the logic of somfIsNotEqual too.
 */
   return SOM_ResolveD(this,somf_MCollectible,somf_MCollectible,somfIsNotEqual)
	(this, ev,obj);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,somf_MCollectible,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,somf_MCollectible,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,somf_MCollectible,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
somf_MCollectible*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,somf_MCollectible,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,somf_MCollectible,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,somf_MCollectible,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,somf_MCollectible,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
somf_MCollectible*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,somf_MCollectible,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
somf_MCollectible*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,somf_MCollectible,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
somf_MCollectible*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,somf_MCollectible,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,somf_MCollectible,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,somf_MCollectible,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,somf_MCollectible,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,somf_MCollectible,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,somf_MCollectible,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,somf_MCollectible,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,somf_MCollectible,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,somf_MCollectible,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,somf_MCollectible,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   somf_MCollectible_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,somf_MCollectible,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,somf_MCollectible,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   somf_MCollectible_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,somf_MCollectible,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,somf_MCollectible,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,somf_MCollectible,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,somf_MCollectible,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   somf_MCollectible_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,somf_MCollectible,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,somf_MCollectible,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   somf_MCollectible_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,somf_MCollectible,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,somf_MCollectible,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   somf_MCollectible_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,somf_MCollectible,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,somf_MCollectible,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   somf_MCollectible_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,somf_MCollectible,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,somf_MCollectible,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,somf_MCollectible,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,somf_MCollectible,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,somf_MCollectible,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* somf_MCollectible */



#endif       /* SOM_somf_MCollectible_xh */

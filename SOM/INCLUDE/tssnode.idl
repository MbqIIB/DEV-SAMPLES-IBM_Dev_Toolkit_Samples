//#  @(#) 2.12 src/somuc/tssnode.idl, somuc, som2.1 12/26/95 15:42:38 [7/30/96 14:50:12]
//
//   COMPONENT_NAME: somuc
//
//   ORIGINS: 82, 81, 27
//
//
//    25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996  
//   All Rights Reserved
//   Licensed Materials - Property of IBM
//   US Government Users Restricted Rights - Use, duplication or
//   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
//   Copyright © 1988, 1989 Apple Computer, Inc. All rights reserved.

/*
 * CLASS_NAME: somf_TSortedSequenceNode
 *
 * DESCRIPTION: A TSortedSequenceNode is a node in a tree containing
 *              MOrderableCollectible elements.  It contains a key
 *              (the MOrderableCollectible) and a link to a left child and
 *              a right child.
 *
 */

#ifndef TSSNode_idl
#define TSSNode_idl

#include <somobj.idl>
#include <mcollect.idl>

interface somf_MOrderableCollectible;

interface somf_TSortedSequenceNode : SOMObject
{

  //# The following method is overridden below:
  //#   TSortedSequenceNode();

  somf_TSortedSequenceNode somfTSortedSequenceNodeInitTMT(in somf_TSortedSequenceNode n1,
				in somf_MOrderableCollectible obj,
				in somf_TSortedSequenceNode n2);
  // Initialize the new TSortedSequenceNode
  //#  TSortedSequenceNode(TSortedSequenceNode* n1, MOrderableCollectible* obj=SOMF_NIL, TSortedSequenceNode* n2=SOMF_NIL);

  somf_TSortedSequenceNode somfTSortedSequenceNodeInitTM(in somf_TSortedSequenceNode n1,
				in somf_MOrderableCollectible obj);
  // Initialize the new TSortedSequenceNode
  //#  TSortedSequenceNode(TSortedSequenceNode* n1, MOrderableCollectible* obj=SOMF_NIL, TSortedSequenceNode* n2=SOMF_NIL);

  somf_TSortedSequenceNode somfTSortedSequenceNodeInitT(in somf_TSortedSequenceNode n1);
  // Initialize the new TSortedSequenceNode
  //#  TSortedSequenceNode(TSortedSequenceNode* n1, MOrderableCollectible* obj=SOMF_NIL, TSortedSequenceNode* n2=SOMF_NIL);

  //# The following method is not ported since it contains no logic:
  //#   virtual ~TSortedSequenceNode();

  somf_TSortedSequenceNode somfGetLeftChild();
  // Determine the left child of the node.
  //# TSortedSequenceNode* GetLeftChild();

  somf_TSortedSequenceNode somfGetRightChild();
  // Determine the right child of the node.
  //# TSortedSequenceNode* GetRightChild();

  somf_TSortedSequenceNode somfGetParent();
  // Determine the parent of the node.
  //# TSortedSequenceNode* GetParent();

  somf_MOrderableCollectible somfGetKey();
  // Determine the key to the node.
  //# MOrderableCollectible* GetKey();

  boolean somfGetRed();
  // Determine if the node is red or black.
  //# Boolean GetRed();

  void somfSetParent(in somf_TSortedSequenceNode n);
  // Set the parent of the node.
  //# void SetParent(TSortedSequenceNode* n);

  void somfSetLeftChild(in somf_TSortedSequenceNode n);
  // Set the left child of the node.
  //# void SetLeftChild(TSortedSequenceNode* n);

  void somfSetRightChild(in somf_TSortedSequenceNode n);
  // Set the right child of the node.
  //# void SetRightChild(TSortedSequenceNode* n);

  void somfSetKey(in somf_MOrderableCollectible k);
  // Set the key to the node.
  //# void SetKey(MOrderableCollectible* k);

  void somfSetRed(in boolean on);
  // Set the node to red or black.
  //# void SetRed(Boolean on=TRUE);

  void somfSetRedOn();
  // Set the node to red.
  //# void SetRed(Boolean on=TRUE);



#ifdef __SOMIDL__
  implementation {

    releaseorder: somfGetLeftChild, somfGetRightChild, somfGetParent,
		  somfGetKey, somfGetRed, somfSetParent, somfSetLeftChild,
		  somfSetRightChild, somfSetKey, somfSetRed, somfSetRedOn,
		  somfTSortedSequenceNodeInitTMT, somfTSortedSequenceNodeInitTM,
		  somfTSortedSequenceNodeInitT;

    //# Class Modifiers
    majorversion = 2;
    minorversion = 1;
    filestem = tssnode;
    dllname = "somuc.dll";


    passthru C_xh_after =  ""
"#include <morder.xh>";

    passthru C_h_after =  ""
"#include <morder.h>";

    //# Internal Instance Variables
    somf_TSortedSequenceNode          fLeftChild;
    somf_MOrderableCollectible        fKey;
    somf_TSortedSequenceNode          fRightChild;
    somf_TSortedSequenceNode          fParent;
    boolean                         fRed;

    //# Method Modifiers
    somInit: override;
    somfTSortedSequenceNodeInitTMT : nooverride;
    somfTSortedSequenceNodeInitTM : nooverride;
    somfTSortedSequenceNodeInitT : nooverride;
    somfGetLeftChild : nooverride;
    somfGetRightChild : nooverride;
    somfGetParent : nooverride;
    somfGetKey : nooverride;
    somfGetRed : nooverride;
    somfSetParent : nooverride;
    somfSetLeftChild : nooverride;
    somfSetRightChild : nooverride;
    somfSetKey : nooverride;
    somfSetRed : nooverride;

    //# Data Modifiers

  };
#endif /* __SOMIDL__ */
};

#endif  /* TSSNode_idl */

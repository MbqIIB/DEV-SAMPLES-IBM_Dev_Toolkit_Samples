
/*
 * This file was generated by the SOM Compiler.
 * FileName: tssnode.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    COMPONENT_NAME: somuc
 * 
 *    ORIGINS: 82, 81, 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *    Copyright © 1988, 1989 Apple Computer, Inc. All rights reserved.
 * 
 * CLASS_NAME: somf_TSortedSequenceNode
 * 
 * DESCRIPTION: A TSortedSequenceNode is a node in a tree containing
 *              MOrderableCollectible elements.  It contains a key
 *              (the MOrderableCollectible) and a link to a left child and
 *              a right child.
 * 
 */


#ifndef SOM_somf_TSortedSequenceNode_xh
#define SOM_somf_TSortedSequenceNode_xh

class somf_TSortedSequenceNode;

#define somf_TSortedSequenceNode_MajorVersion 2
#define somf_TSortedSequenceNode_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef somf_TSortedSequenceNode_API
#define somf_TSortedSequenceNode_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class somf_MOrderableCollectible;

/*
 * End of bindings for IDL types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */

#include <morder.xh>

/* A procedure to create the somf_TSortedSequenceNode Class */
SOMEXTERN SOMClass * SOMLINK somf_TSortedSequenceNodeNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the somf_TSortedSequenceNode class object, and the methods it introduces. */
SOMEXTERN struct somf_TSortedSequenceNodeClassDataStructure {
	SOMClass *classObject;
	somMToken somfGetLeftChild;
	somMToken somfGetRightChild;
	somMToken somfGetParent;
	somMToken somfGetKey;
	somMToken somfGetRed;
	somMToken somfSetParent;
	somMToken somfSetLeftChild;
	somMToken somfSetRightChild;
	somMToken somfSetKey;
	somMToken somfSetRed;
	somMToken somfSetRedOn;
	somMToken somfTSortedSequenceNodeInitTMT;
	somMToken somfTSortedSequenceNodeInitTM;
	somMToken somfTSortedSequenceNodeInitT;
} SOMDLINK somf_TSortedSequenceNodeClassData;
#define _somf_TSortedSequenceNode somf_TSortedSequenceNodeClassData.classObject

/* The API to parentMtabs for somf_TSortedSequenceNode, and the instance data it introduces. */
SOMEXTERN struct somf_TSortedSequenceNodeCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK somf_TSortedSequenceNodeCClassData;

/*
 * -- Typedefs for somf_TSortedSequenceNode Method Procedures
 */
SOMEXTERN {
typedef somf_TSortedSequenceNode*   SOMLINK somTP_somf_TSortedSequenceNode_somfTSortedSequenceNodeInitTMT(somf_TSortedSequenceNode *somSelf, Environment *ev, 
		somf_TSortedSequenceNode* n1, 
		somf_MOrderableCollectible* obj, 
		somf_TSortedSequenceNode* n2);
typedef somTP_somf_TSortedSequenceNode_somfTSortedSequenceNodeInitTMT *somTD_somf_TSortedSequenceNode_somfTSortedSequenceNodeInitTMT;
typedef somf_TSortedSequenceNode*   SOMLINK somTP_somf_TSortedSequenceNode_somfTSortedSequenceNodeInitTM(somf_TSortedSequenceNode *somSelf, Environment *ev, 
		somf_TSortedSequenceNode* n1, 
		somf_MOrderableCollectible* obj);
typedef somTP_somf_TSortedSequenceNode_somfTSortedSequenceNodeInitTM *somTD_somf_TSortedSequenceNode_somfTSortedSequenceNodeInitTM;
typedef somf_TSortedSequenceNode*   SOMLINK somTP_somf_TSortedSequenceNode_somfTSortedSequenceNodeInitT(somf_TSortedSequenceNode *somSelf, Environment *ev, 
		somf_TSortedSequenceNode* n1);
typedef somTP_somf_TSortedSequenceNode_somfTSortedSequenceNodeInitT *somTD_somf_TSortedSequenceNode_somfTSortedSequenceNodeInitT;
typedef somf_TSortedSequenceNode*   SOMLINK somTP_somf_TSortedSequenceNode_somfGetLeftChild(somf_TSortedSequenceNode *somSelf, Environment *ev);
typedef somTP_somf_TSortedSequenceNode_somfGetLeftChild *somTD_somf_TSortedSequenceNode_somfGetLeftChild;
typedef somf_TSortedSequenceNode*   SOMLINK somTP_somf_TSortedSequenceNode_somfGetRightChild(somf_TSortedSequenceNode *somSelf, Environment *ev);
typedef somTP_somf_TSortedSequenceNode_somfGetRightChild *somTD_somf_TSortedSequenceNode_somfGetRightChild;
typedef somf_TSortedSequenceNode*   SOMLINK somTP_somf_TSortedSequenceNode_somfGetParent(somf_TSortedSequenceNode *somSelf, Environment *ev);
typedef somTP_somf_TSortedSequenceNode_somfGetParent *somTD_somf_TSortedSequenceNode_somfGetParent;
typedef somf_MOrderableCollectible*   SOMLINK somTP_somf_TSortedSequenceNode_somfGetKey(somf_TSortedSequenceNode *somSelf, Environment *ev);
typedef somTP_somf_TSortedSequenceNode_somfGetKey *somTD_somf_TSortedSequenceNode_somfGetKey;
typedef boolean   SOMLINK somTP_somf_TSortedSequenceNode_somfGetRed(somf_TSortedSequenceNode *somSelf, Environment *ev);
typedef somTP_somf_TSortedSequenceNode_somfGetRed *somTD_somf_TSortedSequenceNode_somfGetRed;
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somfSetParent(somf_TSortedSequenceNode *somSelf, Environment *ev, 
		somf_TSortedSequenceNode* n);
typedef somTP_somf_TSortedSequenceNode_somfSetParent *somTD_somf_TSortedSequenceNode_somfSetParent;
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somfSetLeftChild(somf_TSortedSequenceNode *somSelf, Environment *ev, 
		somf_TSortedSequenceNode* n);
typedef somTP_somf_TSortedSequenceNode_somfSetLeftChild *somTD_somf_TSortedSequenceNode_somfSetLeftChild;
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somfSetRightChild(somf_TSortedSequenceNode *somSelf, Environment *ev, 
		somf_TSortedSequenceNode* n);
typedef somTP_somf_TSortedSequenceNode_somfSetRightChild *somTD_somf_TSortedSequenceNode_somfSetRightChild;
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somfSetKey(somf_TSortedSequenceNode *somSelf, Environment *ev, 
		somf_MOrderableCollectible* k);
typedef somTP_somf_TSortedSequenceNode_somfSetKey *somTD_somf_TSortedSequenceNode_somfSetKey;
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somfSetRed(somf_TSortedSequenceNode *somSelf, Environment *ev, 
		boolean on);
typedef somTP_somf_TSortedSequenceNode_somfSetRed *somTD_somf_TSortedSequenceNode_somfSetRed;
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somfSetRedOn(somf_TSortedSequenceNode *somSelf, Environment *ev);
typedef somTP_somf_TSortedSequenceNode_somfSetRedOn *somTD_somf_TSortedSequenceNode_somfSetRedOn;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somDefaultInit(somf_TSortedSequenceNode *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_somf_TSortedSequenceNode_somDefaultInit *somTD_somf_TSortedSequenceNode_somDefaultInit;
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somDestruct(somf_TSortedSequenceNode *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_somf_TSortedSequenceNode_somDestruct *somTD_somf_TSortedSequenceNode_somDestruct;
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somDefaultCopyInit(somf_TSortedSequenceNode *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TSortedSequenceNode_somDefaultCopyInit *somTD_somf_TSortedSequenceNode_somDefaultCopyInit;
typedef somf_TSortedSequenceNode*   SOMLINK somTP_somf_TSortedSequenceNode_somDefaultAssign(somf_TSortedSequenceNode *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TSortedSequenceNode_somDefaultAssign *somTD_somf_TSortedSequenceNode_somDefaultAssign;
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somDefaultConstCopyInit(somf_TSortedSequenceNode *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TSortedSequenceNode_somDefaultConstCopyInit *somTD_somf_TSortedSequenceNode_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somDefaultVCopyInit(somf_TSortedSequenceNode *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TSortedSequenceNode_somDefaultVCopyInit *somTD_somf_TSortedSequenceNode_somDefaultVCopyInit;
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somDefaultConstVCopyInit(somf_TSortedSequenceNode *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TSortedSequenceNode_somDefaultConstVCopyInit *somTD_somf_TSortedSequenceNode_somDefaultConstVCopyInit;
typedef somf_TSortedSequenceNode*   SOMLINK somTP_somf_TSortedSequenceNode_somDefaultConstAssign(somf_TSortedSequenceNode *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TSortedSequenceNode_somDefaultConstAssign *somTD_somf_TSortedSequenceNode_somDefaultConstAssign;
typedef somf_TSortedSequenceNode*   SOMLINK somTP_somf_TSortedSequenceNode_somDefaultVAssign(somf_TSortedSequenceNode *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TSortedSequenceNode_somDefaultVAssign *somTD_somf_TSortedSequenceNode_somDefaultVAssign;
typedef somf_TSortedSequenceNode*   SOMLINK somTP_somf_TSortedSequenceNode_somDefaultConstVAssign(somf_TSortedSequenceNode *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TSortedSequenceNode_somDefaultConstVAssign *somTD_somf_TSortedSequenceNode_somDefaultConstVAssign;
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somInit(somf_TSortedSequenceNode *somSelf);
typedef somTP_somf_TSortedSequenceNode_somInit *somTD_somf_TSortedSequenceNode_somInit;
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somFree(somf_TSortedSequenceNode *somSelf);
typedef somTP_somf_TSortedSequenceNode_somFree *somTD_somf_TSortedSequenceNode_somFree;
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somUninit(somf_TSortedSequenceNode *somSelf);
typedef somTP_somf_TSortedSequenceNode_somUninit *somTD_somf_TSortedSequenceNode_somUninit;
typedef SOMClass*   SOMLINK somTP_somf_TSortedSequenceNode_somGetClass(somf_TSortedSequenceNode *somSelf);
typedef somTP_somf_TSortedSequenceNode_somGetClass *somTD_somf_TSortedSequenceNode_somGetClass;
typedef string   SOMLINK somTP_somf_TSortedSequenceNode_somGetClassName(somf_TSortedSequenceNode *somSelf);
typedef somTP_somf_TSortedSequenceNode_somGetClassName *somTD_somf_TSortedSequenceNode_somGetClassName;
typedef long   SOMLINK somTP_somf_TSortedSequenceNode_somGetSize(somf_TSortedSequenceNode *somSelf);
typedef somTP_somf_TSortedSequenceNode_somGetSize *somTD_somf_TSortedSequenceNode_somGetSize;
typedef boolean   SOMLINK somTP_somf_TSortedSequenceNode_somIsA(somf_TSortedSequenceNode *somSelf, 
		SOMClass* aClassObj);
typedef somTP_somf_TSortedSequenceNode_somIsA *somTD_somf_TSortedSequenceNode_somIsA;
typedef boolean   SOMLINK somTP_somf_TSortedSequenceNode_somIsInstanceOf(somf_TSortedSequenceNode *somSelf, 
		SOMClass* aClassObj);
typedef somTP_somf_TSortedSequenceNode_somIsInstanceOf *somTD_somf_TSortedSequenceNode_somIsInstanceOf;
typedef boolean   SOMLINK somTP_somf_TSortedSequenceNode_somRespondsTo(somf_TSortedSequenceNode *somSelf, 
		somId mId);
typedef somTP_somf_TSortedSequenceNode_somRespondsTo *somTD_somf_TSortedSequenceNode_somRespondsTo;
typedef boolean   SOMLINK somTP_somf_TSortedSequenceNode_somDispatch(somf_TSortedSequenceNode *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_somf_TSortedSequenceNode_somDispatch *somTD_somf_TSortedSequenceNode_somDispatch;
typedef boolean   SOMLINK somTP_somf_TSortedSequenceNode_somClassDispatch(somf_TSortedSequenceNode *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_somf_TSortedSequenceNode_somClassDispatch *somTD_somf_TSortedSequenceNode_somClassDispatch;
typedef boolean   SOMLINK somTP_somf_TSortedSequenceNode_somCastObj(somf_TSortedSequenceNode *somSelf, 
		SOMClass* cls);
typedef somTP_somf_TSortedSequenceNode_somCastObj *somTD_somf_TSortedSequenceNode_somCastObj;
typedef boolean   SOMLINK somTP_somf_TSortedSequenceNode_somResetObj(somf_TSortedSequenceNode *somSelf);
typedef somTP_somf_TSortedSequenceNode_somResetObj *somTD_somf_TSortedSequenceNode_somResetObj;
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somDispatchV(somf_TSortedSequenceNode *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_TSortedSequenceNode_somDispatchV *somTD_somf_TSortedSequenceNode_somDispatchV;
typedef long   SOMLINK somTP_somf_TSortedSequenceNode_somDispatchL(somf_TSortedSequenceNode *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_TSortedSequenceNode_somDispatchL *somTD_somf_TSortedSequenceNode_somDispatchL;
typedef void*   SOMLINK somTP_somf_TSortedSequenceNode_somDispatchA(somf_TSortedSequenceNode *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_TSortedSequenceNode_somDispatchA *somTD_somf_TSortedSequenceNode_somDispatchA;
typedef double   SOMLINK somTP_somf_TSortedSequenceNode_somDispatchD(somf_TSortedSequenceNode *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_TSortedSequenceNode_somDispatchD *somTD_somf_TSortedSequenceNode_somDispatchD;
typedef SOMObject*   SOMLINK somTP_somf_TSortedSequenceNode_somPrintSelf(somf_TSortedSequenceNode *somSelf);
typedef somTP_somf_TSortedSequenceNode_somPrintSelf *somTD_somf_TSortedSequenceNode_somPrintSelf;
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somDumpSelf(somf_TSortedSequenceNode *somSelf, 
		long level);
typedef somTP_somf_TSortedSequenceNode_somDumpSelf *somTD_somf_TSortedSequenceNode_somDumpSelf;
typedef void   SOMLINK somTP_somf_TSortedSequenceNode_somDumpSelfInt(somf_TSortedSequenceNode *somSelf, 
		long level);
typedef somTP_somf_TSortedSequenceNode_somDumpSelfInt *somTD_somf_TSortedSequenceNode_somDumpSelfInt;
}

#endif /* somf_TSortedSequenceNode_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for somf_TSortedSequenceNode
 */
class somf_TSortedSequenceNode : public SOMObject
{
public:

// somf_TSortedSequenceNode::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_somf_TSortedSequenceNode) somf_TSortedSequenceNodeNewClass(somf_TSortedSequenceNode_MajorVersion,somf_TSortedSequenceNode_MinorVersion);
   return (void*)
      SOM_Resolve(_somf_TSortedSequenceNode,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_somf_TSortedSequenceNode));
}

// somf_TSortedSequenceNode::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

somf_TSortedSequenceNode& operator=(somf_TSortedSequenceNode& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

somf_TSortedSequenceNode()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_TSortedSequenceNodeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

somf_TSortedSequenceNode(somf_TSortedSequenceNode* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_TSortedSequenceNodeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
somf_TSortedSequenceNode(const somf_TSortedSequenceNode* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_TSortedSequenceNodeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: somfTSortedSequenceNodeInitTMT */
somf_TSortedSequenceNode*   somfTSortedSequenceNodeInitTMT(Environment *ev, 
		somf_TSortedSequenceNode* n1, 
		somf_MOrderableCollectible* obj, 
		somf_TSortedSequenceNode* n2)
{
/*
 *  Initialize the new TSortedSequenceNode
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,somf_TSortedSequenceNode,somfTSortedSequenceNodeInitTMT)
	(this, ev,n1,obj,n2);
}


/* method: somfTSortedSequenceNodeInitTM */
somf_TSortedSequenceNode*   somfTSortedSequenceNodeInitTM(Environment *ev, 
		somf_TSortedSequenceNode* n1, 
		somf_MOrderableCollectible* obj)
{
/*
 *  Initialize the new TSortedSequenceNode
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,somf_TSortedSequenceNode,somfTSortedSequenceNodeInitTM)
	(this, ev,n1,obj);
}


/* method: somfTSortedSequenceNodeInitT */
somf_TSortedSequenceNode*   somfTSortedSequenceNodeInitT(Environment *ev, 
		somf_TSortedSequenceNode* n1)
{
/*
 *  Initialize the new TSortedSequenceNode
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,somf_TSortedSequenceNode,somfTSortedSequenceNodeInitT)
	(this, ev,n1);
}


/* method: somfGetLeftChild */
somf_TSortedSequenceNode*   somfGetLeftChild(Environment *ev)
{
/*
 *  Determine the left child of the node.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,somf_TSortedSequenceNode,somfGetLeftChild)
	(this, ev);
}


/* method: somfGetRightChild */
somf_TSortedSequenceNode*   somfGetRightChild(Environment *ev)
{
/*
 *  Determine the right child of the node.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,somf_TSortedSequenceNode,somfGetRightChild)
	(this, ev);
}


/* method: somfGetParent */
somf_TSortedSequenceNode*   somfGetParent(Environment *ev)
{
/*
 *  Determine the parent of the node.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,somf_TSortedSequenceNode,somfGetParent)
	(this, ev);
}


/* method: somfGetKey */
somf_MOrderableCollectible*   somfGetKey(Environment *ev)
{
/*
 *  Determine the key to the node.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,somf_TSortedSequenceNode,somfGetKey)
	(this, ev);
}


/* method: somfGetRed */
boolean   somfGetRed(Environment *ev)
{
/*
 *  Determine if the node is red or black.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,somf_TSortedSequenceNode,somfGetRed)
	(this, ev);
}


/* method: somfSetParent */
void   somfSetParent(Environment *ev, 
		somf_TSortedSequenceNode* n)
{
/*
 *  Set the parent of the node.
 */
   SOM_ResolveD(this,somf_TSortedSequenceNode,somf_TSortedSequenceNode,somfSetParent)
	(this, ev,n);
}


/* method: somfSetLeftChild */
void   somfSetLeftChild(Environment *ev, 
		somf_TSortedSequenceNode* n)
{
/*
 *  Set the left child of the node.
 */
   SOM_ResolveD(this,somf_TSortedSequenceNode,somf_TSortedSequenceNode,somfSetLeftChild)
	(this, ev,n);
}


/* method: somfSetRightChild */
void   somfSetRightChild(Environment *ev, 
		somf_TSortedSequenceNode* n)
{
/*
 *  Set the right child of the node.
 */
   SOM_ResolveD(this,somf_TSortedSequenceNode,somf_TSortedSequenceNode,somfSetRightChild)
	(this, ev,n);
}


/* method: somfSetKey */
void   somfSetKey(Environment *ev, 
		somf_MOrderableCollectible* k)
{
/*
 *  Set the key to the node.
 */
   SOM_ResolveD(this,somf_TSortedSequenceNode,somf_TSortedSequenceNode,somfSetKey)
	(this, ev,k);
}


/* method: somfSetRed */
void   somfSetRed(Environment *ev, 
		boolean on)
{
/*
 *  Set the node to red or black.
 */
   SOM_ResolveD(this,somf_TSortedSequenceNode,somf_TSortedSequenceNode,somfSetRed)
	(this, ev,on);
}


/* method: somfSetRedOn */
void   somfSetRedOn(Environment *ev)
{
/*
 *  Set the node to red.
 */
   SOM_ResolveD(this,somf_TSortedSequenceNode,somf_TSortedSequenceNode,somfSetRedOn)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
somf_TSortedSequenceNode*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
somf_TSortedSequenceNode*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
somf_TSortedSequenceNode*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
somf_TSortedSequenceNode*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   somf_TSortedSequenceNode_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   somf_TSortedSequenceNode_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   somf_TSortedSequenceNode_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   somf_TSortedSequenceNode_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   somf_TSortedSequenceNode_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   somf_TSortedSequenceNode_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,somf_TSortedSequenceNode,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* somf_TSortedSequenceNode */



#endif       /* SOM_somf_TSortedSequenceNode_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: po.h.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emith: 2.47
 */

/*
 *    COMPONENT_NAME: somp
 * 
 *    ORIGINS: 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1994,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMPPersistentObject_h
#define SOM_SOMPPersistentObject_h


#include <som.h>

/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * Define the class name as an object type
 */
#ifndef SOMPPersistentObject
#define SOMPPersistentObject SOMObject
#endif
/*
 *                    PERSISTENT OBJECT METACLASS
 * 
 */
#include <somobj.h>

/*
 * Start of bindings for IDL types
 */

#ifndef SOMClass
    #define SOMClass SOMObject
#endif /* SOMClass */
#ifndef SOMPIdAssigner
    #define SOMPIdAssigner SOMObject
#endif /* SOMPIdAssigner */
#ifndef SOMPEncoderDecoderAbstract
    #define SOMPEncoderDecoderAbstract SOMObject
#endif /* SOMPEncoderDecoderAbstract */
#ifndef SOMPIOGroup
    #define SOMPIOGroup SOMObject
#endif /* SOMPIOGroup */
#ifndef SOMPPersistentId
    #define SOMPPersistentId SOMObject
#endif /* SOMPPersistentId */
#ifndef M_SOMPPersistentObject
    #define M_SOMPPersistentObject SOMObject
#endif /* M_SOMPPersistentObject */
#define SOMPPersistentObject_SOMP_STATE_UNDEFINED 32768 /* 0x8000 */
#define SOMPPersistentObject_SOMP_STATE_UNSTABLE 16384 /* 0x4000 */
#define SOMPPersistentObject_SOMP_STATE_STABLE 4096 /* 0x1000 */
#define SOMPPersistentObject_SOMP_STATE_DIRTY 2048 /* 0x0800 */
#define SOMPPersistentObject_SOMP_STATE_COMPACT 1024 /* 0x0400 */

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_SOMP_STATE_UNDEFINED
    #ifdef SOMP_STATE_UNDEFINED
        #undef SOMP_STATE_UNDEFINED
        #define SOMTGD_SOMP_STATE_UNDEFINED 1
    #else
        #define SOMP_STATE_UNDEFINED SOMPPersistentObject_SOMP_STATE_UNDEFINED
    #endif /* SOMP_STATE_UNDEFINED */
#endif /* SOMTGD_SOMP_STATE_UNDEFINED */
#ifndef SOMTGD_SOMP_STATE_UNSTABLE
    #ifdef SOMP_STATE_UNSTABLE
        #undef SOMP_STATE_UNSTABLE
        #define SOMTGD_SOMP_STATE_UNSTABLE 1
    #else
        #define SOMP_STATE_UNSTABLE SOMPPersistentObject_SOMP_STATE_UNSTABLE
    #endif /* SOMP_STATE_UNSTABLE */
#endif /* SOMTGD_SOMP_STATE_UNSTABLE */
#ifndef SOMTGD_SOMP_STATE_STABLE
    #ifdef SOMP_STATE_STABLE
        #undef SOMP_STATE_STABLE
        #define SOMTGD_SOMP_STATE_STABLE 1
    #else
        #define SOMP_STATE_STABLE SOMPPersistentObject_SOMP_STATE_STABLE
    #endif /* SOMP_STATE_STABLE */
#endif /* SOMTGD_SOMP_STATE_STABLE */
#ifndef SOMTGD_SOMP_STATE_DIRTY
    #ifdef SOMP_STATE_DIRTY
        #undef SOMP_STATE_DIRTY
        #define SOMTGD_SOMP_STATE_DIRTY 1
    #else
        #define SOMP_STATE_DIRTY SOMPPersistentObject_SOMP_STATE_DIRTY
    #endif /* SOMP_STATE_DIRTY */
#endif /* SOMTGD_SOMP_STATE_DIRTY */
#ifndef SOMTGD_SOMP_STATE_COMPACT
    #ifdef SOMP_STATE_COMPACT
        #undef SOMP_STATE_COMPACT
        #define SOMTGD_SOMP_STATE_COMPACT 1
    #else
        #define SOMP_STATE_COMPACT SOMPPersistentObject_SOMP_STATE_COMPACT
    #endif /* SOMP_STATE_COMPACT */
#endif /* SOMTGD_SOMP_STATE_COMPACT */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

#define SOMPPersistentObject_MajorVersion 2
#define SOMPPersistentObject_MinorVersion 1

/*
 * External name shortening if required
 */
#ifdef SOM_USE_SHORT_EXTERNAL_NAMES
#define SOMPPersistentObjectNewClass c
#pragma linkage(c, system)
#define SOMPPersistentObjectClassData d
#define SOMPPersistentObjectCClassData x
#endif /* SOM_USE_SHORT_EXTERNAL_NAMES */
/*--------------Migration------------*/
#define SOMPPersistentObject_classObj SOMPPersistentObjectClassData.classObject
#define _SOMPPersistentObject SOMPPersistentObject_classObj

/*
 * Declare the class creation procedure
 */
SOMEXTERN SOMClass * SOMLINK SOMPPersistentObjectNewClass(integer4 somtmajorVersion,
		integer4 somtminorVersion);
#pragma linkage(SOMPPersistentObjectNewClass, system)

/*
 * Declare the class data structure
 */
SOMEXTERN struct SOMPPersistentObjectClassDataStructure {
	SOMClass *classObject;
	somMToken sompInitNextAvail;
	somMToken sompInitNearObject;
	somMToken sompInitGivenId;
	somMToken sompGetPersistentId;
	somMToken sompGetPersistentIdString;
	somMToken sompSetEncoderDecoderName;
	somMToken sompGetEncoderDecoderName;
	somMToken sompRegisterPersistentPointer;
	somMToken sompUnRegisterPersistentPointer;
	somMToken sompPersistentPointerCount;
	somMToken sompGetNthPersistentPointer;
	somMToken sompEquals;
	somMToken sompPassivate;
	somMToken sompActivated;
	somMToken sompGetRelativeIdString;
	somMToken sompUnInitIOGroup;
	somMToken sompSetDirty;
	somMToken sompMarkForCompaction;
	somMToken sompSetState;
	somMToken sompCheckState;
	somMToken sompClearState;
	somMToken sompInitIOGroup;
	somMToken sompGetEncoderDecoder;
	somMToken sompFreeEncoderDecoder;
	somMToken sompGetIOGroup;
	somMToken sompSetIOGroup;
	somMToken sompGetStoredLength;
	somMToken sompSetStoredLength;
	somMToken sompGetMIOffset;
	somMToken sompSetMIOffset;
	somMToken sompIsDirty;
	somMToken sompGetDirty;
} SOMDLINK SOMPPersistentObjectClassData;

/*
 * Declare the C specific class data structure
 */
SOMEXTERN struct SOMPPersistentObjectCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} SOMDLINK SOMPPersistentObjectCClassData;

/*
 * New and Renew macros for SOMPPersistentObject
 */
#define SOMPPersistentObjectNew() \
   ( _SOMPPersistentObject ? \
	_somNew(_SOMPPersistentObject) \
	: ( SOMPPersistentObjectNewClass(\
		SOMPPersistentObject_MajorVersion, \
		SOMPPersistentObject_MinorVersion),\
	   _somNew(_SOMPPersistentObject)))
#define SOMPPersistentObjectRenew(buf) \
   ( _SOMPPersistentObject ? \
	_somRenew(_SOMPPersistentObject, buf) \
	: ( SOMPPersistentObjectNewClass(\
		SOMPPersistentObject_MajorVersion, \
		SOMPPersistentObject_MinorVersion),\
	   _somRenew(_SOMPPersistentObject, buf)))

/*
 * Override method: somDumpSelfInt
 */
#define SOMPPersistentObject_somDumpSelfInt(somSelf,level) \
	SOMObject_somDumpSelfInt(somSelf,level)

/*
 * Override method: somInit
 */
#define SOMPPersistentObject_somInit(somSelf) \
	SOMObject_somInit(somSelf)

/*
 * Override method: somUninit
 */
#define SOMPPersistentObject_somUninit(somSelf) \
	SOMObject_somUninit(somSelf)

/*
 * New Method: sompInitNextAvail
 */
typedef void   SOMLINK somTP_SOMPPersistentObject_sompInitNextAvail(SOMPPersistentObject *somSelf, Environment *ev, 
		SOMPIdAssigner* thisAssigner);
#pragma linkage(somTP_SOMPPersistentObject_sompInitNextAvail, system)
typedef somTP_SOMPPersistentObject_sompInitNextAvail *somTD_SOMPPersistentObject_sompInitNextAvail;
#define somMD_SOMPPersistentObject_sompInitNextAvail "::SOMPPersistentObject::sompInitNextAvail"
#define SOMPPersistentObject_sompInitNextAvail(somSelf,ev,thisAssigner) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompInitNextAvail) \
	(somSelf,ev,thisAssigner))
#ifndef SOMGD_sompInitNextAvail
    #if (defined(_sompInitNextAvail) || defined(__sompInitNextAvail))
        #undef _sompInitNextAvail
        #undef __sompInitNextAvail
        #define SOMGD_sompInitNextAvail 1
    #else
        #define _sompInitNextAvail SOMPPersistentObject_sompInitNextAvail
    #endif /* _sompInitNextAvail */
#endif /* SOMGD_sompInitNextAvail */

/*
 * New Method: sompInitNearObject
 */
typedef void   SOMLINK somTP_SOMPPersistentObject_sompInitNearObject(SOMPPersistentObject *somSelf, Environment *ev, 
		SOMPPersistentObject* nearObject);
#pragma linkage(somTP_SOMPPersistentObject_sompInitNearObject, system)
typedef somTP_SOMPPersistentObject_sompInitNearObject *somTD_SOMPPersistentObject_sompInitNearObject;
#define somMD_SOMPPersistentObject_sompInitNearObject "::SOMPPersistentObject::sompInitNearObject"
#define SOMPPersistentObject_sompInitNearObject(somSelf,ev,nearObject) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompInitNearObject) \
	(somSelf,ev,nearObject))
#ifndef SOMGD_sompInitNearObject
    #if (defined(_sompInitNearObject) || defined(__sompInitNearObject))
        #undef _sompInitNearObject
        #undef __sompInitNearObject
        #define SOMGD_sompInitNearObject 1
    #else
        #define _sompInitNearObject SOMPPersistentObject_sompInitNearObject
    #endif /* _sompInitNearObject */
#endif /* SOMGD_sompInitNearObject */

/*
 * New Method: sompInitGivenId
 */
typedef void   SOMLINK somTP_SOMPPersistentObject_sompInitGivenId(SOMPPersistentObject *somSelf, Environment *ev, 
		SOMPPersistentId* thisId);
#pragma linkage(somTP_SOMPPersistentObject_sompInitGivenId, system)
typedef somTP_SOMPPersistentObject_sompInitGivenId *somTD_SOMPPersistentObject_sompInitGivenId;
#define somMD_SOMPPersistentObject_sompInitGivenId "::SOMPPersistentObject::sompInitGivenId"
#define SOMPPersistentObject_sompInitGivenId(somSelf,ev,thisId) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompInitGivenId) \
	(somSelf,ev,thisId))
#ifndef SOMGD_sompInitGivenId
    #if (defined(_sompInitGivenId) || defined(__sompInitGivenId))
        #undef _sompInitGivenId
        #undef __sompInitGivenId
        #define SOMGD_sompInitGivenId 1
    #else
        #define _sompInitGivenId SOMPPersistentObject_sompInitGivenId
    #endif /* _sompInitGivenId */
#endif /* SOMGD_sompInitGivenId */

/*
 * New Method: sompGetPersistentId
 */
typedef SOMPPersistentId*   SOMLINK somTP_SOMPPersistentObject_sompGetPersistentId(SOMPPersistentObject *somSelf, Environment *ev);
#pragma linkage(somTP_SOMPPersistentObject_sompGetPersistentId, system)
typedef somTP_SOMPPersistentObject_sompGetPersistentId *somTD_SOMPPersistentObject_sompGetPersistentId;
#define somMD_SOMPPersistentObject_sompGetPersistentId "::SOMPPersistentObject::sompGetPersistentId"
#define SOMPPersistentObject_sompGetPersistentId(somSelf,ev) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompGetPersistentId) \
	(somSelf,ev))
#ifndef SOMGD_sompGetPersistentId
    #if (defined(_sompGetPersistentId) || defined(__sompGetPersistentId))
        #undef _sompGetPersistentId
        #undef __sompGetPersistentId
        #define SOMGD_sompGetPersistentId 1
    #else
        #define _sompGetPersistentId SOMPPersistentObject_sompGetPersistentId
    #endif /* _sompGetPersistentId */
#endif /* SOMGD_sompGetPersistentId */

/*
 * New Method: sompGetPersistentIdString
 */
typedef string   SOMLINK somTP_SOMPPersistentObject_sompGetPersistentIdString(SOMPPersistentObject *somSelf, Environment *ev, 
		string outBuff);
#pragma linkage(somTP_SOMPPersistentObject_sompGetPersistentIdString, system)
typedef somTP_SOMPPersistentObject_sompGetPersistentIdString *somTD_SOMPPersistentObject_sompGetPersistentIdString;
/*
 *  Get persistent ID. Returns string representation of persistent ID.
 *  Puts the fully-qualified persistent object ID in the caller-supplied
 *  buffer.  (The caller must allocate the memory for the buffer, and
 *  is also responsible for freeing it when appropriate.)
 */
#define somMD_SOMPPersistentObject_sompGetPersistentIdString "::SOMPPersistentObject::sompGetPersistentIdString"
#define SOMPPersistentObject_sompGetPersistentIdString(somSelf,ev,outBuff) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompGetPersistentIdString) \
	(somSelf,ev,outBuff))
#ifndef SOMGD_sompGetPersistentIdString
    #if (defined(_sompGetPersistentIdString) || defined(__sompGetPersistentIdString))
        #undef _sompGetPersistentIdString
        #undef __sompGetPersistentIdString
        #define SOMGD_sompGetPersistentIdString 1
    #else
        #define _sompGetPersistentIdString SOMPPersistentObject_sompGetPersistentIdString
    #endif /* _sompGetPersistentIdString */
#endif /* SOMGD_sompGetPersistentIdString */

/*
 * New Method: sompSetEncoderDecoderName
 */
typedef void   SOMLINK somTP_SOMPPersistentObject_sompSetEncoderDecoderName(SOMPPersistentObject *somSelf, Environment *ev, 
		string myName);
#pragma linkage(somTP_SOMPPersistentObject_sompSetEncoderDecoderName, system)
typedef somTP_SOMPPersistentObject_sompSetEncoderDecoderName *somTD_SOMPPersistentObject_sompSetEncoderDecoderName;
/*
 *  Set the class name of the EncoderDecoder.
 *  If this method is not called, the encoder/decoder class name is the
 *  one returned by the class object.
 */
#define somMD_SOMPPersistentObject_sompSetEncoderDecoderName "::SOMPPersistentObject::sompSetEncoderDecoderName"
#define SOMPPersistentObject_sompSetEncoderDecoderName(somSelf,ev,myName) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompSetEncoderDecoderName) \
	(somSelf,ev,myName))
#ifndef SOMGD_sompSetEncoderDecoderName
    #if (defined(_sompSetEncoderDecoderName) || defined(__sompSetEncoderDecoderName))
        #undef _sompSetEncoderDecoderName
        #undef __sompSetEncoderDecoderName
        #define SOMGD_sompSetEncoderDecoderName 1
    #else
        #define _sompSetEncoderDecoderName SOMPPersistentObject_sompSetEncoderDecoderName
    #endif /* _sompSetEncoderDecoderName */
#endif /* SOMGD_sompSetEncoderDecoderName */

/*
 * New Method: sompGetEncoderDecoderName
 */
typedef string   SOMLINK somTP_SOMPPersistentObject_sompGetEncoderDecoderName(SOMPPersistentObject *somSelf, Environment *ev);
#pragma linkage(somTP_SOMPPersistentObject_sompGetEncoderDecoderName, system)
typedef somTP_SOMPPersistentObject_sompGetEncoderDecoderName *somTD_SOMPPersistentObject_sompGetEncoderDecoderName;
/*
 *  Get the class name of the EncoderDecoder
 */
#define somMD_SOMPPersistentObject_sompGetEncoderDecoderName "::SOMPPersistentObject::sompGetEncoderDecoderName"
#define SOMPPersistentObject_sompGetEncoderDecoderName(somSelf,ev) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompGetEncoderDecoderName) \
	(somSelf,ev))
#ifndef SOMGD_sompGetEncoderDecoderName
    #if (defined(_sompGetEncoderDecoderName) || defined(__sompGetEncoderDecoderName))
        #undef _sompGetEncoderDecoderName
        #undef __sompGetEncoderDecoderName
        #define SOMGD_sompGetEncoderDecoderName 1
    #else
        #define _sompGetEncoderDecoderName SOMPPersistentObject_sompGetEncoderDecoderName
    #endif /* _sompGetEncoderDecoderName */
#endif /* SOMGD_sompGetEncoderDecoderName */

/*
 * New Method: sompEquals
 */
typedef boolean   SOMLINK somTP_SOMPPersistentObject_sompEquals(SOMPPersistentObject *somSelf, Environment *ev, 
		SOMPPersistentId* otherId);
#pragma linkage(somTP_SOMPPersistentObject_sompEquals, system)
typedef somTP_SOMPPersistentObject_sompEquals *somTD_SOMPPersistentObject_sompEquals;
/*
 *  Checks to see if this object's ID is equivalent to the given ID.
 *  Returns TRUE if the ID's are equivalent, FALSE otherwise.
 */
#define somMD_SOMPPersistentObject_sompEquals "::SOMPPersistentObject::sompEquals"
#define SOMPPersistentObject_sompEquals(somSelf,ev,otherId) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompEquals) \
	(somSelf,ev,otherId))
#ifndef SOMGD_sompEquals
    #if (defined(_sompEquals) || defined(__sompEquals))
        #undef _sompEquals
        #undef __sompEquals
        #define SOMGD_sompEquals 1
    #else
        #define _sompEquals SOMPPersistentObject_sompEquals
    #endif /* _sompEquals */
#endif /* SOMGD_sompEquals */

/*
 * New Method: sompPassivate
 */
typedef void   SOMLINK somTP_SOMPPersistentObject_sompPassivate(SOMPPersistentObject *somSelf, Environment *ev);
#pragma linkage(somTP_SOMPPersistentObject_sompPassivate, system)
typedef somTP_SOMPPersistentObject_sompPassivate *somTD_SOMPPersistentObject_sompPassivate;
/*
 *  This method is called by the persistence framework just prior
 *  to saving a persistent object.  It provides a means for a
 *  client to tidy up any data necessary in the persistent object
 *  (or its embedded objects) before the save operation is
 *  completed.  This method does nothing if not overridden by the
 *  client.
 */
#define somMD_SOMPPersistentObject_sompPassivate "::SOMPPersistentObject::sompPassivate"
#define SOMPPersistentObject_sompPassivate(somSelf,ev) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompPassivate) \
	(somSelf,ev))
#ifndef SOMGD_sompPassivate
    #if (defined(_sompPassivate) || defined(__sompPassivate))
        #undef _sompPassivate
        #undef __sompPassivate
        #define SOMGD_sompPassivate 1
    #else
        #define _sompPassivate SOMPPersistentObject_sompPassivate
    #endif /* _sompPassivate */
#endif /* SOMGD_sompPassivate */

/*
 * New Method: sompActivated
 */
typedef void   SOMLINK somTP_SOMPPersistentObject_sompActivated(SOMPPersistentObject *somSelf, Environment *ev);
#pragma linkage(somTP_SOMPPersistentObject_sompActivated, system)
typedef somTP_SOMPPersistentObject_sompActivated *somTD_SOMPPersistentObject_sompActivated;
/*
 *  This method is called by the persistence framework after a
 *  persistent object is restored.  It provides a means for a client
 *  to perform any initializations prior to the use of the persistent
 *  object. That is, make the object useable. If not overridden, this
 *  method sets the state of the object to POSTATE_STABLE.
 */
#define somMD_SOMPPersistentObject_sompActivated "::SOMPPersistentObject::sompActivated"
#define SOMPPersistentObject_sompActivated(somSelf,ev) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompActivated) \
	(somSelf,ev))
#ifndef SOMGD_sompActivated
    #if (defined(_sompActivated) || defined(__sompActivated))
        #undef _sompActivated
        #undef __sompActivated
        #define SOMGD_sompActivated 1
    #else
        #define _sompActivated SOMPPersistentObject_sompActivated
    #endif /* _sompActivated */
#endif /* SOMGD_sompActivated */

/*
 * New Method: sompGetRelativeIdString
 */
typedef string   SOMLINK somTP_SOMPPersistentObject_sompGetRelativeIdString(SOMPPersistentObject *somSelf, Environment *ev, 
		SOMObject* ifNearThisObject, 
		string relativeIdString);
#pragma linkage(somTP_SOMPPersistentObject_sompGetRelativeIdString, system)
typedef somTP_SOMPPersistentObject_sompGetRelativeIdString *somTD_SOMPPersistentObject_sompGetRelativeIdString;
/*
 *  if the persistent object is in the same IOGroup as <ifNearThisObject>,
 *  places an Id string of the form:
 * 
 *             <IOGroupMgrClassName>:$RELATIVE:<offset>
 * 
 *  in relativeIdString, else places a fully-qualified Id of the form:
 * 
 *             <IOGroupMgrClassName>:<path/filename>:<offset>
 * 
 *  in relativeIdString.  Returns pointer to relativeIdString through the
 *  operation name.  Note: the caller must allocate relativeIdString prior
 *  to invoking the operation.
 */
#define somMD_SOMPPersistentObject_sompGetRelativeIdString "::SOMPPersistentObject::sompGetRelativeIdString"
#define SOMPPersistentObject_sompGetRelativeIdString(somSelf,ev,ifNearThisObject,relativeIdString) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompGetRelativeIdString) \
	(somSelf,ev,ifNearThisObject,relativeIdString))
#ifndef SOMGD_sompGetRelativeIdString
    #if (defined(_sompGetRelativeIdString) || defined(__sompGetRelativeIdString))
        #undef _sompGetRelativeIdString
        #undef __sompGetRelativeIdString
        #define SOMGD_sompGetRelativeIdString 1
    #else
        #define _sompGetRelativeIdString SOMPPersistentObject_sompGetRelativeIdString
    #endif /* _sompGetRelativeIdString */
#endif /* SOMGD_sompGetRelativeIdString */

/*
 * New Method: sompInitIOGroup
 */
typedef SOMPIOGroup*   SOMLINK somTP_SOMPPersistentObject_sompInitIOGroup(SOMPPersistentObject *somSelf, Environment *ev, 
		SOMObject* nearPersistentObj);
#pragma linkage(somTP_SOMPPersistentObject_sompInitIOGroup, system)
typedef somTP_SOMPPersistentObject_sompInitIOGroup *somTD_SOMPPersistentObject_sompInitIOGroup;
/*
 *  Initialize the IO group for this object. (Used at InitPersistentID time)
 *  Each persistent object is a member of an I/O Group. An I/O Group
 *  can consist of one or more persistent objects.
 * 
 *  The I/O Group in which this persistent object is a member is
 *  determined by the "nearPersistentObj" argument.
 *  If given nearPersistentObj is NULL, a new IOGroup may be instantiated.
 *  Otherwise, nearPersistentObj is expected to be a persistent object with
 *  an existing IOGroup. This object is made a member of the
 *  nearPersistentObj I/O Group.
 * 
 *  An I/O Group offset is assigned by this method. This offset may
 *  be returned via sompGetPersistentOffset on the ID of this object.
 */
#define somMD_SOMPPersistentObject_sompInitIOGroup "::SOMPPersistentObject::sompInitIOGroup"
#define SOMPPersistentObject_sompInitIOGroup(somSelf,ev,nearPersistentObj) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompInitIOGroup) \
	(somSelf,ev,nearPersistentObj))
#ifndef SOMGD_sompInitIOGroup
    #if (defined(_sompInitIOGroup) || defined(__sompInitIOGroup))
        #undef _sompInitIOGroup
        #undef __sompInitIOGroup
        #define SOMGD_sompInitIOGroup 1
    #else
        #define _sompInitIOGroup SOMPPersistentObject_sompInitIOGroup
    #endif /* _sompInitIOGroup */
#endif /* SOMGD_sompInitIOGroup */

/*
 * New Method: sompSetDirty
 */
typedef void   SOMLINK somTP_SOMPPersistentObject_sompSetDirty(SOMPPersistentObject *somSelf, Environment *ev);
#pragma linkage(somTP_SOMPPersistentObject_sompSetDirty, system)
typedef somTP_SOMPPersistentObject_sompSetDirty *somTD_SOMPPersistentObject_sompSetDirty;
/*
 *  Sets the state of an object to dirty.  Front method for SetState.
 */
#define somMD_SOMPPersistentObject_sompSetDirty "::SOMPPersistentObject::sompSetDirty"
#define SOMPPersistentObject_sompSetDirty(somSelf,ev) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompSetDirty) \
	(somSelf,ev))
#ifndef SOMGD_sompSetDirty
    #if (defined(_sompSetDirty) || defined(__sompSetDirty))
        #undef _sompSetDirty
        #undef __sompSetDirty
        #define SOMGD_sompSetDirty 1
    #else
        #define _sompSetDirty SOMPPersistentObject_sompSetDirty
    #endif /* _sompSetDirty */
#endif /* SOMGD_sompSetDirty */

/*
 * New Method: sompIsDirty
 */
typedef boolean   SOMLINK somTP_SOMPPersistentObject_sompIsDirty(SOMPPersistentObject *somSelf, Environment *ev);
#pragma linkage(somTP_SOMPPersistentObject_sompIsDirty, system)
typedef somTP_SOMPPersistentObject_sompIsDirty *somTD_SOMPPersistentObject_sompIsDirty;
/*
 *  This is used for optimization.  The default always returns TRUE.  Optimized
 *  persistent objects can override this to return sompGetDirty(), and then
 *  be sure to invoke sompSetDirty() whenever the object is updated.
 */
#define somMD_SOMPPersistentObject_sompIsDirty "::SOMPPersistentObject::sompIsDirty"
#define SOMPPersistentObject_sompIsDirty(somSelf,ev) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompIsDirty) \
	(somSelf,ev))
#ifndef SOMGD_sompIsDirty
    #if (defined(_sompIsDirty) || defined(__sompIsDirty))
        #undef _sompIsDirty
        #undef __sompIsDirty
        #define SOMGD_sompIsDirty 1
    #else
        #define _sompIsDirty SOMPPersistentObject_sompIsDirty
    #endif /* _sompIsDirty */
#endif /* SOMGD_sompIsDirty */

/*
 * New Method: sompGetDirty
 */
typedef boolean   SOMLINK somTP_SOMPPersistentObject_sompGetDirty(SOMPPersistentObject *somSelf, Environment *ev);
#pragma linkage(somTP_SOMPPersistentObject_sompGetDirty, system)
typedef somTP_SOMPPersistentObject_sompGetDirty *somTD_SOMPPersistentObject_sompGetDirty;
/*
 *  This returns TRUE if the dirty bit is set, FALSE otherwise.
 */
#define somMD_SOMPPersistentObject_sompGetDirty "::SOMPPersistentObject::sompGetDirty"
#define SOMPPersistentObject_sompGetDirty(somSelf,ev) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompGetDirty) \
	(somSelf,ev))
#ifndef SOMGD_sompGetDirty
    #if (defined(_sompGetDirty) || defined(__sompGetDirty))
        #undef _sompGetDirty
        #undef __sompGetDirty
        #define SOMGD_sompGetDirty 1
    #else
        #define _sompGetDirty SOMPPersistentObject_sompGetDirty
    #endif /* _sompGetDirty */
#endif /* SOMGD_sompGetDirty */

/*
 * New Method: sompMarkForCompaction
 */
typedef void   SOMLINK somTP_SOMPPersistentObject_sompMarkForCompaction(SOMPPersistentObject *somSelf, Environment *ev);
#pragma linkage(somTP_SOMPPersistentObject_sompMarkForCompaction, system)
typedef somTP_SOMPPersistentObject_sompMarkForCompaction *somTD_SOMPPersistentObject_sompMarkForCompaction;
/*
 *  Note to the Persistence Framework that the next time this object is
 *  saved, the entire IO Group should be compacted, if possible.
 */
#define somMD_SOMPPersistentObject_sompMarkForCompaction "::SOMPPersistentObject::sompMarkForCompaction"
#define SOMPPersistentObject_sompMarkForCompaction(somSelf,ev) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompMarkForCompaction) \
	(somSelf,ev))
#ifndef SOMGD_sompMarkForCompaction
    #if (defined(_sompMarkForCompaction) || defined(__sompMarkForCompaction))
        #undef _sompMarkForCompaction
        #undef __sompMarkForCompaction
        #define SOMGD_sompMarkForCompaction 1
    #else
        #define _sompMarkForCompaction SOMPPersistentObject_sompMarkForCompaction
    #endif /* _sompMarkForCompaction */
#endif /* SOMGD_sompMarkForCompaction */

/*
 * New Method: sompSetState
 */
typedef void   SOMLINK somTP_SOMPPersistentObject_sompSetState(SOMPPersistentObject *somSelf, Environment *ev, 
		unsigned short state);
#pragma linkage(somTP_SOMPPersistentObject_sompSetState, system)
typedef somTP_SOMPPersistentObject_sompSetState *somTD_SOMPPersistentObject_sompSetState;
/*
 *  Sets specified state.
 *  See po.csc for a description of the possible states.
 */
#define somMD_SOMPPersistentObject_sompSetState "::SOMPPersistentObject::sompSetState"
#define SOMPPersistentObject_sompSetState(somSelf,ev,state) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompSetState) \
	(somSelf,ev,state))
#ifndef SOMGD_sompSetState
    #if (defined(_sompSetState) || defined(__sompSetState))
        #undef _sompSetState
        #undef __sompSetState
        #define SOMGD_sompSetState 1
    #else
        #define _sompSetState SOMPPersistentObject_sompSetState
    #endif /* _sompSetState */
#endif /* SOMGD_sompSetState */

/*
 * New Method: sompCheckState
 */
typedef boolean   SOMLINK somTP_SOMPPersistentObject_sompCheckState(SOMPPersistentObject *somSelf, Environment *ev, 
		unsigned short state);
#pragma linkage(somTP_SOMPPersistentObject_sompCheckState, system)
typedef somTP_SOMPPersistentObject_sompCheckState *somTD_SOMPPersistentObject_sompCheckState;
/*
 *  Returns TRUE if given state is true for this object.
 *  See po.csc for a description of the possible states.
 */
#define somMD_SOMPPersistentObject_sompCheckState "::SOMPPersistentObject::sompCheckState"
#define SOMPPersistentObject_sompCheckState(somSelf,ev,state) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompCheckState) \
	(somSelf,ev,state))
#ifndef SOMGD_sompCheckState
    #if (defined(_sompCheckState) || defined(__sompCheckState))
        #undef _sompCheckState
        #undef __sompCheckState
        #define SOMGD_sompCheckState 1
    #else
        #define _sompCheckState SOMPPersistentObject_sompCheckState
    #endif /* _sompCheckState */
#endif /* SOMGD_sompCheckState */

/*
 * New Method: sompClearState
 */
typedef void   SOMLINK somTP_SOMPPersistentObject_sompClearState(SOMPPersistentObject *somSelf, Environment *ev, 
		unsigned short state);
#pragma linkage(somTP_SOMPPersistentObject_sompClearState, system)
typedef somTP_SOMPPersistentObject_sompClearState *somTD_SOMPPersistentObject_sompClearState;
/*
 *  Clears specified state.
 */
#define somMD_SOMPPersistentObject_sompClearState "::SOMPPersistentObject::sompClearState"
#define SOMPPersistentObject_sompClearState(somSelf,ev,state) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompClearState) \
	(somSelf,ev,state))
#ifndef SOMGD_sompClearState
    #if (defined(_sompClearState) || defined(__sompClearState))
        #undef _sompClearState
        #undef __sompClearState
        #define SOMGD_sompClearState 1
    #else
        #define _sompClearState SOMPPersistentObject_sompClearState
    #endif /* _sompClearState */
#endif /* SOMGD_sompClearState */

/*
 * New Method: sompGetEncoderDecoder
 */
typedef SOMPEncoderDecoderAbstract*   SOMLINK somTP_SOMPPersistentObject_sompGetEncoderDecoder(SOMPPersistentObject *somSelf, Environment *ev);
#pragma linkage(somTP_SOMPPersistentObject_sompGetEncoderDecoder, system)
typedef somTP_SOMPPersistentObject_sompGetEncoderDecoder *somTD_SOMPPersistentObject_sompGetEncoderDecoder;
/*
 *  If an Encoder/Decoder has not already been instantiated, one
 *  is instantiated. A pointer to the encoder/decoder is
 *  returned. NULL is returned if this object's encoder/decoder
 *  cannot be instantiated.  This method should only be used by the IO Group
 *  Mgr class.
 */
#define somMD_SOMPPersistentObject_sompGetEncoderDecoder "::SOMPPersistentObject::sompGetEncoderDecoder"
#define SOMPPersistentObject_sompGetEncoderDecoder(somSelf,ev) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompGetEncoderDecoder) \
	(somSelf,ev))
#ifndef SOMGD_sompGetEncoderDecoder
    #if (defined(_sompGetEncoderDecoder) || defined(__sompGetEncoderDecoder))
        #undef _sompGetEncoderDecoder
        #undef __sompGetEncoderDecoder
        #define SOMGD_sompGetEncoderDecoder 1
    #else
        #define _sompGetEncoderDecoder SOMPPersistentObject_sompGetEncoderDecoder
    #endif /* _sompGetEncoderDecoder */
#endif /* SOMGD_sompGetEncoderDecoder */

/*
 * New Method: sompFreeEncoderDecoder
 */
typedef void   SOMLINK somTP_SOMPPersistentObject_sompFreeEncoderDecoder(SOMPPersistentObject *somSelf, Environment *ev);
#pragma linkage(somTP_SOMPPersistentObject_sompFreeEncoderDecoder, system)
typedef somTP_SOMPPersistentObject_sompFreeEncoderDecoder *somTD_SOMPPersistentObject_sompFreeEncoderDecoder;
/*
 *  Free this object's encoder/decoder. This method should only be used
 *  by the IO Group Manager class.
 */
#define somMD_SOMPPersistentObject_sompFreeEncoderDecoder "::SOMPPersistentObject::sompFreeEncoderDecoder"
#define SOMPPersistentObject_sompFreeEncoderDecoder(somSelf,ev) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompFreeEncoderDecoder) \
	(somSelf,ev))
#ifndef SOMGD_sompFreeEncoderDecoder
    #if (defined(_sompFreeEncoderDecoder) || defined(__sompFreeEncoderDecoder))
        #undef _sompFreeEncoderDecoder
        #undef __sompFreeEncoderDecoder
        #define SOMGD_sompFreeEncoderDecoder 1
    #else
        #define _sompFreeEncoderDecoder SOMPPersistentObject_sompFreeEncoderDecoder
    #endif /* _sompFreeEncoderDecoder */
#endif /* SOMGD_sompFreeEncoderDecoder */

/*
 * New Method: sompGetIOGroup
 */
typedef SOMPIOGroup*   SOMLINK somTP_SOMPPersistentObject_sompGetIOGroup(SOMPPersistentObject *somSelf, Environment *ev);
#pragma linkage(somTP_SOMPPersistentObject_sompGetIOGroup, system)
typedef somTP_SOMPPersistentObject_sompGetIOGroup *somTD_SOMPPersistentObject_sompGetIOGroup;
/*
 *  Get a pointer to the IOGroup collection object for this object.
 *  Within the returned collection are this object and any objects
 *  initialized near it (with sompInitNearObject). This method is intended
 *  to be use by IO Group Mgr implementors.
 */
#define somMD_SOMPPersistentObject_sompGetIOGroup "::SOMPPersistentObject::sompGetIOGroup"
#define SOMPPersistentObject_sompGetIOGroup(somSelf,ev) \
    (SOM_Resolve(somSelf, SOMPPersistentObject, sompGetIOGroup) \
	(somSelf,ev))
#ifndef SOMGD_sompGetIOGroup
    #if (defined(_sompGetIOGroup) || defined(__sompGetIOGroup))
        #undef _sompGetIOGroup
        #undef __sompGetIOGroup
        #define SOMGD_sompGetIOGroup 1
    #else
        #define _sompGetIOGroup SOMPPersistentObject_sompGetIOGroup
    #endif /* _sompGetIOGroup */
#endif /* SOMGD_sompGetIOGroup */
#ifndef SOM_DONT_USE_INHERITED_MACROS
#define SOMPPersistentObject_somDefaultInit SOMObject_somDefaultInit
#define SOMPPersistentObject_somDestruct SOMObject_somDestruct
#define SOMPPersistentObject_somDefaultCopyInit SOMObject_somDefaultCopyInit
#define SOMPPersistentObject_somDefaultAssign SOMObject_somDefaultAssign
#define SOMPPersistentObject_somDefaultConstCopyInit SOMObject_somDefaultConstCopyInit
#define SOMPPersistentObject_somDefaultVCopyInit SOMObject_somDefaultVCopyInit
#define SOMPPersistentObject_somDefaultConstVCopyInit SOMObject_somDefaultConstVCopyInit
#define SOMPPersistentObject_somDefaultConstAssign SOMObject_somDefaultConstAssign
#define SOMPPersistentObject_somDefaultVAssign SOMObject_somDefaultVAssign
#define SOMPPersistentObject_somDefaultConstVAssign SOMObject_somDefaultConstVAssign
#define SOMPPersistentObject_somFree SOMObject_somFree
#define SOMPPersistentObject_somGetClass SOMObject_somGetClass
#define SOMPPersistentObject_somGetClassName SOMObject_somGetClassName
#define SOMPPersistentObject_somGetSize SOMObject_somGetSize
#define SOMPPersistentObject_somIsA SOMObject_somIsA
#define SOMPPersistentObject_somIsInstanceOf SOMObject_somIsInstanceOf
#define SOMPPersistentObject_somRespondsTo SOMObject_somRespondsTo
#define SOMPPersistentObject_somDispatch SOMObject_somDispatch
#define SOMPPersistentObject_somClassDispatch SOMObject_somClassDispatch
#define SOMPPersistentObject_somCastObj SOMObject_somCastObj
#define SOMPPersistentObject_somResetObj SOMObject_somResetObj
#define SOMPPersistentObject_somDispatchV SOMObject_somDispatchV
#define SOMPPersistentObject_somDispatchL SOMObject_somDispatchL
#define SOMPPersistentObject_somDispatchA SOMObject_somDispatchA
#define SOMPPersistentObject_somDispatchD SOMObject_somDispatchD
#define SOMPPersistentObject_somPrintSelf SOMObject_somPrintSelf
#define SOMPPersistentObject_somDumpSelf SOMObject_somDumpSelf
#endif /* SOM_DONT_USE_INHERITED_MACROS */

#endif       /* SOM_SOMPPersistentObject_h */

#ifndef SOM_M_SOMPPersistentObject_h
#define SOM_M_SOMPPersistentObject_h


#include <som.h>

/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * Define the class name as an object type
 */
#ifndef M_SOMPPersistentObject
#define M_SOMPPersistentObject SOMObject
#endif
#include <somcls.h>

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

#define M_SOMPPersistentObject_MajorVersion 2
#define M_SOMPPersistentObject_MinorVersion 1

/*
 * External name shortening if required
 */
#ifdef SOM_USE_SHORT_EXTERNAL_NAMES
#define M_SOMPPersistentObjectNewClass c
#pragma linkage(c, system)
#define M_SOMPPersistentObjectClassData d
#define M_SOMPPersistentObjectCClassData x
#endif /* SOM_USE_SHORT_EXTERNAL_NAMES */
/*--------------Migration------------*/
#define M_SOMPPersistentObject_classObj M_SOMPPersistentObjectClassData.classObject
#define _M_SOMPPersistentObject M_SOMPPersistentObject_classObj

/*
 * Declare the class creation procedure
 */
SOMEXTERN SOMClass * SOMLINK M_SOMPPersistentObjectNewClass(integer4 somtmajorVersion,
		integer4 somtminorVersion);
#pragma linkage(M_SOMPPersistentObjectNewClass, system)

/*
 * Declare the class data structure
 */
SOMEXTERN struct M_SOMPPersistentObjectClassDataStructure {
	SOMClass *classObject;
	somMToken sompRegisterEDPair;
	somMToken sompGetTotalEDPairs;
	somMToken sompGetNthEDPair;
	somMToken sompGetNthEDPairObj;
	somMToken sompSetClassLevelEncoderDecoderName;
	somMToken sompGetClassLevelEncoderDecoderName;
} SOMDLINK M_SOMPPersistentObjectClassData;

/*
 * Declare the C specific class data structure
 */
SOMEXTERN struct M_SOMPPersistentObjectCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} SOMDLINK M_SOMPPersistentObjectCClassData;

/*
 * New and Renew macros for M_SOMPPersistentObject
 */
#define M_SOMPPersistentObjectNew() \
   ( _M_SOMPPersistentObject ? \
	_somNew(_M_SOMPPersistentObject) \
	: ( M_SOMPPersistentObjectNewClass(\
		M_SOMPPersistentObject_MajorVersion, \
		M_SOMPPersistentObject_MinorVersion),\
	   _somNew(_M_SOMPPersistentObject)))
#define M_SOMPPersistentObjectRenew(buf) \
   ( _M_SOMPPersistentObject ? \
	_somRenew(_M_SOMPPersistentObject, buf) \
	: ( M_SOMPPersistentObjectNewClass(\
		M_SOMPPersistentObject_MajorVersion, \
		M_SOMPPersistentObject_MinorVersion),\
	   _somRenew(_M_SOMPPersistentObject, buf)))

/*
 * Override method: somInit
 */
#define M_SOMPPersistentObject_somInit(somSelf) \
	SOMObject_somInit(somSelf)

/*
 * New Method: sompSetClassLevelEncoderDecoderName
 */
typedef void   SOMLINK somTP_M_SOMPPersistentObject_sompSetClassLevelEncoderDecoderName(M_SOMPPersistentObject *somSelf, Environment *ev, 
		string myName);
#pragma linkage(somTP_M_SOMPPersistentObject_sompSetClassLevelEncoderDecoderName, system)
typedef somTP_M_SOMPPersistentObject_sompSetClassLevelEncoderDecoderName *somTD_M_SOMPPersistentObject_sompSetClassLevelEncoderDecoderName;
/*
 *  Set Encoder/Decoder name at the class level
 */
#define somMD_M_SOMPPersistentObject_sompSetClassLevelEncoderDecoderName "::M_SOMPPersistentObject::sompSetClassLevelEncoderDecoderName"
#define M_SOMPPersistentObject_sompSetClassLevelEncoderDecoderName(somSelf,ev,myName) \
    (SOM_Resolve(somSelf, M_SOMPPersistentObject, sompSetClassLevelEncoderDecoderName) \
	(somSelf,ev,myName))
#ifndef SOMGD_sompSetClassLevelEncoderDecoderName
    #if (defined(_sompSetClassLevelEncoderDecoderName) || defined(__sompSetClassLevelEncoderDecoderName))
        #undef _sompSetClassLevelEncoderDecoderName
        #undef __sompSetClassLevelEncoderDecoderName
        #define SOMGD_sompSetClassLevelEncoderDecoderName 1
    #else
        #define _sompSetClassLevelEncoderDecoderName M_SOMPPersistentObject_sompSetClassLevelEncoderDecoderName
    #endif /* _sompSetClassLevelEncoderDecoderName */
#endif /* SOMGD_sompSetClassLevelEncoderDecoderName */

/*
 * New Method: sompGetClassLevelEncoderDecoderName
 */
typedef string   SOMLINK somTP_M_SOMPPersistentObject_sompGetClassLevelEncoderDecoderName(M_SOMPPersistentObject *somSelf, Environment *ev);
#pragma linkage(somTP_M_SOMPPersistentObject_sompGetClassLevelEncoderDecoderName, system)
typedef somTP_M_SOMPPersistentObject_sompGetClassLevelEncoderDecoderName *somTD_M_SOMPPersistentObject_sompGetClassLevelEncoderDecoderName;
/*
 *  Get class level Encoder/Decoder name.
 */
#define somMD_M_SOMPPersistentObject_sompGetClassLevelEncoderDecoderName "::M_SOMPPersistentObject::sompGetClassLevelEncoderDecoderName"
#define M_SOMPPersistentObject_sompGetClassLevelEncoderDecoderName(somSelf,ev) \
    (SOM_Resolve(somSelf, M_SOMPPersistentObject, sompGetClassLevelEncoderDecoderName) \
	(somSelf,ev))
#ifndef SOMGD_sompGetClassLevelEncoderDecoderName
    #if (defined(_sompGetClassLevelEncoderDecoderName) || defined(__sompGetClassLevelEncoderDecoderName))
        #undef _sompGetClassLevelEncoderDecoderName
        #undef __sompGetClassLevelEncoderDecoderName
        #define SOMGD_sompGetClassLevelEncoderDecoderName 1
    #else
        #define _sompGetClassLevelEncoderDecoderName M_SOMPPersistentObject_sompGetClassLevelEncoderDecoderName
    #endif /* _sompGetClassLevelEncoderDecoderName */
#endif /* SOMGD_sompGetClassLevelEncoderDecoderName */
#ifndef SOM_DONT_USE_INHERITED_MACROS
#define M_SOMPPersistentObject__get_somDataAlignment SOMClass__get_somDataAlignment
#define M_SOMPPersistentObject__get_somInstanceDataOffsets SOMClass__get_somInstanceDataOffsets
#define M_SOMPPersistentObject__get_somDirectInitClasses SOMClass__get_somDirectInitClasses
#define M_SOMPPersistentObject_somNew SOMClass_somNew
#define M_SOMPPersistentObject_somNewNoInit SOMClass_somNewNoInit
#define M_SOMPPersistentObject_somRenew SOMClass_somRenew
#define M_SOMPPersistentObject_somRenewNoInit SOMClass_somRenewNoInit
#define M_SOMPPersistentObject_somRenewNoZero SOMClass_somRenewNoZero
#define M_SOMPPersistentObject_somRenewNoInitNoZero SOMClass_somRenewNoInitNoZero
#define M_SOMPPersistentObject_somAllocate SOMClass_somAllocate
#define M_SOMPPersistentObject_somDeallocate SOMClass_somDeallocate
#define M_SOMPPersistentObject_somInitClass SOMClass_somInitClass
#define M_SOMPPersistentObject_somInitMIClass SOMClass_somInitMIClass
#define M_SOMPPersistentObject_somAddStaticMethod SOMClass_somAddStaticMethod
#define M_SOMPPersistentObject_somAddDynamicMethod SOMClass_somAddDynamicMethod
#define M_SOMPPersistentObject_somOverrideSMethod SOMClass_somOverrideSMethod
#define M_SOMPPersistentObject_somClassReady SOMClass_somClassReady
#define M_SOMPPersistentObject_somGetApplyStub SOMClass_somGetApplyStub
#define M_SOMPPersistentObject_somGetClassData SOMClass_somGetClassData
#define M_SOMPPersistentObject_somSetClassData SOMClass_somSetClassData
#define M_SOMPPersistentObject_somGetClassMtab SOMClass_somGetClassMtab
#define M_SOMPPersistentObject_somGetInstanceOffset SOMClass_somGetInstanceOffset
#define M_SOMPPersistentObject_somGetInstancePartSize SOMClass_somGetInstancePartSize
#define M_SOMPPersistentObject_somGetInstanceSize SOMClass_somGetInstanceSize
#define M_SOMPPersistentObject_somGetInstanceToken SOMClass_somGetInstanceToken
#define M_SOMPPersistentObject_somGetMemberToken SOMClass_somGetMemberToken
#define M_SOMPPersistentObject_somGetMethodData SOMClass_somGetMethodData
#define M_SOMPPersistentObject_somGetRdStub SOMClass_somGetRdStub
#define M_SOMPPersistentObject_somGetMethodDescriptor SOMClass_somGetMethodDescriptor
#define M_SOMPPersistentObject_somGetMethodIndex SOMClass_somGetMethodIndex
#define M_SOMPPersistentObject_somGetMethodToken SOMClass_somGetMethodToken
#define M_SOMPPersistentObject_somGetName SOMClass_somGetName
#define M_SOMPPersistentObject_somGetNthMethodData SOMClass_somGetNthMethodData
#define M_SOMPPersistentObject_somGetNthMethodInfo SOMClass_somGetNthMethodInfo
#define M_SOMPPersistentObject_somGetNumMethods SOMClass_somGetNumMethods
#define M_SOMPPersistentObject_somGetNumStaticMethods SOMClass_somGetNumStaticMethods
#define M_SOMPPersistentObject_somGetParent SOMClass_somGetParent
#define M_SOMPPersistentObject_somGetParents SOMClass_somGetParents
#define M_SOMPPersistentObject_somGetVersionNumbers SOMClass_somGetVersionNumbers
#define M_SOMPPersistentObject_somFindMethod SOMClass_somFindMethod
#define M_SOMPPersistentObject_somFindMethodOk SOMClass_somFindMethodOk
#define M_SOMPPersistentObject_somFindSMethod SOMClass_somFindSMethod
#define M_SOMPPersistentObject_somFindSMethodOk SOMClass_somFindSMethodOk
#define M_SOMPPersistentObject_somLookupMethod SOMClass_somLookupMethod
#define M_SOMPPersistentObject_somCheckVersion SOMClass_somCheckVersion
#define M_SOMPPersistentObject_somDescendedFrom SOMClass_somDescendedFrom
#define M_SOMPPersistentObject_somSupportsMethod SOMClass_somSupportsMethod
#define M_SOMPPersistentObject_somDefinedMethod SOMClass_somDefinedMethod
#define M_SOMPPersistentObject_somOverrideMtab SOMClass_somOverrideMtab
#define M_SOMPPersistentObject_somDefaultInit SOMObject_somDefaultInit
#define M_SOMPPersistentObject_somDestruct SOMObject_somDestruct
#define M_SOMPPersistentObject_somDefaultCopyInit SOMObject_somDefaultCopyInit
#define M_SOMPPersistentObject_somDefaultAssign SOMObject_somDefaultAssign
#define M_SOMPPersistentObject_somDefaultConstCopyInit SOMObject_somDefaultConstCopyInit
#define M_SOMPPersistentObject_somDefaultVCopyInit SOMObject_somDefaultVCopyInit
#define M_SOMPPersistentObject_somDefaultConstVCopyInit SOMObject_somDefaultConstVCopyInit
#define M_SOMPPersistentObject_somDefaultConstAssign SOMObject_somDefaultConstAssign
#define M_SOMPPersistentObject_somDefaultVAssign SOMObject_somDefaultVAssign
#define M_SOMPPersistentObject_somDefaultConstVAssign SOMObject_somDefaultConstVAssign
#define M_SOMPPersistentObject_somFree SOMObject_somFree
#define M_SOMPPersistentObject_somUninit SOMObject_somUninit
#define M_SOMPPersistentObject_somGetClass SOMObject_somGetClass
#define M_SOMPPersistentObject_somGetClassName SOMObject_somGetClassName
#define M_SOMPPersistentObject_somGetSize SOMObject_somGetSize
#define M_SOMPPersistentObject_somIsA SOMObject_somIsA
#define M_SOMPPersistentObject_somIsInstanceOf SOMObject_somIsInstanceOf
#define M_SOMPPersistentObject_somRespondsTo SOMObject_somRespondsTo
#define M_SOMPPersistentObject_somDispatch SOMObject_somDispatch
#define M_SOMPPersistentObject_somClassDispatch SOMObject_somClassDispatch
#define M_SOMPPersistentObject_somCastObj SOMObject_somCastObj
#define M_SOMPPersistentObject_somResetObj SOMObject_somResetObj
#define M_SOMPPersistentObject_somDispatchV SOMObject_somDispatchV
#define M_SOMPPersistentObject_somDispatchL SOMObject_somDispatchL
#define M_SOMPPersistentObject_somDispatchA SOMObject_somDispatchA
#define M_SOMPPersistentObject_somDispatchD SOMObject_somDispatchD
#define M_SOMPPersistentObject_somPrintSelf SOMObject_somPrintSelf
#define M_SOMPPersistentObject_somDumpSelf SOMObject_somDumpSelf
#define M_SOMPPersistentObject_somDumpSelfInt SOMObject_somDumpSelfInt
#endif /* SOM_DONT_USE_INHERITED_MACROS */

#endif       /* SOM_M_SOMPPersistentObject_h */


/*
 * This file was generated by the SOM Compiler.
 * FileName: impldef.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *   CLASS SPECIFICATION FOR IMPLEMENTATION DEFINITION
 */


#ifndef SOM_ImplementationDef_xh
#define SOM_ImplementationDef_xh

class ImplementationDef;

/*
 *  ImplementationDef attributes
 */

#define ImplementationDef_MajorVersion 2
#define ImplementationDef_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef ImplementationDef_API
#define ImplementationDef_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class Container;

/*
 * End of bindings for IDL types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */

/* flags */
#define IMPLDEF_MULTI_THREAD  0x00000001
#define IMPLDEF_POOL_THREAD   0x00000002
#define IMPLDEF_DISABLE_SVR   0x00000004
#define IMPLDEF_IMPLID_SET    0x00000008
#define IMPLDEF_NONSTOPPABLE  0x00000010
#define IMPLDEF_SECUREMODE    0x00000020

class ImplementationDef;
SOMEXTERN ImplementationDef* SOMDLINK SOMD_ImplDefObject;


/* A procedure to create the ImplementationDef Class */
SOMEXTERN SOMClass * SOMLINK ImplementationDefNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the ImplementationDef class object, and the methods it introduces. */
SOMEXTERN struct ImplementationDefClassDataStructure {
	SOMClass *classObject;
	somMToken _set_impl_id;
	somMToken _get_impl_id;
	somMToken _set_impl_alias;
	somMToken _get_impl_alias;
	somMToken _set_impl_program;
	somMToken _get_impl_program;
	somMToken _set_impl_flags;
	somMToken _get_impl_flags;
	somMToken _set_impl_server_class;
	somMToken _get_impl_server_class;
	somMToken _set_impl_socket_class;
	somMToken _get_impl_socket_class;
	somMToken _set_impl_refdata_file;
	somMToken _get_impl_refdata_file;
	somMToken _set_impl_refdata_bkup;
	somMToken _get_impl_refdata_bkup;
	somMToken _set_impl_hostname;
	somMToken _get_impl_hostname;
	somMToken _set_impl_def_struct;
	somMToken _get_impl_def_struct;
	somMToken get_impl_winserver_handle;
} SOMDLINK ImplementationDefClassData;
#define _ImplementationDef ImplementationDefClassData.classObject

/* The API to parentMtabs for ImplementationDef, and the instance data it introduces. */
SOMEXTERN struct ImplementationDefCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ImplementationDefCClassData;

/*
 * -- Typedefs for ImplementationDef Method Procedures
 */
SOMEXTERN {
typedef string   SOMLINK somTP_ImplementationDef__get_impl_id(ImplementationDef *somSelf, Environment *ev);
typedef somTP_ImplementationDef__get_impl_id *somTD_ImplementationDef__get_impl_id;
typedef void   SOMLINK somTP_ImplementationDef__set_impl_id(ImplementationDef *somSelf, Environment *ev, 
		string impl_id);
typedef somTP_ImplementationDef__set_impl_id *somTD_ImplementationDef__set_impl_id;
typedef string   SOMLINK somTP_ImplementationDef__get_impl_alias(ImplementationDef *somSelf, Environment *ev);
typedef somTP_ImplementationDef__get_impl_alias *somTD_ImplementationDef__get_impl_alias;
typedef void   SOMLINK somTP_ImplementationDef__set_impl_alias(ImplementationDef *somSelf, Environment *ev, 
		string impl_alias);
typedef somTP_ImplementationDef__set_impl_alias *somTD_ImplementationDef__set_impl_alias;
typedef string   SOMLINK somTP_ImplementationDef__get_impl_program(ImplementationDef *somSelf, Environment *ev);
typedef somTP_ImplementationDef__get_impl_program *somTD_ImplementationDef__get_impl_program;
typedef void   SOMLINK somTP_ImplementationDef__set_impl_program(ImplementationDef *somSelf, Environment *ev, 
		string impl_program);
typedef somTP_ImplementationDef__set_impl_program *somTD_ImplementationDef__set_impl_program;
typedef Flags   SOMLINK somTP_ImplementationDef__get_impl_flags(ImplementationDef *somSelf, Environment *ev);
typedef somTP_ImplementationDef__get_impl_flags *somTD_ImplementationDef__get_impl_flags;
typedef void   SOMLINK somTP_ImplementationDef__set_impl_flags(ImplementationDef *somSelf, Environment *ev, 
		Flags impl_flags);
typedef somTP_ImplementationDef__set_impl_flags *somTD_ImplementationDef__set_impl_flags;
typedef string   SOMLINK somTP_ImplementationDef__get_impl_server_class(ImplementationDef *somSelf, Environment *ev);
typedef somTP_ImplementationDef__get_impl_server_class *somTD_ImplementationDef__get_impl_server_class;
typedef void   SOMLINK somTP_ImplementationDef__set_impl_server_class(ImplementationDef *somSelf, Environment *ev, 
		string impl_server_class);
typedef somTP_ImplementationDef__set_impl_server_class *somTD_ImplementationDef__set_impl_server_class;
typedef string   SOMLINK somTP_ImplementationDef__get_impl_refdata_file(ImplementationDef *somSelf, Environment *ev);
typedef somTP_ImplementationDef__get_impl_refdata_file *somTD_ImplementationDef__get_impl_refdata_file;
typedef void   SOMLINK somTP_ImplementationDef__set_impl_refdata_file(ImplementationDef *somSelf, Environment *ev, 
		string impl_refdata_file);
typedef somTP_ImplementationDef__set_impl_refdata_file *somTD_ImplementationDef__set_impl_refdata_file;
typedef string   SOMLINK somTP_ImplementationDef__get_impl_refdata_bkup(ImplementationDef *somSelf, Environment *ev);
typedef somTP_ImplementationDef__get_impl_refdata_bkup *somTD_ImplementationDef__get_impl_refdata_bkup;
typedef void   SOMLINK somTP_ImplementationDef__set_impl_refdata_bkup(ImplementationDef *somSelf, Environment *ev, 
		string impl_refdata_bkup);
typedef somTP_ImplementationDef__set_impl_refdata_bkup *somTD_ImplementationDef__set_impl_refdata_bkup;
typedef string   SOMLINK somTP_ImplementationDef__get_impl_hostname(ImplementationDef *somSelf, Environment *ev);
typedef somTP_ImplementationDef__get_impl_hostname *somTD_ImplementationDef__get_impl_hostname;
typedef void   SOMLINK somTP_ImplementationDef__set_impl_hostname(ImplementationDef *somSelf, Environment *ev, 
		string impl_hostname);
typedef somTP_ImplementationDef__set_impl_hostname *somTD_ImplementationDef__set_impl_hostname;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_ImplementationDef_somDefaultInit(ImplementationDef *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_ImplementationDef_somDefaultInit *somTD_ImplementationDef_somDefaultInit;
typedef void   SOMLINK somTP_ImplementationDef_somDestruct(ImplementationDef *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_ImplementationDef_somDestruct *somTD_ImplementationDef_somDestruct;
typedef void   SOMLINK somTP_ImplementationDef_somDefaultCopyInit(ImplementationDef *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ImplementationDef_somDefaultCopyInit *somTD_ImplementationDef_somDefaultCopyInit;
typedef ImplementationDef*   SOMLINK somTP_ImplementationDef_somDefaultAssign(ImplementationDef *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ImplementationDef_somDefaultAssign *somTD_ImplementationDef_somDefaultAssign;
typedef void   SOMLINK somTP_ImplementationDef_somDefaultConstCopyInit(ImplementationDef *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ImplementationDef_somDefaultConstCopyInit *somTD_ImplementationDef_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ImplementationDef_somDefaultVCopyInit(ImplementationDef *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ImplementationDef_somDefaultVCopyInit *somTD_ImplementationDef_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ImplementationDef_somDefaultConstVCopyInit(ImplementationDef *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ImplementationDef_somDefaultConstVCopyInit *somTD_ImplementationDef_somDefaultConstVCopyInit;
typedef ImplementationDef*   SOMLINK somTP_ImplementationDef_somDefaultConstAssign(ImplementationDef *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ImplementationDef_somDefaultConstAssign *somTD_ImplementationDef_somDefaultConstAssign;
typedef ImplementationDef*   SOMLINK somTP_ImplementationDef_somDefaultVAssign(ImplementationDef *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ImplementationDef_somDefaultVAssign *somTD_ImplementationDef_somDefaultVAssign;
typedef ImplementationDef*   SOMLINK somTP_ImplementationDef_somDefaultConstVAssign(ImplementationDef *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ImplementationDef_somDefaultConstVAssign *somTD_ImplementationDef_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ImplementationDef_somInit(ImplementationDef *somSelf);
typedef somTP_ImplementationDef_somInit *somTD_ImplementationDef_somInit;
typedef void   SOMLINK somTP_ImplementationDef_somFree(ImplementationDef *somSelf);
typedef somTP_ImplementationDef_somFree *somTD_ImplementationDef_somFree;
typedef void   SOMLINK somTP_ImplementationDef_somUninit(ImplementationDef *somSelf);
typedef somTP_ImplementationDef_somUninit *somTD_ImplementationDef_somUninit;
typedef SOMClass*   SOMLINK somTP_ImplementationDef_somGetClass(ImplementationDef *somSelf);
typedef somTP_ImplementationDef_somGetClass *somTD_ImplementationDef_somGetClass;
typedef string   SOMLINK somTP_ImplementationDef_somGetClassName(ImplementationDef *somSelf);
typedef somTP_ImplementationDef_somGetClassName *somTD_ImplementationDef_somGetClassName;
typedef long   SOMLINK somTP_ImplementationDef_somGetSize(ImplementationDef *somSelf);
typedef somTP_ImplementationDef_somGetSize *somTD_ImplementationDef_somGetSize;
typedef boolean   SOMLINK somTP_ImplementationDef_somIsA(ImplementationDef *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ImplementationDef_somIsA *somTD_ImplementationDef_somIsA;
typedef boolean   SOMLINK somTP_ImplementationDef_somIsInstanceOf(ImplementationDef *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ImplementationDef_somIsInstanceOf *somTD_ImplementationDef_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ImplementationDef_somRespondsTo(ImplementationDef *somSelf, 
		somId mId);
typedef somTP_ImplementationDef_somRespondsTo *somTD_ImplementationDef_somRespondsTo;
typedef boolean   SOMLINK somTP_ImplementationDef_somDispatch(ImplementationDef *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ImplementationDef_somDispatch *somTD_ImplementationDef_somDispatch;
typedef boolean   SOMLINK somTP_ImplementationDef_somClassDispatch(ImplementationDef *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ImplementationDef_somClassDispatch *somTD_ImplementationDef_somClassDispatch;
typedef boolean   SOMLINK somTP_ImplementationDef_somCastObj(ImplementationDef *somSelf, 
		SOMClass* cls);
typedef somTP_ImplementationDef_somCastObj *somTD_ImplementationDef_somCastObj;
typedef boolean   SOMLINK somTP_ImplementationDef_somResetObj(ImplementationDef *somSelf);
typedef somTP_ImplementationDef_somResetObj *somTD_ImplementationDef_somResetObj;
typedef void   SOMLINK somTP_ImplementationDef_somDispatchV(ImplementationDef *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ImplementationDef_somDispatchV *somTD_ImplementationDef_somDispatchV;
typedef long   SOMLINK somTP_ImplementationDef_somDispatchL(ImplementationDef *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ImplementationDef_somDispatchL *somTD_ImplementationDef_somDispatchL;
typedef void*   SOMLINK somTP_ImplementationDef_somDispatchA(ImplementationDef *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ImplementationDef_somDispatchA *somTD_ImplementationDef_somDispatchA;
typedef double   SOMLINK somTP_ImplementationDef_somDispatchD(ImplementationDef *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ImplementationDef_somDispatchD *somTD_ImplementationDef_somDispatchD;
typedef SOMObject*   SOMLINK somTP_ImplementationDef_somPrintSelf(ImplementationDef *somSelf);
typedef somTP_ImplementationDef_somPrintSelf *somTD_ImplementationDef_somPrintSelf;
typedef void   SOMLINK somTP_ImplementationDef_somDumpSelf(ImplementationDef *somSelf, 
		long level);
typedef somTP_ImplementationDef_somDumpSelf *somTD_ImplementationDef_somDumpSelf;
typedef void   SOMLINK somTP_ImplementationDef_somDumpSelfInt(ImplementationDef *somSelf, 
		long level);
typedef somTP_ImplementationDef_somDumpSelfInt *somTD_ImplementationDef_somDumpSelfInt;
}

#endif /* ImplementationDef_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for ImplementationDef
 */
class ImplementationDef : public SOMObject
{
/*
 *  ImplementationDef attributes
 */
public:

// ImplementationDef::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ImplementationDef) ImplementationDefNewClass(ImplementationDef_MajorVersion,ImplementationDef_MinorVersion);
   return (void*)
      SOM_Resolve(_ImplementationDef,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ImplementationDef));
}

// ImplementationDef::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

ImplementationDef& operator=(ImplementationDef& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

ImplementationDef()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ImplementationDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ImplementationDef(ImplementationDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ImplementationDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
ImplementationDef(const ImplementationDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ImplementationDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: _get_impl_id */
string   _get_impl_id(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string impl_id"
 */
   return SOM_ResolveD(this,ImplementationDef,ImplementationDef,_get_impl_id)
	(this, ev);
}


/* method: _set_impl_id */
void   _set_impl_id(Environment *ev, 
		string impl_id)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string impl_id"
 */
   SOM_ResolveD(this,ImplementationDef,ImplementationDef,_set_impl_id)
	(this, ev,impl_id);
}


/* method: _get_impl_alias */
string   _get_impl_alias(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string impl_alias"
 */
   return SOM_ResolveD(this,ImplementationDef,ImplementationDef,_get_impl_alias)
	(this, ev);
}


/* method: _set_impl_alias */
void   _set_impl_alias(Environment *ev, 
		string impl_alias)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string impl_alias"
 */
   SOM_ResolveD(this,ImplementationDef,ImplementationDef,_set_impl_alias)
	(this, ev,impl_alias);
}


/* method: _get_impl_program */
string   _get_impl_program(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string impl_program"
 */
   return SOM_ResolveD(this,ImplementationDef,ImplementationDef,_get_impl_program)
	(this, ev);
}


/* method: _set_impl_program */
void   _set_impl_program(Environment *ev, 
		string impl_program)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string impl_program"
 */
   SOM_ResolveD(this,ImplementationDef,ImplementationDef,_set_impl_program)
	(this, ev,impl_program);
}


/* method: _get_impl_flags */
Flags   _get_impl_flags(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "attribute Flags impl_flags"
 */
   return SOM_ResolveD(this,ImplementationDef,ImplementationDef,_get_impl_flags)
	(this, ev);
}


/* method: _set_impl_flags */
void   _set_impl_flags(Environment *ev, 
		Flags impl_flags)
{
/*
 * Method from the IDL attribute statement:
 * "attribute Flags impl_flags"
 */
   SOM_ResolveD(this,ImplementationDef,ImplementationDef,_set_impl_flags)
	(this, ev,impl_flags);
}


/* method: _get_impl_server_class */
string   _get_impl_server_class(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string impl_server_class"
 */
   return SOM_ResolveD(this,ImplementationDef,ImplementationDef,_get_impl_server_class)
	(this, ev);
}


/* method: _set_impl_server_class */
void   _set_impl_server_class(Environment *ev, 
		string impl_server_class)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string impl_server_class"
 */
   SOM_ResolveD(this,ImplementationDef,ImplementationDef,_set_impl_server_class)
	(this, ev,impl_server_class);
}


/* method: _get_impl_refdata_file */
string   _get_impl_refdata_file(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string impl_refdata_file"
 */
   return SOM_ResolveD(this,ImplementationDef,ImplementationDef,_get_impl_refdata_file)
	(this, ev);
}


/* method: _set_impl_refdata_file */
void   _set_impl_refdata_file(Environment *ev, 
		string impl_refdata_file)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string impl_refdata_file"
 */
   SOM_ResolveD(this,ImplementationDef,ImplementationDef,_set_impl_refdata_file)
	(this, ev,impl_refdata_file);
}


/* method: _get_impl_refdata_bkup */
string   _get_impl_refdata_bkup(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string impl_refdata_bkup"
 */
   return SOM_ResolveD(this,ImplementationDef,ImplementationDef,_get_impl_refdata_bkup)
	(this, ev);
}


/* method: _set_impl_refdata_bkup */
void   _set_impl_refdata_bkup(Environment *ev, 
		string impl_refdata_bkup)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string impl_refdata_bkup"
 */
   SOM_ResolveD(this,ImplementationDef,ImplementationDef,_set_impl_refdata_bkup)
	(this, ev,impl_refdata_bkup);
}


/* method: _get_impl_hostname */
string   _get_impl_hostname(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string impl_hostname"
 */
   return SOM_ResolveD(this,ImplementationDef,ImplementationDef,_get_impl_hostname)
	(this, ev);
}


/* method: _set_impl_hostname */
void   _set_impl_hostname(Environment *ev, 
		string impl_hostname)
{
/*
 * Method from the IDL attribute statement:
 * "attribute string impl_hostname"
 */
   SOM_ResolveD(this,ImplementationDef,ImplementationDef,_set_impl_hostname)
	(this, ev,impl_hostname);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,ImplementationDef,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,ImplementationDef,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,ImplementationDef,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ImplementationDef*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,ImplementationDef,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,ImplementationDef,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,ImplementationDef,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,ImplementationDef,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ImplementationDef*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,ImplementationDef,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ImplementationDef*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,ImplementationDef,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ImplementationDef*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,ImplementationDef,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,ImplementationDef,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,ImplementationDef,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,ImplementationDef,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,ImplementationDef,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,ImplementationDef,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,ImplementationDef,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ImplementationDef,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ImplementationDef,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ImplementationDef,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   ImplementationDef_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ImplementationDef,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ImplementationDef,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   ImplementationDef_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ImplementationDef,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ImplementationDef,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,ImplementationDef,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,ImplementationDef,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   ImplementationDef_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,ImplementationDef,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,ImplementationDef,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   ImplementationDef_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ImplementationDef,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,ImplementationDef,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   ImplementationDef_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ImplementationDef,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,ImplementationDef,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   ImplementationDef_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ImplementationDef,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,ImplementationDef,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,ImplementationDef,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,ImplementationDef,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,ImplementationDef,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ImplementationDef */



#endif       /* SOM_ImplementationDef_xh */

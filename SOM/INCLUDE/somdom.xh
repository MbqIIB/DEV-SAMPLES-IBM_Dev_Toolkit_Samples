
/*
 * This file was generated by the SOM Compiler.
 * FileName: somdom.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    IDL interface spec for DSOM Distributed Object Manager.
 * 
 * 
 *    This is a subclass of the abstract ObjectMgr class.
 *    All ObjectMgr methods are implemented with DSOM calls.
 */


#ifndef SOM_SOMDObjectMgr_xh
#define SOM_SOMDObjectMgr_xh

class SOMDObjectMgr;

/*
 *  In addition to the basic ObjectMgr interface, the DSOM ObjectMgr
 *  defines the following methods to find remote server objects:
 */

#define SOMDObjectMgr_MajorVersion 2
#define SOMDObjectMgr_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_ObjectMgr_xh
#include <om.xh>
#endif

#ifndef SOMDObjectMgr_API
#define SOMDObjectMgr_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class Container;
class SOMDServer;
#ifndef _IDL_SEQUENCE_SOMDServer_defined
#define _IDL_SEQUENCE_SOMDServer_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    SOMDServer **_buffer;
} _IDL_SEQUENCE_SOMDServer;
#endif /* _IDL_SEQUENCE_SOMDServer_defined */ 

#ifndef SOM_DONT_USE_SHORT_NAMES
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */

class SOMDObjectMgr;
SOMEXTERN SOMDObjectMgr * SOMDLINK SOMD_ObjectMgr;

#include <somdserv.xh>


/* A procedure to create the SOMDObjectMgr Class */
SOMEXTERN SOMClass * SOMLINK SOMDObjectMgrNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the SOMDObjectMgr class object, and the methods it introduces. */
SOMEXTERN struct SOMDObjectMgrClassDataStructure {
	SOMClass *classObject;
	somMToken somdFindServer;
	somMToken somdFindServerByName;
	somMToken somdFindServersByClass;
	somMToken somdFindAnyServerByClass;
	somMToken _get_somd21somFree;
	somMToken _set_somd21somFree;
} SOMDLINK SOMDObjectMgrClassData;
#define _SOMDObjectMgr SOMDObjectMgrClassData.classObject

/* The API to parentMtabs for SOMDObjectMgr, and the instance data it introduces. */
SOMEXTERN struct SOMDObjectMgrCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK SOMDObjectMgrCClassData;

/*
 * -- Typedefs for SOMDObjectMgr Method Procedures
 */
SOMEXTERN {
typedef SOMDServer*   SOMLINK somTP_SOMDObjectMgr_somdFindServer(SOMDObjectMgr *somSelf, Environment *ev, 
		ImplId serverid);
typedef somTP_SOMDObjectMgr_somdFindServer *somTD_SOMDObjectMgr_somdFindServer;
typedef SOMDServer*   SOMLINK somTP_SOMDObjectMgr_somdFindServerByName(SOMDObjectMgr *somSelf, Environment *ev, 
		string servername);
typedef somTP_SOMDObjectMgr_somdFindServerByName *somTD_SOMDObjectMgr_somdFindServerByName;
typedef _IDL_SEQUENCE_SOMDServer   SOMLINK somTP_SOMDObjectMgr_somdFindServersByClass(SOMDObjectMgr *somSelf, Environment *ev, 
		Identifier objclass);
typedef somTP_SOMDObjectMgr_somdFindServersByClass *somTD_SOMDObjectMgr_somdFindServersByClass;
typedef SOMDServer*   SOMLINK somTP_SOMDObjectMgr_somdFindAnyServerByClass(SOMDObjectMgr *somSelf, Environment *ev, 
		Identifier objclass);
typedef somTP_SOMDObjectMgr_somdFindAnyServerByClass *somTD_SOMDObjectMgr_somdFindAnyServerByClass;
typedef boolean   SOMLINK somTP_SOMDObjectMgr__get_somd21somFree(SOMDObjectMgr *somSelf, Environment *ev);
typedef somTP_SOMDObjectMgr__get_somd21somFree *somTD_SOMDObjectMgr__get_somd21somFree;
typedef void   SOMLINK somTP_SOMDObjectMgr__set_somd21somFree(SOMDObjectMgr *somSelf, Environment *ev, 
		boolean somd21somFree);
typedef somTP_SOMDObjectMgr__set_somd21somFree *somTD_SOMDObjectMgr__set_somd21somFree;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef SOMObject*   SOMLINK somTP_SOMDObjectMgr_somdNewObject(SOMDObjectMgr *somSelf, Environment *ev, 
		Identifier objclass, 
		string hints);
typedef somTP_SOMDObjectMgr_somdNewObject *somTD_SOMDObjectMgr_somdNewObject;
typedef string   SOMLINK somTP_SOMDObjectMgr_somdGetIdFromObject(SOMDObjectMgr *somSelf, Environment *ev, 
		SOMObject* obj);
typedef somTP_SOMDObjectMgr_somdGetIdFromObject *somTD_SOMDObjectMgr_somdGetIdFromObject;
typedef SOMObject*   SOMLINK somTP_SOMDObjectMgr_somdGetObjectFromId(SOMDObjectMgr *somSelf, Environment *ev, 
		string id);
typedef somTP_SOMDObjectMgr_somdGetObjectFromId *somTD_SOMDObjectMgr_somdGetObjectFromId;
typedef void   SOMLINK somTP_SOMDObjectMgr_somdReleaseObject(SOMDObjectMgr *somSelf, Environment *ev, 
		SOMObject* obj);
typedef somTP_SOMDObjectMgr_somdReleaseObject *somTD_SOMDObjectMgr_somdReleaseObject;
typedef void   SOMLINK somTP_SOMDObjectMgr_somdDestroyObject(SOMDObjectMgr *somSelf, Environment *ev, 
		SOMObject* obj);
typedef somTP_SOMDObjectMgr_somdDestroyObject *somTD_SOMDObjectMgr_somdDestroyObject;
typedef void   SOMLINK somTP_SOMDObjectMgr_somDefaultInit(SOMDObjectMgr *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_SOMDObjectMgr_somDefaultInit *somTD_SOMDObjectMgr_somDefaultInit;
typedef void   SOMLINK somTP_SOMDObjectMgr_somDestruct(SOMDObjectMgr *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_SOMDObjectMgr_somDestruct *somTD_SOMDObjectMgr_somDestruct;
typedef void   SOMLINK somTP_SOMDObjectMgr_somDefaultCopyInit(SOMDObjectMgr *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMDObjectMgr_somDefaultCopyInit *somTD_SOMDObjectMgr_somDefaultCopyInit;
typedef SOMDObjectMgr*   SOMLINK somTP_SOMDObjectMgr_somDefaultAssign(SOMDObjectMgr *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMDObjectMgr_somDefaultAssign *somTD_SOMDObjectMgr_somDefaultAssign;
typedef void   SOMLINK somTP_SOMDObjectMgr_somDefaultConstCopyInit(SOMDObjectMgr *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMDObjectMgr_somDefaultConstCopyInit *somTD_SOMDObjectMgr_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_SOMDObjectMgr_somDefaultVCopyInit(SOMDObjectMgr *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMDObjectMgr_somDefaultVCopyInit *somTD_SOMDObjectMgr_somDefaultVCopyInit;
typedef void   SOMLINK somTP_SOMDObjectMgr_somDefaultConstVCopyInit(SOMDObjectMgr *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMDObjectMgr_somDefaultConstVCopyInit *somTD_SOMDObjectMgr_somDefaultConstVCopyInit;
typedef SOMDObjectMgr*   SOMLINK somTP_SOMDObjectMgr_somDefaultConstAssign(SOMDObjectMgr *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMDObjectMgr_somDefaultConstAssign *somTD_SOMDObjectMgr_somDefaultConstAssign;
typedef SOMDObjectMgr*   SOMLINK somTP_SOMDObjectMgr_somDefaultVAssign(SOMDObjectMgr *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMDObjectMgr_somDefaultVAssign *somTD_SOMDObjectMgr_somDefaultVAssign;
typedef SOMDObjectMgr*   SOMLINK somTP_SOMDObjectMgr_somDefaultConstVAssign(SOMDObjectMgr *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_SOMDObjectMgr_somDefaultConstVAssign *somTD_SOMDObjectMgr_somDefaultConstVAssign;
typedef void   SOMLINK somTP_SOMDObjectMgr_somInit(SOMDObjectMgr *somSelf);
typedef somTP_SOMDObjectMgr_somInit *somTD_SOMDObjectMgr_somInit;
typedef void   SOMLINK somTP_SOMDObjectMgr_somFree(SOMDObjectMgr *somSelf);
typedef somTP_SOMDObjectMgr_somFree *somTD_SOMDObjectMgr_somFree;
typedef void   SOMLINK somTP_SOMDObjectMgr_somUninit(SOMDObjectMgr *somSelf);
typedef somTP_SOMDObjectMgr_somUninit *somTD_SOMDObjectMgr_somUninit;
typedef SOMClass*   SOMLINK somTP_SOMDObjectMgr_somGetClass(SOMDObjectMgr *somSelf);
typedef somTP_SOMDObjectMgr_somGetClass *somTD_SOMDObjectMgr_somGetClass;
typedef string   SOMLINK somTP_SOMDObjectMgr_somGetClassName(SOMDObjectMgr *somSelf);
typedef somTP_SOMDObjectMgr_somGetClassName *somTD_SOMDObjectMgr_somGetClassName;
typedef long   SOMLINK somTP_SOMDObjectMgr_somGetSize(SOMDObjectMgr *somSelf);
typedef somTP_SOMDObjectMgr_somGetSize *somTD_SOMDObjectMgr_somGetSize;
typedef boolean   SOMLINK somTP_SOMDObjectMgr_somIsA(SOMDObjectMgr *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMDObjectMgr_somIsA *somTD_SOMDObjectMgr_somIsA;
typedef boolean   SOMLINK somTP_SOMDObjectMgr_somIsInstanceOf(SOMDObjectMgr *somSelf, 
		SOMClass* aClassObj);
typedef somTP_SOMDObjectMgr_somIsInstanceOf *somTD_SOMDObjectMgr_somIsInstanceOf;
typedef boolean   SOMLINK somTP_SOMDObjectMgr_somRespondsTo(SOMDObjectMgr *somSelf, 
		somId mId);
typedef somTP_SOMDObjectMgr_somRespondsTo *somTD_SOMDObjectMgr_somRespondsTo;
typedef boolean   SOMLINK somTP_SOMDObjectMgr_somDispatch(SOMDObjectMgr *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMDObjectMgr_somDispatch *somTD_SOMDObjectMgr_somDispatch;
typedef boolean   SOMLINK somTP_SOMDObjectMgr_somClassDispatch(SOMDObjectMgr *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_SOMDObjectMgr_somClassDispatch *somTD_SOMDObjectMgr_somClassDispatch;
typedef boolean   SOMLINK somTP_SOMDObjectMgr_somCastObj(SOMDObjectMgr *somSelf, 
		SOMClass* cls);
typedef somTP_SOMDObjectMgr_somCastObj *somTD_SOMDObjectMgr_somCastObj;
typedef boolean   SOMLINK somTP_SOMDObjectMgr_somResetObj(SOMDObjectMgr *somSelf);
typedef somTP_SOMDObjectMgr_somResetObj *somTD_SOMDObjectMgr_somResetObj;
typedef void   SOMLINK somTP_SOMDObjectMgr_somDispatchV(SOMDObjectMgr *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMDObjectMgr_somDispatchV *somTD_SOMDObjectMgr_somDispatchV;
typedef long   SOMLINK somTP_SOMDObjectMgr_somDispatchL(SOMDObjectMgr *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMDObjectMgr_somDispatchL *somTD_SOMDObjectMgr_somDispatchL;
typedef void*   SOMLINK somTP_SOMDObjectMgr_somDispatchA(SOMDObjectMgr *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMDObjectMgr_somDispatchA *somTD_SOMDObjectMgr_somDispatchA;
typedef double   SOMLINK somTP_SOMDObjectMgr_somDispatchD(SOMDObjectMgr *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_SOMDObjectMgr_somDispatchD *somTD_SOMDObjectMgr_somDispatchD;
typedef SOMObject*   SOMLINK somTP_SOMDObjectMgr_somPrintSelf(SOMDObjectMgr *somSelf);
typedef somTP_SOMDObjectMgr_somPrintSelf *somTD_SOMDObjectMgr_somPrintSelf;
typedef void   SOMLINK somTP_SOMDObjectMgr_somDumpSelf(SOMDObjectMgr *somSelf, 
		long level);
typedef somTP_SOMDObjectMgr_somDumpSelf *somTD_SOMDObjectMgr_somDumpSelf;
typedef void   SOMLINK somTP_SOMDObjectMgr_somDumpSelfInt(SOMDObjectMgr *somSelf, 
		long level);
typedef somTP_SOMDObjectMgr_somDumpSelfInt *somTD_SOMDObjectMgr_somDumpSelfInt;
}

#endif /* SOMDObjectMgr_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for SOMDObjectMgr
 */
class SOMDObjectMgr : public ObjectMgr
{
/*
 *  In addition to the basic ObjectMgr interface, the DSOM ObjectMgr
 *  defines the following methods to find remote server objects:
 */
public:

// SOMDObjectMgr::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_SOMDObjectMgr) SOMDObjectMgrNewClass(SOMDObjectMgr_MajorVersion,SOMDObjectMgr_MinorVersion);
   return (void*)
      SOM_Resolve(_SOMDObjectMgr,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_SOMDObjectMgr));
}

// SOMDObjectMgr::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

SOMDObjectMgr& operator=(SOMDObjectMgr& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

SOMDObjectMgr()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMDObjectMgrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

SOMDObjectMgr(SOMDObjectMgr* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMDObjectMgrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
SOMDObjectMgr(const SOMDObjectMgr* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (SOMDObjectMgrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: somdFindServer */
SOMDServer*   somdFindServer(Environment *ev, 
		ImplId serverid)
{
/*
 *  Finds and returns a proxy to the Server object which is identified by the
 *  ImplId.  (ImplId is defined at server registration time, and can be
 *  obtained from the ImplDef.)
 * 
 *  OWNERSHIP of returned SOMDServer object is transferred to the caller.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMDObjectMgr,somdFindServer)
	(this, ev,serverid);
}


/* method: somdFindServerByName */
SOMDServer*   somdFindServerByName(Environment *ev, 
		string servername)
{
/*
 *  Finds and returns a proxy to the Server object with the specified name.
 *  (The name is defined at server registration time, and can be obtained
 *  from the ImplDef.)
 * 
 *  OWNERSHIP of returned SOMDServer object is transferred to the caller.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMDObjectMgr,somdFindServerByName)
	(this, ev,servername);
}


/* method: somdFindServersByClass */
_IDL_SEQUENCE_SOMDServer   somdFindServersByClass(Environment *ev, 
		Identifier objclass)
{
/*
 *  Finds all Server objects which can create an object of the named class.
 * 
 *  OWNERSHIP of returned SOMDServer objects is transferred to the caller.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMDObjectMgr,somdFindServersByClass)
	(this, ev,objclass);
}


/* method: somdFindAnyServerByClass */
SOMDServer*   somdFindAnyServerByClass(Environment *ev, 
		Identifier objclass)
{
/*
 *  Finds (any) Server object which can create an object of the named class.
 *  (This is a specialization of the somdFindServerByClass method.)
 * 
 *  OWNERSHIP of returned SOMDServer object is transferred to the caller.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMDObjectMgr,somdFindAnyServerByClass)
	(this, ev,objclass);
}


/* method: _get_somd21somFree */
boolean   _get_somd21somFree(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "attribute boolean somd21somFree"
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMDObjectMgr,_get_somd21somFree)
	(this, ev);
}


/* method: _set_somd21somFree */
void   _set_somd21somFree(Environment *ev, 
		boolean somd21somFree)
{
/*
 * Method from the IDL attribute statement:
 * "attribute boolean somd21somFree"
 */
   SOM_ResolveD(this,SOMDObjectMgr,SOMDObjectMgr,_set_somd21somFree)
	(this, ev,somd21somFree);
}


/*
 * Reintroduce inherited methods
 */

/* method: somdNewObject */
SOMObject*   somdNewObject(Environment *ev, 
		Identifier objclass, 
		string hints)
{
/*
 *  Returns a new object of the named class.  This is a "basic" creation
 *  method, where the decisions about where and how to create the object
 *  are mostly left up to the Object Manager.  However, the Object Manager
 *  may optionally define creation "hints" which the client may specify in
 *  this call.
 * 
 *  OWNERSHIP of returned object is transferred to the caller.
 *  methods for identification & location/activation
 */
   return SOM_ResolveD(this,SOMDObjectMgr,ObjectMgr,somdNewObject)
	(this, ev,objclass,hints);
}


/* method: somdGetIdFromObject */
string   somdGetIdFromObject(Environment *ev, 
		SOMObject* obj)
{
/*
 *  Returns a external id for an object managed by this Object Manager.
 *  The id is unambiguous -- it always refers to the same object (as long
 *  as the object exists).
 * 
 *  OWNERSHIP of returned id string is transferred to the caller.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,ObjectMgr,somdGetIdFromObject)
	(this, ev,obj);
}


/* method: somdGetObjectFromId */
SOMObject*   somdGetObjectFromId(Environment *ev, 
		string id)
{
/*
 *  Finds and/or activates an object implemented by this Object Manager,
 *  given its id.
 * 
 *  OWNERSHIP of returned object is transferred to the caller.
 *  methods for releasing / destroying objects
 */
   return SOM_ResolveD(this,SOMDObjectMgr,ObjectMgr,somdGetObjectFromId)
	(this, ev,id);
}


/* method: somdReleaseObject */
void   somdReleaseObject(Environment *ev, 
		SOMObject* obj)
{
/*
 *  Indicates that the client has finished using the object, and the
 *  "connection" to the object, if any, can be released.
 */
   SOM_ResolveD(this,SOMDObjectMgr,ObjectMgr,somdReleaseObject)
	(this, ev,obj);
}


/* method: somdDestroyObject */
void   somdDestroyObject(Environment *ev, 
		SOMObject* obj)
{
/*
 *  Causes the specified object to be destroyed.  (There is an implicit
 *  somoReleaseObject call made.)
 */
   SOM_ResolveD(this,SOMDObjectMgr,ObjectMgr,somdDestroyObject)
	(this, ev,obj);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
SOMDObjectMgr*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
SOMDObjectMgr*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
SOMDObjectMgr*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
SOMDObjectMgr*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   SOMDObjectMgr_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   SOMDObjectMgr_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   SOMDObjectMgr_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   SOMDObjectMgr_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   SOMDObjectMgr_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   SOMDObjectMgr_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,SOMDObjectMgr,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* SOMDObjectMgr */



#endif       /* SOM_SOMDObjectMgr_xh */

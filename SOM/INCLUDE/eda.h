
/*
 * This file was generated by the SOM Compiler.
 * FileName: eda.h.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emith: 2.47
 */

/*
 *    COMPONENT_NAME: somp
 * 
 *    ORIGINS: 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1994,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMPEncoderDecoderAbstract_h
#define SOM_SOMPEncoderDecoderAbstract_h


#include <som.h>

/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * Define the class name as an object type
 */
#ifndef SOMPEncoderDecoderAbstract
#define SOMPEncoderDecoderAbstract SOMObject
#endif
/*
 *  This is the abstract class for an EncoderDecoder.
 * 
 *  An encoder/decoder is an object which is paired with a persistent object
 *  and handles the reading/writing of that persistent object's instance
 *  data.  A class derived from this abstract class must be created and
 *  paired with a persistent object in order for that persistent object
 *  to be save/restored.
 * 
 *  The derived encoder/decoder class name is bound to a persistent
 *  object with the sompSetEncoderDecoderName method (see po.sc).
 * 
 *  A persistent object's encoder/decoder is instantiated by an
 *  IO Group Mgr at the moment that object is save/restored.
 */
#include <somobj.h>

/*
 * Start of bindings for IDL types
 */

#ifndef SOMClass
    #define SOMClass SOMObject
#endif /* SOMClass */
#ifndef SOMPMediaInterfaceAbstract
    #define SOMPMediaInterfaceAbstract SOMObject
#endif /* SOMPMediaInterfaceAbstract */
#ifndef SOMPPersistentObject
    #define SOMPPersistentObject SOMObject
#endif /* SOMPPersistentObject */

/*
 * End of bindings for IDL types.
 */

#define SOMPEncoderDecoderAbstract_MajorVersion 2
#define SOMPEncoderDecoderAbstract_MinorVersion 1

/*
 * External name shortening if required
 */
#ifdef SOM_USE_SHORT_EXTERNAL_NAMES
#define SOMPEncoderDecoderAbstractNewClass c
#pragma linkage(c, system)
#define SOMPEncoderDecoderAbstractClassData d
#define SOMPEncoderDecoderAbstractCClassData x
#endif /* SOM_USE_SHORT_EXTERNAL_NAMES */
/*--------------Migration------------*/
#define SOMPEncoderDecoderAbstract_classObj SOMPEncoderDecoderAbstractClassData.classObject
#define _SOMPEncoderDecoderAbstract SOMPEncoderDecoderAbstract_classObj

/*
 * Declare the class creation procedure
 */
SOMEXTERN SOMClass * SOMLINK SOMPEncoderDecoderAbstractNewClass(integer4 somtmajorVersion,
		integer4 somtminorVersion);
#pragma linkage(SOMPEncoderDecoderAbstractNewClass, system)

/*
 * Declare the class data structure
 */
SOMEXTERN struct SOMPEncoderDecoderAbstractClassDataStructure {
	SOMClass *classObject;
	somMToken sompEDWrite;
	somMToken sompEDRead;
} SOMDLINK SOMPEncoderDecoderAbstractClassData;

/*
 * Declare the C specific class data structure
 */
SOMEXTERN struct SOMPEncoderDecoderAbstractCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} SOMDLINK SOMPEncoderDecoderAbstractCClassData;

/*
 * New and Renew macros for SOMPEncoderDecoderAbstract
 */
#define SOMPEncoderDecoderAbstractNew() \
   ( _SOMPEncoderDecoderAbstract ? \
	_somNew(_SOMPEncoderDecoderAbstract) \
	: ( SOMPEncoderDecoderAbstractNewClass(\
		SOMPEncoderDecoderAbstract_MajorVersion, \
		SOMPEncoderDecoderAbstract_MinorVersion),\
	   _somNew(_SOMPEncoderDecoderAbstract)))
#define SOMPEncoderDecoderAbstractRenew(buf) \
   ( _SOMPEncoderDecoderAbstract ? \
	_somRenew(_SOMPEncoderDecoderAbstract, buf) \
	: ( SOMPEncoderDecoderAbstractNewClass(\
		SOMPEncoderDecoderAbstract_MajorVersion, \
		SOMPEncoderDecoderAbstract_MinorVersion),\
	   _somRenew(_SOMPEncoderDecoderAbstract, buf)))

/*
 * New Method: sompEDWrite
 */
typedef void   SOMLINK somTP_SOMPEncoderDecoderAbstract_sompEDWrite(SOMPEncoderDecoderAbstract *somSelf, Environment *ev, 
		SOMPMediaInterfaceAbstract* thisMedia, 
		SOMPPersistentObject* thisObject);
#pragma linkage(somTP_SOMPEncoderDecoderAbstract_sompEDWrite, system)
typedef somTP_SOMPEncoderDecoderAbstract_sompEDWrite *somTD_SOMPEncoderDecoderAbstract_sompEDWrite;
/*
 *  This method is responsible for writing out the persistent data of
 *  object <thisObject> in a format that is compatible with sompEDRead.
 *  This routine should make use of the media interface that is passed in
 *  as the first argument <thisMedia>.  This method should assume that
 *  the media interface has been initialized and opened.  This method
 *  should also assume that the media interface will be closed by the
 *  caller of this method.
 * 
 *  Refer to the class interface of the media interface passed in for
 *  the methods which can be used to write instance data.
 */
#define somMD_SOMPEncoderDecoderAbstract_sompEDWrite "::SOMPEncoderDecoderAbstract::sompEDWrite"
#define SOMPEncoderDecoderAbstract_sompEDWrite(somSelf,ev,thisMedia,thisObject) \
    (SOM_Resolve(somSelf, SOMPEncoderDecoderAbstract, sompEDWrite) \
	(somSelf,ev,thisMedia,thisObject))
#ifndef SOMGD_sompEDWrite
    #if (defined(_sompEDWrite) || defined(__sompEDWrite))
        #undef _sompEDWrite
        #undef __sompEDWrite
        #define SOMGD_sompEDWrite 1
    #else
        #define _sompEDWrite SOMPEncoderDecoderAbstract_sompEDWrite
    #endif /* _sompEDWrite */
#endif /* SOMGD_sompEDWrite */

/*
 * New Method: sompEDRead
 */
typedef void   SOMLINK somTP_SOMPEncoderDecoderAbstract_sompEDRead(SOMPEncoderDecoderAbstract *somSelf, Environment *ev, 
		SOMPMediaInterfaceAbstract* thisMedia, 
		SOMPPersistentObject* thisObject);
#pragma linkage(somTP_SOMPEncoderDecoderAbstract_sompEDRead, system)
typedef somTP_SOMPEncoderDecoderAbstract_sompEDRead *somTD_SOMPEncoderDecoderAbstract_sompEDRead;
/*
 *  This method is responsible for reading in the persistent data of
 *  object <thisObject>.  It should expect the data to be in the format
 *  of sompEDWrite.  This routine should make use of the media interface
 *  that is passed in as the first argument <thisMedia>.  This method
 *  should assume that the media interface has been initialized and
 *  opened.  This method should also assume that the media interface will
 *  be closed by the caller of this method.
 * 
 *  Refer to the class interface of the media interface passed in for
 *  the methods which can be used to read instance data.
 */
#define somMD_SOMPEncoderDecoderAbstract_sompEDRead "::SOMPEncoderDecoderAbstract::sompEDRead"
#define SOMPEncoderDecoderAbstract_sompEDRead(somSelf,ev,thisMedia,thisObject) \
    (SOM_Resolve(somSelf, SOMPEncoderDecoderAbstract, sompEDRead) \
	(somSelf,ev,thisMedia,thisObject))
#ifndef SOMGD_sompEDRead
    #if (defined(_sompEDRead) || defined(__sompEDRead))
        #undef _sompEDRead
        #undef __sompEDRead
        #define SOMGD_sompEDRead 1
    #else
        #define _sompEDRead SOMPEncoderDecoderAbstract_sompEDRead
    #endif /* _sompEDRead */
#endif /* SOMGD_sompEDRead */
#ifndef SOM_DONT_USE_INHERITED_MACROS
#define SOMPEncoderDecoderAbstract_somDefaultInit SOMObject_somDefaultInit
#define SOMPEncoderDecoderAbstract_somDestruct SOMObject_somDestruct
#define SOMPEncoderDecoderAbstract_somDefaultCopyInit SOMObject_somDefaultCopyInit
#define SOMPEncoderDecoderAbstract_somDefaultAssign SOMObject_somDefaultAssign
#define SOMPEncoderDecoderAbstract_somDefaultConstCopyInit SOMObject_somDefaultConstCopyInit
#define SOMPEncoderDecoderAbstract_somDefaultVCopyInit SOMObject_somDefaultVCopyInit
#define SOMPEncoderDecoderAbstract_somDefaultConstVCopyInit SOMObject_somDefaultConstVCopyInit
#define SOMPEncoderDecoderAbstract_somDefaultConstAssign SOMObject_somDefaultConstAssign
#define SOMPEncoderDecoderAbstract_somDefaultVAssign SOMObject_somDefaultVAssign
#define SOMPEncoderDecoderAbstract_somDefaultConstVAssign SOMObject_somDefaultConstVAssign
#define SOMPEncoderDecoderAbstract_somInit SOMObject_somInit
#define SOMPEncoderDecoderAbstract_somFree SOMObject_somFree
#define SOMPEncoderDecoderAbstract_somUninit SOMObject_somUninit
#define SOMPEncoderDecoderAbstract_somGetClass SOMObject_somGetClass
#define SOMPEncoderDecoderAbstract_somGetClassName SOMObject_somGetClassName
#define SOMPEncoderDecoderAbstract_somGetSize SOMObject_somGetSize
#define SOMPEncoderDecoderAbstract_somIsA SOMObject_somIsA
#define SOMPEncoderDecoderAbstract_somIsInstanceOf SOMObject_somIsInstanceOf
#define SOMPEncoderDecoderAbstract_somRespondsTo SOMObject_somRespondsTo
#define SOMPEncoderDecoderAbstract_somDispatch SOMObject_somDispatch
#define SOMPEncoderDecoderAbstract_somClassDispatch SOMObject_somClassDispatch
#define SOMPEncoderDecoderAbstract_somCastObj SOMObject_somCastObj
#define SOMPEncoderDecoderAbstract_somResetObj SOMObject_somResetObj
#define SOMPEncoderDecoderAbstract_somDispatchV SOMObject_somDispatchV
#define SOMPEncoderDecoderAbstract_somDispatchL SOMObject_somDispatchL
#define SOMPEncoderDecoderAbstract_somDispatchA SOMObject_somDispatchA
#define SOMPEncoderDecoderAbstract_somDispatchD SOMObject_somDispatchD
#define SOMPEncoderDecoderAbstract_somPrintSelf SOMObject_somPrintSelf
#define SOMPEncoderDecoderAbstract_somDumpSelf SOMObject_somDumpSelf
#define SOMPEncoderDecoderAbstract_somDumpSelfInt SOMObject_somDumpSelfInt
#endif /* SOM_DONT_USE_INHERITED_MACROS */

#endif       /* SOM_SOMPEncoderDecoderAbstract_h */


/*
 * This file was generated by the SOM Compiler.
 * FileName: repostry.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

#ifndef SOM_Repository_xh
#define SOM_Repository_xh

class Repository;

/*
 *  The Repository interface provides global access to the SOM
 *  CORBA-compliant Interface Repository (IR).  To obtain an object
 *  reference to an instance of Repository, use the RepositoryNew
 *  function.
 * 
 *  See CORBA 1.1, 7.5.2, p.133
 */

#define Repository_MajorVersion 2
#define Repository_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */

    #include <stdio.h>
    #include <somtcnst.xh>
    #include <somir.xh>
    #include <containd.xh>


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_Container_xh
#include <containr.xh>
#endif

#ifndef Repository_API
#define Repository_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class Contained;
typedef
struct Repository_RepositoryDescription {
Identifier name;
string  id;
string  defined_in;
} Repository_RepositoryDescription;
/*
 *  The inherited describe_contents method returns an instance
 *  of this (RepositoryDescription) structure in the value
 *  member of the Description structure defined in the Container
 *  interface.
 */

typedef unsigned long Repository_irOpenErrorCodes;
#define Repository_NOACCESS 1UL
#define Repository_BADMAGICNUMBER 2UL
#define Repository_MISSINGVERSIONINFO 3UL
#define Repository_IOERROR 4UL
#define Repository_VERSIONMISMATCH 5UL
#define Repository_NOWRITEACCESS 6UL
#define Repository_INDEXINCONSISTENT 7UL
#define Repository_INDEXNOTPRESENT 8UL
/*
 *  @dcr13033
 */

#define ex_Repository_irOpenError "::Repository::irOpenError"
typedef
struct Repository_irOpenError {
Repository_irOpenErrorCodes errorCode;
string  fileName;
} Repository_irOpenError;
/*
 *  The irOpenError and associated irOpenErrorCodes are a
 *  SOM-unique extension to the Interface Repository.  These
 *  errors may be raised by the somNew when instantiating the
 *  Repository object and can be found in the SOM global
 *  Environment if the returned Repository object is NULL (meaning
 *  no Repository object could be created). When the Repository
 *  object is not NULL, use the queryException method to place any
 *  exception info into a user-supplied Environment
 *  (see queryException below).
 */


#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_RepositoryDescription
    #ifdef RepositoryDescription
        #undef RepositoryDescription
        #define SOMTGD_RepositoryDescription 1
    #else
        #define RepositoryDescription Repository_RepositoryDescription
    #endif /* RepositoryDescription */
#endif /* SOMTGD_RepositoryDescription */
#ifndef SOMTGD_irOpenErrorCodes
    #ifdef irOpenErrorCodes
        #undef irOpenErrorCodes
        #define SOMTGD_irOpenErrorCodes 1
    #else
        #define irOpenErrorCodes Repository_irOpenErrorCodes
    #endif /* irOpenErrorCodes */
#endif /* SOMTGD_irOpenErrorCodes */
#ifndef SOMTGD_ex_irOpenError
    #ifdef ex_irOpenError
        #undef ex_irOpenError
        #define SOMTGD_ex_irOpenError 1
    #else
        #define ex_irOpenError ex_Repository_irOpenError
    #endif /* ex_irOpenError */
#endif /* SOMTGD_ex_irOpenError */
#ifndef SOMTGD_irOpenError
    #ifdef irOpenError
        #undef irOpenError
        #define SOMTGD_irOpenError 1
    #else
        #define irOpenError Repository_irOpenError
    #endif /* irOpenError */
#endif /* SOMTGD_irOpenError */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the Repository Class */
SOMEXTERN SOMClass * SOMLINK RepositoryNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Repository class object, and the methods it introduces. */
SOMEXTERN struct RepositoryClassDataStructure {
	SOMClass *classObject;
	somMToken lookup_id;
	somMToken lookup_modifier;
	somMToken release_cache;
	somMToken reserved1;
	somMToken reserved2;
	somMToken reserved3;
	somMToken queryException;
} SOMDLINK RepositoryClassData;
#define _Repository RepositoryClassData.classObject

/* The API to parentMtabs for Repository, and the instance data it introduces. */
SOMEXTERN struct RepositoryCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK RepositoryCClassData;

/*
 * -- Typedefs for Repository Method Procedures
 */
SOMEXTERN {
typedef Contained*   SOMLINK somTP_Repository_lookup_id(Repository *somSelf, Environment *ev, 
		string search_id);
typedef somTP_Repository_lookup_id *somTD_Repository_lookup_id;
typedef string   SOMLINK somTP_Repository_lookup_modifier(Repository *somSelf, Environment *ev, 
		string name, 
		string modifier);
typedef somTP_Repository_lookup_modifier *somTD_Repository_lookup_modifier;
typedef void   SOMLINK somTP_Repository_release_cache(Repository *somSelf, Environment *ev);
typedef somTP_Repository_release_cache *somTD_Repository_release_cache;
typedef boolean   SOMLINK somTP_Repository_queryException(Repository *somSelf, Environment *ev);
typedef somTP_Repository_queryException *somTD_Repository_queryException;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef _IDL_SEQUENCE_Contained   SOMLINK somTP_Repository_contents(Repository *somSelf, Environment *ev, 
		Container_InterfaceName limit_type, 
		boolean exclude_inherited);
typedef somTP_Repository_contents *somTD_Repository_contents;
typedef _IDL_SEQUENCE_Contained   SOMLINK somTP_Repository_lookup_name(Repository *somSelf, Environment *ev, 
		Identifier search_name, 
		long levels_to_search, 
		Container_InterfaceName limit_type, 
		boolean exclude_inherited);
typedef somTP_Repository_lookup_name *somTD_Repository_lookup_name;
typedef _IDL_SEQUENCE_Container_ContainerDescription   SOMLINK somTP_Repository_describe_contents(Repository *somSelf, Environment *ev, 
		Container_InterfaceName limit_type, 
		boolean exclude_inherited, 
		long max_returned_objs);
typedef somTP_Repository_describe_contents *somTD_Repository_describe_contents;
typedef void   SOMLINK somTP_Repository_somDefaultInit(Repository *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_Repository_somDefaultInit *somTD_Repository_somDefaultInit;
typedef void   SOMLINK somTP_Repository_somDestruct(Repository *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_Repository_somDestruct *somTD_Repository_somDestruct;
typedef void   SOMLINK somTP_Repository_somDumpSelf(Repository *somSelf, 
		long level);
typedef somTP_Repository_somDumpSelf *somTD_Repository_somDumpSelf;
typedef void   SOMLINK somTP_Repository_somDumpSelfInt(Repository *somSelf, 
		long level);
typedef somTP_Repository_somDumpSelfInt *somTD_Repository_somDumpSelfInt;
typedef void   SOMLINK somTP_Repository_somDefaultCopyInit(Repository *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Repository_somDefaultCopyInit *somTD_Repository_somDefaultCopyInit;
typedef Repository*   SOMLINK somTP_Repository_somDefaultAssign(Repository *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Repository_somDefaultAssign *somTD_Repository_somDefaultAssign;
typedef void   SOMLINK somTP_Repository_somDefaultConstCopyInit(Repository *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Repository_somDefaultConstCopyInit *somTD_Repository_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_Repository_somDefaultVCopyInit(Repository *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Repository_somDefaultVCopyInit *somTD_Repository_somDefaultVCopyInit;
typedef void   SOMLINK somTP_Repository_somDefaultConstVCopyInit(Repository *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Repository_somDefaultConstVCopyInit *somTD_Repository_somDefaultConstVCopyInit;
typedef Repository*   SOMLINK somTP_Repository_somDefaultConstAssign(Repository *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Repository_somDefaultConstAssign *somTD_Repository_somDefaultConstAssign;
typedef Repository*   SOMLINK somTP_Repository_somDefaultVAssign(Repository *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Repository_somDefaultVAssign *somTD_Repository_somDefaultVAssign;
typedef Repository*   SOMLINK somTP_Repository_somDefaultConstVAssign(Repository *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_Repository_somDefaultConstVAssign *somTD_Repository_somDefaultConstVAssign;
typedef void   SOMLINK somTP_Repository_somInit(Repository *somSelf);
typedef somTP_Repository_somInit *somTD_Repository_somInit;
typedef void   SOMLINK somTP_Repository_somFree(Repository *somSelf);
typedef somTP_Repository_somFree *somTD_Repository_somFree;
typedef void   SOMLINK somTP_Repository_somUninit(Repository *somSelf);
typedef somTP_Repository_somUninit *somTD_Repository_somUninit;
typedef SOMClass*   SOMLINK somTP_Repository_somGetClass(Repository *somSelf);
typedef somTP_Repository_somGetClass *somTD_Repository_somGetClass;
typedef string   SOMLINK somTP_Repository_somGetClassName(Repository *somSelf);
typedef somTP_Repository_somGetClassName *somTD_Repository_somGetClassName;
typedef long   SOMLINK somTP_Repository_somGetSize(Repository *somSelf);
typedef somTP_Repository_somGetSize *somTD_Repository_somGetSize;
typedef boolean   SOMLINK somTP_Repository_somIsA(Repository *somSelf, 
		SOMClass* aClassObj);
typedef somTP_Repository_somIsA *somTD_Repository_somIsA;
typedef boolean   SOMLINK somTP_Repository_somIsInstanceOf(Repository *somSelf, 
		SOMClass* aClassObj);
typedef somTP_Repository_somIsInstanceOf *somTD_Repository_somIsInstanceOf;
typedef boolean   SOMLINK somTP_Repository_somRespondsTo(Repository *somSelf, 
		somId mId);
typedef somTP_Repository_somRespondsTo *somTD_Repository_somRespondsTo;
typedef boolean   SOMLINK somTP_Repository_somDispatch(Repository *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_Repository_somDispatch *somTD_Repository_somDispatch;
typedef boolean   SOMLINK somTP_Repository_somClassDispatch(Repository *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_Repository_somClassDispatch *somTD_Repository_somClassDispatch;
typedef boolean   SOMLINK somTP_Repository_somCastObj(Repository *somSelf, 
		SOMClass* cls);
typedef somTP_Repository_somCastObj *somTD_Repository_somCastObj;
typedef boolean   SOMLINK somTP_Repository_somResetObj(Repository *somSelf);
typedef somTP_Repository_somResetObj *somTD_Repository_somResetObj;
typedef void   SOMLINK somTP_Repository_somDispatchV(Repository *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Repository_somDispatchV *somTD_Repository_somDispatchV;
typedef long   SOMLINK somTP_Repository_somDispatchL(Repository *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Repository_somDispatchL *somTD_Repository_somDispatchL;
typedef void*   SOMLINK somTP_Repository_somDispatchA(Repository *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Repository_somDispatchA *somTD_Repository_somDispatchA;
typedef double   SOMLINK somTP_Repository_somDispatchD(Repository *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_Repository_somDispatchD *somTD_Repository_somDispatchD;
typedef SOMObject*   SOMLINK somTP_Repository_somPrintSelf(Repository *somSelf);
typedef somTP_Repository_somPrintSelf *somTD_Repository_somPrintSelf;
}

#endif /* Repository_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Repository
 */
class Repository : public Container
{
/*
 *  The Repository interface provides global access to the SOM
 *  CORBA-compliant Interface Repository (IR).  To obtain an object
 *  reference to an instance of Repository, use the RepositoryNew
 *  function.
 * 
 *  See CORBA 1.1, 7.5.2, p.133
 */
public:

// Repository::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_Repository) RepositoryNewClass(Repository_MajorVersion,Repository_MinorVersion);
   return (void*)
      SOM_Resolve(_Repository,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_Repository));
}

// Repository::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

Repository& operator=(Repository& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

Repository()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (RepositoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

Repository(Repository* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (RepositoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
Repository(const Repository* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (RepositoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: lookup_id */
Contained*   lookup_id(Environment *ev, 
		string search_id)
{
/*
 *  Returns the object with a RepositoryId given by search_id.
 */
   return SOM_ResolveD(this,Repository,Repository,lookup_id)
	(this, ev,search_id);
}


/* method: lookup_modifier */
string   lookup_modifier(Environment *ev, 
		string name, 
		string modifier)
{
/*
 *  [SOM-unique extension]
 * 
 *  Returns the value string associated with the given SOM modifier
 *  for the object whose id is specified.  If the object does not
 *  exist or does not possess the modifier, NULL (or zero) is returned.
 *  If the modifier exists but does not have a value, a zero-length
 *  value string is returned.
 * 
 *  You must free the returned string when finished with it (using
 *  SOMFree).
 */
   return SOM_ResolveD(this,Repository,Repository,lookup_modifier)
	(this, ev,name,modifier);
}


/* method: release_cache */
void   release_cache(Environment *ev)
{
/*
 *  [SOM-unique extension]
 * 
 *  This method releases all currently unreferenced Interface Repository
 *  objects from the internal object cache.	This may release some storage
 *  at the cost of slowing down (slightly) the next few lookup operations.
 *  The internal cache will replenish itself (over time) with each
 *  subsequent lookup operation.
 */
   SOM_ResolveD(this,Repository,Repository,release_cache)
	(this, ev);
}


/* method: queryException */
boolean   queryException(Environment *ev)
{
/*
 *  [SOM-unique extension]
 * 
 *  This method returns TRUE if an exception condition was
 *  raised during the creation of the Repository object, otherwise
 *  it returns FALSE.  When the result is TRUE, the actual
 *  exception info may be found in the Environment passed in to
 *  the queryException operation.
 */
   return SOM_ResolveD(this,Repository,Repository,queryException)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: contents */
_IDL_SEQUENCE_Contained   contents(Environment *ev, 
		Container_InterfaceName limit_type, 
		boolean exclude_inherited)
{
/*
 *  Returns a list of objects contained by the receiving object.
 *  This operation is used to navigate thru the hierarchy of objects.
 *  Starting with the Repository object, use this operation to list
 *  all of the objects in the Repository, then all of the objects
 *  within the ModuleDef objects, then all of the objects in the
 *  InterfaceDefs, etc.
 * 
 *  If restrict_type is set to "all", objects of all interface types
 *  are returned, otherwise only objects of the requested interface type
 *  will be returned.  If exclude_inherited is set to TRUE, inherited
 *  objects, if any, will not be returned.
 * 
 *  You are responsible for freeing the contents of the returned
 *  sequence when you are finished with it.	Use a code fragment
 *  similar to the following to free it:
 * 
 * 	  if (containedSeq._length)
 * 	      long i;
 * 	      for(i=0; i<containedSeq._length; i++)
 * 		SOMObject_somFree(containedSeq._buffer[i]);
 * 	      SOMFree (containedSeq._buffer);
 */
   return SOM_ResolveD(this,Repository,Container,contents)
	(this, ev,limit_type,exclude_inherited);
}


/* method: lookup_name */
_IDL_SEQUENCE_Contained   lookup_name(Environment *ev, 
		Identifier search_name, 
		long levels_to_search, 
		Container_InterfaceName limit_type, 
		boolean exclude_inherited)
{
/*
 *  Locates an object by name within the receiving object, or within
 *  objects contained in the receiving object.  Search_name specifies
 *  the name of the object to be found.  Levels_to_search controls
 *  whether the lookup is constrained to the receiving object or
 *  whether it includes objects contained withing the receiving object.
 *  (Set levels_to_search to -1 to search the receiver and all contained
 *  objects, -- set it to 1 to search the receiver only.)  If
 *  limit_type is set to "all", objects of all interface types
 *  are returned, otherwise only objects of the requested interface type
 *  will be returned.  Only the values "AttributeDef", "ConstantDef",
 *  "ExceptionDef", "InterfaceDef", "ModuleDef", "ParameterDef",
 *  "OperationDef", "TypeDef", or "all" may be specified for limit_type.
 *  If exclude_inherited is set to TRUE, inherited objects will not be
 *  included in the returned sequence.
 * 
 *  You are responsible for freeing the contents of the returned
 *  sequence when you are finished with it.	Use a code fragment
 *  similar to the following to free it:
 * 
 * 	  if (containedSeq._length)
 * 	      long i;
 * 	      for(i=0; i<containedSeq._length; i++)
 * 		SOMObject_somFree(containedSeq._buffer[i]);
 * 	      SOMFree (containedSeq._buffer);
 */
   return SOM_ResolveD(this,Repository,Container,lookup_name)
	(this, ev,search_name,levels_to_search,limit_type,exclude_inherited);
}


/* method: describe_contents */
_IDL_SEQUENCE_Container_ContainerDescription   describe_contents(Environment *ev, 
		Container_InterfaceName limit_type, 
		boolean exclude_inherited, 
		long max_returned_objs)
{
/*
 *  Combines the "contents" operation and the "describe" operation.  For
 *  each object returned by the contents operation, the description of
 *  the object is returned by invoking its "describe" operation.
 * 
 *  Max_returned_objs can be used to limit the number of objects that can
 *  be returned.  If max_returned_objs is set to -1, results for all
 *  contained objects will be returned.
 * 
 *  Note: You should SOMFree result._buffer when you are done with it
 *  as well as result._buffer[x].value._value !
 */
   return SOM_ResolveD(this,Repository,Container,describe_contents)
	(this, ev,limit_type,exclude_inherited,max_returned_objs);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
   SOM_ResolveD(this,Repository,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
   SOM_ResolveD(this,Repository,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,Repository,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,Repository,SOMObject,somDumpSelfInt)
	(this,level);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,Repository,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
Repository*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,Repository,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,Repository,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,Repository,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,Repository,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
Repository*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,Repository,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
Repository*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,Repository,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
Repository*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,Repository,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,Repository,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,Repository,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,Repository,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,Repository,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,Repository,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,Repository,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,Repository,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,Repository,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,Repository,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   Repository_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,Repository,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,Repository,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   Repository_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,Repository,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,Repository,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,Repository,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,Repository,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   Repository_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,Repository,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,Repository,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   Repository_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,Repository,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,Repository,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   Repository_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,Repository,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,Repository,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   Repository_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,Repository,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,Repository,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,Repository,SOMObject,somPrintSelf)
	(this);
}



};   /* Repository */



#endif       /* SOM_Repository_xh */

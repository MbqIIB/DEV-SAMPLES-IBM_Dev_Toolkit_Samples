
/*
 * This file was generated by the SOM Compiler.
 * FileName: typedef.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

#ifndef SOM_TypeDef_xh
#define SOM_TypeDef_xh

class TypeDef;

/*
 *  This interface is used to access information associated with
 *  typedefs, unions, enums, & structs defined in an IDL file.
 * 
 *  See CORBA 1.1, 7.5.8, p.137
 */

#define TypeDef_MajorVersion 2
#define TypeDef_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */

    #include <somtcnst.xh>
    #include <somir.xh>
    #include <containd.xh>


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_Contained_xh
#include <containd.xh>
#endif

#ifndef TypeDef_API
#define TypeDef_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class Container;
typedef
struct TypeDef_TypeDescription {
Identifier name;
RepositoryId id;
RepositoryId defined_in;
TypeCode type;
} TypeDef_TypeDescription;
/*
 *  The inherited describe method returns an instance of this
 *  (TypeDescription) structure in the "value" member of the
 *  Description structure defined in the Contained interface.
 */


#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_TypeDescription
    #ifdef TypeDescription
        #undef TypeDescription
        #define SOMTGD_TypeDescription 1
    #else
        #define TypeDescription TypeDef_TypeDescription
    #endif /* TypeDescription */
#endif /* SOMTGD_TypeDescription */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the TypeDef Class */
SOMEXTERN SOMClass * SOMLINK TypeDefNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the TypeDef class object, and the methods it introduces. */
SOMEXTERN struct TypeDefClassDataStructure {
	SOMClass *classObject;
	somMToken _get_type;
	somMToken _set_type;
} SOMDLINK TypeDefClassData;
#define _TypeDef TypeDefClassData.classObject

/* The API to parentMtabs for TypeDef, and the instance data it introduces. */
SOMEXTERN struct TypeDefCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK TypeDefCClassData;

/*
 * -- Typedefs for TypeDef Method Procedures
 */
SOMEXTERN {
typedef TypeCode   SOMLINK somTP_TypeDef__get_type(TypeDef *somSelf, Environment *ev);
typedef somTP_TypeDef__get_type *somTD_TypeDef__get_type;
typedef void   SOMLINK somTP_TypeDef__set_type(TypeDef *somSelf, Environment *ev, 
		TypeCode type);
typedef somTP_TypeDef__set_type *somTD_TypeDef__set_type;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef Identifier   SOMLINK somTP_TypeDef__get_name(TypeDef *somSelf, Environment *ev);
typedef somTP_TypeDef__get_name *somTD_TypeDef__get_name;
typedef void   SOMLINK somTP_TypeDef__set_name(TypeDef *somSelf, Environment *ev, 
		Identifier name);
typedef somTP_TypeDef__set_name *somTD_TypeDef__set_name;
typedef RepositoryId   SOMLINK somTP_TypeDef__get_id(TypeDef *somSelf, Environment *ev);
typedef somTP_TypeDef__get_id *somTD_TypeDef__get_id;
typedef void   SOMLINK somTP_TypeDef__set_id(TypeDef *somSelf, Environment *ev, 
		RepositoryId id);
typedef somTP_TypeDef__set_id *somTD_TypeDef__set_id;
typedef RepositoryId   SOMLINK somTP_TypeDef__get_defined_in(TypeDef *somSelf, Environment *ev);
typedef somTP_TypeDef__get_defined_in *somTD_TypeDef__get_defined_in;
typedef void   SOMLINK somTP_TypeDef__set_defined_in(TypeDef *somSelf, Environment *ev, 
		RepositoryId defined_in);
typedef somTP_TypeDef__set_defined_in *somTD_TypeDef__set_defined_in;
typedef _IDL_SEQUENCE_somModifier   SOMLINK somTP_TypeDef__get_somModifiers(TypeDef *somSelf, Environment *ev);
typedef somTP_TypeDef__get_somModifiers *somTD_TypeDef__get_somModifiers;
typedef void   SOMLINK somTP_TypeDef__set_somModifiers(TypeDef *somSelf, Environment *ev, 
		_IDL_SEQUENCE_somModifier* somModifiers);
typedef somTP_TypeDef__set_somModifiers *somTD_TypeDef__set_somModifiers;
typedef _IDL_SEQUENCE_Container   SOMLINK somTP_TypeDef_within(TypeDef *somSelf, Environment *ev);
typedef somTP_TypeDef_within *somTD_TypeDef_within;
typedef Contained_Description   SOMLINK somTP_TypeDef_describe(TypeDef *somSelf, Environment *ev);
typedef somTP_TypeDef_describe *somTD_TypeDef_describe;
typedef void   SOMLINK somTP_TypeDef_somFree(TypeDef *somSelf);
typedef somTP_TypeDef_somFree *somTD_TypeDef_somFree;
typedef void   SOMLINK somTP_TypeDef_somDefaultInit(TypeDef *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_TypeDef_somDefaultInit *somTD_TypeDef_somDefaultInit;
typedef void   SOMLINK somTP_TypeDef_somDestruct(TypeDef *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_TypeDef_somDestruct *somTD_TypeDef_somDestruct;
typedef void   SOMLINK somTP_TypeDef_somDumpSelf(TypeDef *somSelf, 
		long level);
typedef somTP_TypeDef_somDumpSelf *somTD_TypeDef_somDumpSelf;
typedef void   SOMLINK somTP_TypeDef_somDumpSelfInt(TypeDef *somSelf, 
		long level);
typedef somTP_TypeDef_somDumpSelfInt *somTD_TypeDef_somDumpSelfInt;
typedef void   SOMLINK somTP_TypeDef_somDefaultCopyInit(TypeDef *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_TypeDef_somDefaultCopyInit *somTD_TypeDef_somDefaultCopyInit;
typedef TypeDef*   SOMLINK somTP_TypeDef_somDefaultAssign(TypeDef *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_TypeDef_somDefaultAssign *somTD_TypeDef_somDefaultAssign;
typedef void   SOMLINK somTP_TypeDef_somDefaultConstCopyInit(TypeDef *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_TypeDef_somDefaultConstCopyInit *somTD_TypeDef_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_TypeDef_somDefaultVCopyInit(TypeDef *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_TypeDef_somDefaultVCopyInit *somTD_TypeDef_somDefaultVCopyInit;
typedef void   SOMLINK somTP_TypeDef_somDefaultConstVCopyInit(TypeDef *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_TypeDef_somDefaultConstVCopyInit *somTD_TypeDef_somDefaultConstVCopyInit;
typedef TypeDef*   SOMLINK somTP_TypeDef_somDefaultConstAssign(TypeDef *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_TypeDef_somDefaultConstAssign *somTD_TypeDef_somDefaultConstAssign;
typedef TypeDef*   SOMLINK somTP_TypeDef_somDefaultVAssign(TypeDef *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_TypeDef_somDefaultVAssign *somTD_TypeDef_somDefaultVAssign;
typedef TypeDef*   SOMLINK somTP_TypeDef_somDefaultConstVAssign(TypeDef *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_TypeDef_somDefaultConstVAssign *somTD_TypeDef_somDefaultConstVAssign;
typedef void   SOMLINK somTP_TypeDef_somInit(TypeDef *somSelf);
typedef somTP_TypeDef_somInit *somTD_TypeDef_somInit;
typedef void   SOMLINK somTP_TypeDef_somUninit(TypeDef *somSelf);
typedef somTP_TypeDef_somUninit *somTD_TypeDef_somUninit;
typedef SOMClass*   SOMLINK somTP_TypeDef_somGetClass(TypeDef *somSelf);
typedef somTP_TypeDef_somGetClass *somTD_TypeDef_somGetClass;
typedef string   SOMLINK somTP_TypeDef_somGetClassName(TypeDef *somSelf);
typedef somTP_TypeDef_somGetClassName *somTD_TypeDef_somGetClassName;
typedef long   SOMLINK somTP_TypeDef_somGetSize(TypeDef *somSelf);
typedef somTP_TypeDef_somGetSize *somTD_TypeDef_somGetSize;
typedef boolean   SOMLINK somTP_TypeDef_somIsA(TypeDef *somSelf, 
		SOMClass* aClassObj);
typedef somTP_TypeDef_somIsA *somTD_TypeDef_somIsA;
typedef boolean   SOMLINK somTP_TypeDef_somIsInstanceOf(TypeDef *somSelf, 
		SOMClass* aClassObj);
typedef somTP_TypeDef_somIsInstanceOf *somTD_TypeDef_somIsInstanceOf;
typedef boolean   SOMLINK somTP_TypeDef_somRespondsTo(TypeDef *somSelf, 
		somId mId);
typedef somTP_TypeDef_somRespondsTo *somTD_TypeDef_somRespondsTo;
typedef boolean   SOMLINK somTP_TypeDef_somDispatch(TypeDef *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_TypeDef_somDispatch *somTD_TypeDef_somDispatch;
typedef boolean   SOMLINK somTP_TypeDef_somClassDispatch(TypeDef *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_TypeDef_somClassDispatch *somTD_TypeDef_somClassDispatch;
typedef boolean   SOMLINK somTP_TypeDef_somCastObj(TypeDef *somSelf, 
		SOMClass* cls);
typedef somTP_TypeDef_somCastObj *somTD_TypeDef_somCastObj;
typedef boolean   SOMLINK somTP_TypeDef_somResetObj(TypeDef *somSelf);
typedef somTP_TypeDef_somResetObj *somTD_TypeDef_somResetObj;
typedef void   SOMLINK somTP_TypeDef_somDispatchV(TypeDef *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_TypeDef_somDispatchV *somTD_TypeDef_somDispatchV;
typedef long   SOMLINK somTP_TypeDef_somDispatchL(TypeDef *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_TypeDef_somDispatchL *somTD_TypeDef_somDispatchL;
typedef void*   SOMLINK somTP_TypeDef_somDispatchA(TypeDef *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_TypeDef_somDispatchA *somTD_TypeDef_somDispatchA;
typedef double   SOMLINK somTP_TypeDef_somDispatchD(TypeDef *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_TypeDef_somDispatchD *somTD_TypeDef_somDispatchD;
typedef SOMObject*   SOMLINK somTP_TypeDef_somPrintSelf(TypeDef *somSelf);
typedef somTP_TypeDef_somPrintSelf *somTD_TypeDef_somPrintSelf;
}

#endif /* TypeDef_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for TypeDef
 */
class TypeDef : public Contained
{
/*
 *  This interface is used to access information associated with
 *  typedefs, unions, enums, & structs defined in an IDL file.
 * 
 *  See CORBA 1.1, 7.5.8, p.137
 */
public:

// TypeDef::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_TypeDef) TypeDefNewClass(TypeDef_MajorVersion,TypeDef_MinorVersion);
   return (void*)
      SOM_Resolve(_TypeDef,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_TypeDef));
}

// TypeDef::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

TypeDef& operator=(TypeDef& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

TypeDef()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (TypeDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

TypeDef(TypeDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (TypeDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
TypeDef(const TypeDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (TypeDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: _get_type */
TypeCode   _get_type(Environment *ev)
{
/*
 *  The TypeCode of the receiving object.  The memory used to hold
 *  the TypeCode is contained in the receiving object, which retains
 *  ownership.  Hence, do not free the returned TypeCode.  If you want
 *  to obtain a separate copy, use the TypeCode_copy operation.
 */
   return SOM_ResolveD(this,TypeDef,TypeDef,_get_type)
	(this, ev);
}


/* method: _set_type */
void   _set_type(Environment *ev, 
		TypeCode type)
{
/*
 *  The TypeCode of the receiving object.  The memory used to hold
 *  the TypeCode is contained in the receiving object, which retains
 *  ownership.  Hence, do not free the returned TypeCode.  If you want
 *  to obtain a separate copy, use the TypeCode_copy operation.
 */
   SOM_ResolveD(this,TypeDef,TypeDef,_set_type)
	(this, ev,type);
}


/*
 * Reintroduce inherited methods
 */

/* method: _get_name */
Identifier   _get_name(Environment *ev)
{
/*
 *  The value of the "name" field of the receiving object
 * 
 *  This is a simple name that indentifies the receiving object
 *  within its containment hierarchy.  Outside of the containment
 *  hierarchy this name is not necessarily unique, and may require
 *  qualification by ModuleDef name, InterfaceDef name, etc.
 */
   return SOM_ResolveD(this,TypeDef,Contained,_get_name)
	(this, ev);
}


/* method: _set_name */
void   _set_name(Environment *ev, 
		Identifier name)
{
/*
 *  The value of the "name" field of the receiving object
 * 
 *  This is a simple name that indentifies the receiving object
 *  within its containment hierarchy.  Outside of the containment
 *  hierarchy this name is not necessarily unique, and may require
 *  qualification by ModuleDef name, InterfaceDef name, etc.
 */
   SOM_ResolveD(this,TypeDef,Contained,_set_name)
	(this, ev,name);
}


/* method: _get_id */
RepositoryId   _get_id(Environment *ev)
{
/*
 *  The value of the "id" field of the receiving object
 * 
 *  The "id" is a string that uniquely identifies any object in
 *  the interface repository.  No qualification is needed for
 *  an "id".  Notice that "RepositoryId"s have no relationship
 *  to the SOM type "somId".
 */
   return SOM_ResolveD(this,TypeDef,Contained,_get_id)
	(this, ev);
}


/* method: _set_id */
void   _set_id(Environment *ev, 
		RepositoryId id)
{
/*
 *  The value of the "id" field of the receiving object
 * 
 *  The "id" is a string that uniquely identifies any object in
 *  the interface repository.  No qualification is needed for
 *  an "id".  Notice that "RepositoryId"s have no relationship
 *  to the SOM type "somId".
 */
   SOM_ResolveD(this,TypeDef,Contained,_set_id)
	(this, ev,id);
}


/* method: _get_defined_in */
RepositoryId   _get_defined_in(Environment *ev)
{
/*
 *  The value of the "defined_in" field of the receiving object
 * 
 *  This "id" uniquely identifies the container where the
 *  receiving object is defined.  Objects that have global scope
 *  and do not appear within any other objects are by default
 *  placed in the "Repository" object.
 */
   return SOM_ResolveD(this,TypeDef,Contained,_get_defined_in)
	(this, ev);
}


/* method: _set_defined_in */
void   _set_defined_in(Environment *ev, 
		RepositoryId defined_in)
{
/*
 *  The value of the "defined_in" field of the receiving object
 * 
 *  This "id" uniquely identifies the container where the
 *  receiving object is defined.  Objects that have global scope
 *  and do not appear within any other objects are by default
 *  placed in the "Repository" object.
 */
   SOM_ResolveD(this,TypeDef,Contained,_set_defined_in)
	(this, ev,defined_in);
}


/* method: _get_somModifiers */
_IDL_SEQUENCE_somModifier   _get_somModifiers(Environment *ev)
{
/*
 *  [SOM-unique extension]
 * 
 *  The somModifiers attribute is a sequence containing all of
 *  the "modifiers" attached to the corresponding IDL object in
 *  the SOM-unique implementation section of the IDL file where
 *  the receiving object was originally defined.
 */
   return SOM_ResolveD(this,TypeDef,Contained,_get_somModifiers)
	(this, ev);
}


/* method: _set_somModifiers */
void   _set_somModifiers(Environment *ev, 
		_IDL_SEQUENCE_somModifier* somModifiers)
{
/*
 *  [SOM-unique extension]
 * 
 *  The somModifiers attribute is a sequence containing all of
 *  the "modifiers" attached to the corresponding IDL object in
 *  the SOM-unique implementation section of the IDL file where
 *  the receiving object was originally defined.
 */
   SOM_ResolveD(this,TypeDef,Contained,_set_somModifiers)
	(this, ev,somModifiers);
}


/* method: within */
_IDL_SEQUENCE_Container   within(Environment *ev)
{
/*
 *  Returns a list of objects that contain the receiving object.
 *  If the object is an interface or module, it can only be contained
 *  by the object that defines it.  Other objects can be contained by
 *  objects that define or inherit them.
 * 
 *  When you have finished using the sequence returned by this method
 *  it is your responsibility to release the storage allocated for it.
 *  To free the sequence, use a call similar to the following:
 * 
 * 	  if (seqname._length)
 * 	      long i;
 * 	      for(i=0; i<seqname._length; i++)
 * 		_somFree(seqname._buffer[i]);
 * 	      SOMFree (seqname._buffer);
 */
   return SOM_ResolveD(this,TypeDef,Contained,within)
	(this, ev);
}


/* method: describe */
Contained_Description   describe(Environment *ev)
{
/*
 *  Returns a structure containing all of the attributes defined in
 *  the interface of the receiving object.
 * 
 *  Warning: this method returns pointers to things withing objects
 *  (for example, name).  Don't use the somFree method to release
 *  any of these objects while this information is still needed..
 * 
 *  When you have finished using the information in the returned
 *  Description structure, it is your responsibility to release
 *  the associated storage using a call similar to the following:
 * 
 * 	  if (desc.value._value)
 * 	      SOMFree (desc.value._value);
 */
   return SOM_ResolveD(this,TypeDef,Contained,describe)
	(this, ev);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,TypeDef,SOMObject,somFree)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
   SOM_ResolveD(this,TypeDef,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
   SOM_ResolveD(this,TypeDef,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,TypeDef,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,TypeDef,SOMObject,somDumpSelfInt)
	(this,level);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,TypeDef,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
TypeDef*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,TypeDef,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,TypeDef,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,TypeDef,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,TypeDef,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
TypeDef*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,TypeDef,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
TypeDef*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,TypeDef,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
TypeDef*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,TypeDef,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,TypeDef,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,TypeDef,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,TypeDef,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,TypeDef,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,TypeDef,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,TypeDef,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,TypeDef,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,TypeDef,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   TypeDef_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,TypeDef,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,TypeDef,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   TypeDef_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,TypeDef,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,TypeDef,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,TypeDef,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,TypeDef,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   TypeDef_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,TypeDef,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,TypeDef,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   TypeDef_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,TypeDef,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,TypeDef,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   TypeDef_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,TypeDef,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,TypeDef,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   TypeDef_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,TypeDef,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,TypeDef,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,TypeDef,SOMObject,somPrintSelf)
	(this);
}



};   /* TypeDef */



#endif       /* SOM_TypeDef_xh */

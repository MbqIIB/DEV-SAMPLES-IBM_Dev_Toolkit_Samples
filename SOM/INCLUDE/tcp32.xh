
/*
 * This file was generated by the SOM Compiler.
 * FileName: tcp32.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    COMPONENT_NAME: somu
 * 
 *    ORIGINS: 27
 * 
 * 
 *    10H9767, 10H9769  (C) COPYRIGHT International Business Machines Corp. 1992,1994
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *  @(#) 1.3 src/soms/tcp32.idl, somu, som2.1 9/1/94 17:47:28 [7/30/96 15:25:09]
 */


#ifndef SOM_TCPIPSockets32_xh
#define SOM_TCPIPSockets32_xh

class TCPIPSockets32;

#define TCPIPSockets32_MajorVersion 2
#define TCPIPSockets32_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_Sockets_xh
#include <somssock.xh>
#endif

/*
 * C++ metaclass def
 */
#include <snglicls.xh>

#ifndef TCPIPSockets32_API
#define TCPIPSockets32_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the TCPIPSockets32 Class */
class SOMMSingleInstance;
SOMEXTERN SOMMSingleInstance * SOMLINK TCPIPSockets32NewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the TCPIPSockets32 class object, and the methods it introduces. */
SOMEXTERN struct TCPIPSockets32ClassDataStructure {
	SOMMSingleInstance *classObject;
} SOMDLINK TCPIPSockets32ClassData;
#define _TCPIPSockets32 TCPIPSockets32ClassData.classObject

/* The API to parentMtabs for TCPIPSockets32, and the instance data it introduces. */
SOMEXTERN struct TCPIPSockets32CClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK TCPIPSockets32CClassData;

/*
 * -- Typedefs for TCPIPSockets32 Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef long   SOMLINK somTP_TCPIPSockets32_somsAccept(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		sockaddr* name, 
		long* namelen);
typedef somTP_TCPIPSockets32_somsAccept *somTD_TCPIPSockets32_somsAccept;
typedef long   SOMLINK somTP_TCPIPSockets32_somsBind(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		sockaddr* name, 
		long namelen);
typedef somTP_TCPIPSockets32_somsBind *somTD_TCPIPSockets32_somsBind;
typedef long   SOMLINK somTP_TCPIPSockets32_somsConnect(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		sockaddr* name, 
		long namelen);
typedef somTP_TCPIPSockets32_somsConnect *somTD_TCPIPSockets32_somsConnect;
typedef hostent*   SOMLINK somTP_TCPIPSockets32_somsGethostbyaddr(TCPIPSockets32 *somSelf, Environment *ev, 
		char* addr, 
		long addrlen, 
		long domain);
typedef somTP_TCPIPSockets32_somsGethostbyaddr *somTD_TCPIPSockets32_somsGethostbyaddr;
typedef hostent*   SOMLINK somTP_TCPIPSockets32_somsGethostbyname(TCPIPSockets32 *somSelf, Environment *ev, 
		string name);
typedef somTP_TCPIPSockets32_somsGethostbyname *somTD_TCPIPSockets32_somsGethostbyname;
typedef hostent*   SOMLINK somTP_TCPIPSockets32_somsGethostent(TCPIPSockets32 *somSelf, Environment *ev);
typedef somTP_TCPIPSockets32_somsGethostent *somTD_TCPIPSockets32_somsGethostent;
typedef unsigned long   SOMLINK somTP_TCPIPSockets32_somsGethostid(TCPIPSockets32 *somSelf, Environment *ev);
typedef somTP_TCPIPSockets32_somsGethostid *somTD_TCPIPSockets32_somsGethostid;
typedef long   SOMLINK somTP_TCPIPSockets32_somsGethostname(TCPIPSockets32 *somSelf, Environment *ev, 
		string name, 
		long namelength);
typedef somTP_TCPIPSockets32_somsGethostname *somTD_TCPIPSockets32_somsGethostname;
typedef long   SOMLINK somTP_TCPIPSockets32_somsGetpeername(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		sockaddr* name, 
		long* namelen);
typedef somTP_TCPIPSockets32_somsGetpeername *somTD_TCPIPSockets32_somsGetpeername;
typedef servent*   SOMLINK somTP_TCPIPSockets32_somsGetservbyname(TCPIPSockets32 *somSelf, Environment *ev, 
		string name, 
		string protocol);
typedef somTP_TCPIPSockets32_somsGetservbyname *somTD_TCPIPSockets32_somsGetservbyname;
typedef long   SOMLINK somTP_TCPIPSockets32_somsGetsockname(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		sockaddr* name, 
		long* namelen);
typedef somTP_TCPIPSockets32_somsGetsockname *somTD_TCPIPSockets32_somsGetsockname;
typedef long   SOMLINK somTP_TCPIPSockets32_somsGetsockopt(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		long level, 
		long optname, 
		char* optval, 
		long* option);
typedef somTP_TCPIPSockets32_somsGetsockopt *somTD_TCPIPSockets32_somsGetsockopt;
typedef unsigned long   SOMLINK somTP_TCPIPSockets32_somsHtonl(TCPIPSockets32 *somSelf, Environment *ev, 
		unsigned long a);
typedef somTP_TCPIPSockets32_somsHtonl *somTD_TCPIPSockets32_somsHtonl;
typedef unsigned short   SOMLINK somTP_TCPIPSockets32_somsHtons(TCPIPSockets32 *somSelf, Environment *ev, 
		unsigned short a);
typedef somTP_TCPIPSockets32_somsHtons *somTD_TCPIPSockets32_somsHtons;
typedef long   SOMLINK somTP_TCPIPSockets32_somsIoctl(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		long cmd, 
		char* data, 
		long length);
typedef somTP_TCPIPSockets32_somsIoctl *somTD_TCPIPSockets32_somsIoctl;
typedef unsigned long   SOMLINK somTP_TCPIPSockets32_somsInet_addr(TCPIPSockets32 *somSelf, Environment *ev, 
		string cp);
typedef somTP_TCPIPSockets32_somsInet_addr *somTD_TCPIPSockets32_somsInet_addr;
typedef unsigned long   SOMLINK somTP_TCPIPSockets32_somsInet_lnaof(TCPIPSockets32 *somSelf, Environment *ev, 
		in_addr* addr);
typedef somTP_TCPIPSockets32_somsInet_lnaof *somTD_TCPIPSockets32_somsInet_lnaof;
typedef in_addr   SOMLINK somTP_TCPIPSockets32_somsInet_makeaddr(TCPIPSockets32 *somSelf, Environment *ev, 
		unsigned long net, 
		unsigned long lna);
typedef somTP_TCPIPSockets32_somsInet_makeaddr *somTD_TCPIPSockets32_somsInet_makeaddr;
typedef unsigned long   SOMLINK somTP_TCPIPSockets32_somsInet_netof(TCPIPSockets32 *somSelf, Environment *ev, 
		in_addr* addr);
typedef somTP_TCPIPSockets32_somsInet_netof *somTD_TCPIPSockets32_somsInet_netof;
typedef unsigned long   SOMLINK somTP_TCPIPSockets32_somsInet_network(TCPIPSockets32 *somSelf, Environment *ev, 
		string cp);
typedef somTP_TCPIPSockets32_somsInet_network *somTD_TCPIPSockets32_somsInet_network;
typedef string   SOMLINK somTP_TCPIPSockets32_somsInet_ntoa(TCPIPSockets32 *somSelf, Environment *ev, 
		in_addr* addr);
typedef somTP_TCPIPSockets32_somsInet_ntoa *somTD_TCPIPSockets32_somsInet_ntoa;
typedef long   SOMLINK somTP_TCPIPSockets32_somsListen(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		long backlog);
typedef somTP_TCPIPSockets32_somsListen *somTD_TCPIPSockets32_somsListen;
typedef unsigned long   SOMLINK somTP_TCPIPSockets32_somsNtohl(TCPIPSockets32 *somSelf, Environment *ev, 
		unsigned long a);
typedef somTP_TCPIPSockets32_somsNtohl *somTD_TCPIPSockets32_somsNtohl;
typedef unsigned short   SOMLINK somTP_TCPIPSockets32_somsNtohs(TCPIPSockets32 *somSelf, Environment *ev, 
		unsigned short a);
typedef somTP_TCPIPSockets32_somsNtohs *somTD_TCPIPSockets32_somsNtohs;
typedef long   SOMLINK somTP_TCPIPSockets32_somsReadv(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		iovec* iov, 
		long iovcnt);
typedef somTP_TCPIPSockets32_somsReadv *somTD_TCPIPSockets32_somsReadv;
typedef long   SOMLINK somTP_TCPIPSockets32_somsRecv(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		char* buf, 
		long len, 
		long flags);
typedef somTP_TCPIPSockets32_somsRecv *somTD_TCPIPSockets32_somsRecv;
typedef long   SOMLINK somTP_TCPIPSockets32_somsRecvfrom(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		char* buf, 
		long len, 
		long flags, 
		sockaddr* name, 
		long* namelen);
typedef somTP_TCPIPSockets32_somsRecvfrom *somTD_TCPIPSockets32_somsRecvfrom;
typedef long   SOMLINK somTP_TCPIPSockets32_somsRecvmsg(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		msghdr* msg, 
		long flags);
typedef somTP_TCPIPSockets32_somsRecvmsg *somTD_TCPIPSockets32_somsRecvmsg;
typedef long   SOMLINK somTP_TCPIPSockets32_somsSelect(TCPIPSockets32 *somSelf, Environment *ev, 
		long nfds, 
		fd_set* readfds, 
		fd_set* writefds, 
		fd_set* exceptfds, 
		timeval* timeout);
typedef somTP_TCPIPSockets32_somsSelect *somTD_TCPIPSockets32_somsSelect;
typedef long   SOMLINK somTP_TCPIPSockets32_somsSend(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		char* msg, 
		long len, 
		long flags);
typedef somTP_TCPIPSockets32_somsSend *somTD_TCPIPSockets32_somsSend;
typedef long   SOMLINK somTP_TCPIPSockets32_somsSendmsg(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		msghdr* msg, 
		long flags);
typedef somTP_TCPIPSockets32_somsSendmsg *somTD_TCPIPSockets32_somsSendmsg;
typedef long   SOMLINK somTP_TCPIPSockets32_somsSendto(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		char* msg, 
		long len, 
		long flags, 
		sockaddr* to, 
		long tolen);
typedef somTP_TCPIPSockets32_somsSendto *somTD_TCPIPSockets32_somsSendto;
typedef long   SOMLINK somTP_TCPIPSockets32_somsSetsockopt(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		long level, 
		long optname, 
		char* optval, 
		long optlen);
typedef somTP_TCPIPSockets32_somsSetsockopt *somTD_TCPIPSockets32_somsSetsockopt;
typedef long   SOMLINK somTP_TCPIPSockets32_somsShutdown(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		long how);
typedef somTP_TCPIPSockets32_somsShutdown *somTD_TCPIPSockets32_somsShutdown;
typedef long   SOMLINK somTP_TCPIPSockets32_somsSocket(TCPIPSockets32 *somSelf, Environment *ev, 
		long domain, 
		long type, 
		long protocol);
typedef somTP_TCPIPSockets32_somsSocket *somTD_TCPIPSockets32_somsSocket;
typedef long   SOMLINK somTP_TCPIPSockets32_somsSoclose(TCPIPSockets32 *somSelf, Environment *ev, 
		long s);
typedef somTP_TCPIPSockets32_somsSoclose *somTD_TCPIPSockets32_somsSoclose;
typedef long   SOMLINK somTP_TCPIPSockets32_somsWritev(TCPIPSockets32 *somSelf, Environment *ev, 
		long s, 
		iovec* iov, 
		long iovcnt);
typedef somTP_TCPIPSockets32_somsWritev *somTD_TCPIPSockets32_somsWritev;
typedef long   SOMLINK somTP_TCPIPSockets32__get_serrno(TCPIPSockets32 *somSelf, Environment *ev);
typedef somTP_TCPIPSockets32__get_serrno *somTD_TCPIPSockets32__get_serrno;
typedef void   SOMLINK somTP_TCPIPSockets32__set_serrno(TCPIPSockets32 *somSelf, Environment *ev, 
		long serrno);
typedef somTP_TCPIPSockets32__set_serrno *somTD_TCPIPSockets32__set_serrno;
typedef void   SOMLINK somTP_TCPIPSockets32_somDefaultInit(TCPIPSockets32 *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_TCPIPSockets32_somDefaultInit *somTD_TCPIPSockets32_somDefaultInit;
typedef void   SOMLINK somTP_TCPIPSockets32_somDestruct(TCPIPSockets32 *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_TCPIPSockets32_somDestruct *somTD_TCPIPSockets32_somDestruct;
typedef void   SOMLINK somTP_TCPIPSockets32_somDefaultCopyInit(TCPIPSockets32 *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_TCPIPSockets32_somDefaultCopyInit *somTD_TCPIPSockets32_somDefaultCopyInit;
typedef TCPIPSockets32*   SOMLINK somTP_TCPIPSockets32_somDefaultAssign(TCPIPSockets32 *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_TCPIPSockets32_somDefaultAssign *somTD_TCPIPSockets32_somDefaultAssign;
typedef void   SOMLINK somTP_TCPIPSockets32_somDefaultConstCopyInit(TCPIPSockets32 *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_TCPIPSockets32_somDefaultConstCopyInit *somTD_TCPIPSockets32_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_TCPIPSockets32_somDefaultVCopyInit(TCPIPSockets32 *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_TCPIPSockets32_somDefaultVCopyInit *somTD_TCPIPSockets32_somDefaultVCopyInit;
typedef void   SOMLINK somTP_TCPIPSockets32_somDefaultConstVCopyInit(TCPIPSockets32 *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_TCPIPSockets32_somDefaultConstVCopyInit *somTD_TCPIPSockets32_somDefaultConstVCopyInit;
typedef TCPIPSockets32*   SOMLINK somTP_TCPIPSockets32_somDefaultConstAssign(TCPIPSockets32 *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_TCPIPSockets32_somDefaultConstAssign *somTD_TCPIPSockets32_somDefaultConstAssign;
typedef TCPIPSockets32*   SOMLINK somTP_TCPIPSockets32_somDefaultVAssign(TCPIPSockets32 *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_TCPIPSockets32_somDefaultVAssign *somTD_TCPIPSockets32_somDefaultVAssign;
typedef TCPIPSockets32*   SOMLINK somTP_TCPIPSockets32_somDefaultConstVAssign(TCPIPSockets32 *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_TCPIPSockets32_somDefaultConstVAssign *somTD_TCPIPSockets32_somDefaultConstVAssign;
typedef void   SOMLINK somTP_TCPIPSockets32_somInit(TCPIPSockets32 *somSelf);
typedef somTP_TCPIPSockets32_somInit *somTD_TCPIPSockets32_somInit;
typedef void   SOMLINK somTP_TCPIPSockets32_somFree(TCPIPSockets32 *somSelf);
typedef somTP_TCPIPSockets32_somFree *somTD_TCPIPSockets32_somFree;
typedef void   SOMLINK somTP_TCPIPSockets32_somUninit(TCPIPSockets32 *somSelf);
typedef somTP_TCPIPSockets32_somUninit *somTD_TCPIPSockets32_somUninit;
typedef SOMMSingleInstance*   SOMLINK somTP_TCPIPSockets32_somGetClass(TCPIPSockets32 *somSelf);
typedef somTP_TCPIPSockets32_somGetClass *somTD_TCPIPSockets32_somGetClass;
typedef string   SOMLINK somTP_TCPIPSockets32_somGetClassName(TCPIPSockets32 *somSelf);
typedef somTP_TCPIPSockets32_somGetClassName *somTD_TCPIPSockets32_somGetClassName;
typedef long   SOMLINK somTP_TCPIPSockets32_somGetSize(TCPIPSockets32 *somSelf);
typedef somTP_TCPIPSockets32_somGetSize *somTD_TCPIPSockets32_somGetSize;
typedef boolean   SOMLINK somTP_TCPIPSockets32_somIsA(TCPIPSockets32 *somSelf, 
		SOMClass* aClassObj);
typedef somTP_TCPIPSockets32_somIsA *somTD_TCPIPSockets32_somIsA;
typedef boolean   SOMLINK somTP_TCPIPSockets32_somIsInstanceOf(TCPIPSockets32 *somSelf, 
		SOMClass* aClassObj);
typedef somTP_TCPIPSockets32_somIsInstanceOf *somTD_TCPIPSockets32_somIsInstanceOf;
typedef boolean   SOMLINK somTP_TCPIPSockets32_somRespondsTo(TCPIPSockets32 *somSelf, 
		somId mId);
typedef somTP_TCPIPSockets32_somRespondsTo *somTD_TCPIPSockets32_somRespondsTo;
typedef boolean   SOMLINK somTP_TCPIPSockets32_somDispatch(TCPIPSockets32 *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_TCPIPSockets32_somDispatch *somTD_TCPIPSockets32_somDispatch;
typedef boolean   SOMLINK somTP_TCPIPSockets32_somClassDispatch(TCPIPSockets32 *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_TCPIPSockets32_somClassDispatch *somTD_TCPIPSockets32_somClassDispatch;
typedef boolean   SOMLINK somTP_TCPIPSockets32_somCastObj(TCPIPSockets32 *somSelf, 
		SOMClass* cls);
typedef somTP_TCPIPSockets32_somCastObj *somTD_TCPIPSockets32_somCastObj;
typedef boolean   SOMLINK somTP_TCPIPSockets32_somResetObj(TCPIPSockets32 *somSelf);
typedef somTP_TCPIPSockets32_somResetObj *somTD_TCPIPSockets32_somResetObj;
typedef void   SOMLINK somTP_TCPIPSockets32_somDispatchV(TCPIPSockets32 *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_TCPIPSockets32_somDispatchV *somTD_TCPIPSockets32_somDispatchV;
typedef long   SOMLINK somTP_TCPIPSockets32_somDispatchL(TCPIPSockets32 *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_TCPIPSockets32_somDispatchL *somTD_TCPIPSockets32_somDispatchL;
typedef void*   SOMLINK somTP_TCPIPSockets32_somDispatchA(TCPIPSockets32 *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_TCPIPSockets32_somDispatchA *somTD_TCPIPSockets32_somDispatchA;
typedef double   SOMLINK somTP_TCPIPSockets32_somDispatchD(TCPIPSockets32 *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_TCPIPSockets32_somDispatchD *somTD_TCPIPSockets32_somDispatchD;
typedef SOMObject*   SOMLINK somTP_TCPIPSockets32_somPrintSelf(TCPIPSockets32 *somSelf);
typedef somTP_TCPIPSockets32_somPrintSelf *somTD_TCPIPSockets32_somPrintSelf;
typedef void   SOMLINK somTP_TCPIPSockets32_somDumpSelf(TCPIPSockets32 *somSelf, 
		long level);
typedef somTP_TCPIPSockets32_somDumpSelf *somTD_TCPIPSockets32_somDumpSelf;
typedef void   SOMLINK somTP_TCPIPSockets32_somDumpSelfInt(TCPIPSockets32 *somSelf, 
		long level);
typedef somTP_TCPIPSockets32_somDumpSelfInt *somTD_TCPIPSockets32_somDumpSelfInt;
}

#endif /* TCPIPSockets32_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for TCPIPSockets32
 */
class TCPIPSockets32 : public Sockets
{
public:

// TCPIPSockets32::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_TCPIPSockets32) TCPIPSockets32NewClass(TCPIPSockets32_MajorVersion,TCPIPSockets32_MinorVersion);
   return (void*)
      SOM_Resolve(_TCPIPSockets32,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_TCPIPSockets32));
}

// TCPIPSockets32::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

TCPIPSockets32& operator=(TCPIPSockets32& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

TCPIPSockets32()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (TCPIPSockets32CClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

TCPIPSockets32(TCPIPSockets32* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (TCPIPSockets32CClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
TCPIPSockets32(const TCPIPSockets32* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (TCPIPSockets32CClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/*
 * Reintroduce inherited methods
 */

/* method: somsAccept */
long   somsAccept(Environment *ev, 
		long s, 
		sockaddr* name, 
		long* namelen)
{
/*
 *  Accept a connection request from a client.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsAccept)
	(this, ev,s,name,namelen);
}


/* method: somsBind */
long   somsBind(Environment *ev, 
		long s, 
		sockaddr* name, 
		long namelen)
{
/*
 *  Binds a unique local name to the socket with descriptor s.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsBind)
	(this, ev,s,name,namelen);
}


/* method: somsConnect */
long   somsConnect(Environment *ev, 
		long s, 
		sockaddr* name, 
		long namelen)
{
/*
 *  For streams sockets, attempts to establish a connection between
 *  two sockets.  For datagram sockets, specifies the socket's peer.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsConnect)
	(this, ev,s,name,namelen);
}


/* method: somsGethostbyaddr */
hostent*   somsGethostbyaddr(Environment *ev, 
		char* addr, 
		long addrlen, 
		long domain)
{
/*
 *  Returns a hostent structure for the host address specified on
 *  the call.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsGethostbyaddr)
	(this, ev,addr,addrlen,domain);
}


/* method: somsGethostbyname */
hostent*   somsGethostbyname(Environment *ev, 
		string name)
{
/*
 *  Returns a hostent structure for the host name specified on
 *  the call.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsGethostbyname)
	(this, ev,name);
}


/* method: somsGethostent */
hostent*   somsGethostent(Environment *ev)
{
/*
 *  Returns a pointer to the next entry in the hosts file.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsGethostent)
	(this, ev);
}


/* method: somsGethostid */
unsigned long   somsGethostid(Environment *ev)
{
/*
 *  Returns the unique identifier for the current host.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsGethostid)
	(this, ev);
}


/* method: somsGethostname */
long   somsGethostname(Environment *ev, 
		string name, 
		long namelength)
{
/*
 *  Retrieves the standard host name of the local host.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsGethostname)
	(this, ev,name,namelength);
}


/* method: somsGetpeername */
long   somsGetpeername(Environment *ev, 
		long s, 
		sockaddr* name, 
		long* namelen)
{
/*
 *  Gets the name of the peer connected to socket s.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsGetpeername)
	(this, ev,s,name,namelen);
}


/* method: somsGetservbyname */
servent*   somsGetservbyname(Environment *ev, 
		string name, 
		string protocol)
{
/*
 *  Retrieves an entry from the /etc/services file using the service
 *  name as a search key.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsGetservbyname)
	(this, ev,name,protocol);
}


/* method: somsGetsockname */
long   somsGetsockname(Environment *ev, 
		long s, 
		sockaddr* name, 
		long* namelen)
{
/*
 *  Stores the current name for the socket specified by the s
 *  parameter into the structure pointed to by the name parameter.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsGetsockname)
	(this, ev,s,name,namelen);
}


/* method: somsGetsockopt */
long   somsGetsockopt(Environment *ev, 
		long s, 
		long level, 
		long optname, 
		char* optval, 
		long* option)
{
/*
 *  Returns the values of socket options at various protocol levels.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsGetsockopt)
	(this, ev,s,level,optname,optval,option);
}


/* method: somsHtonl */
unsigned long   somsHtonl(Environment *ev, 
		unsigned long a)
{
/*
 *  Translates an unsigned long integer from host-byte order to
 *  network-byte order.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsHtonl)
	(this, ev,a);
}


/* method: somsHtons */
unsigned short   somsHtons(Environment *ev, 
		unsigned short a)
{
/*
 *  Translates an unsigned short integer from host-byte order to
 *  network-byte order.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsHtons)
	(this, ev,a);
}


/* method: somsIoctl */
long   somsIoctl(Environment *ev, 
		long s, 
		long cmd, 
		char* data, 
		long length)
{
/*
 *  Controls the operating characteristics of sockets.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsIoctl)
	(this, ev,s,cmd,data,length);
}


/* method: somsInet_addr */
unsigned long   somsInet_addr(Environment *ev, 
		string cp)
{
/*
 *  Interprets character strings representing numbers expressed in
 *  standard '.' notation and returns numbers suitable for use as
 *  internet addresses.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsInet_addr)
	(this, ev,cp);
}


/* method: somsInet_lnaof */
unsigned long   somsInet_lnaof(Environment *ev, 
		in_addr* addr)
{
/*
 *  Breaks apart the internet address and returns the local network
 *  address portion.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsInet_lnaof)
	(this, ev,addr);
}


/* method: somsInet_makeaddr */
in_addr   somsInet_makeaddr(Environment *ev, 
		unsigned long net, 
		unsigned long lna)
{
/*
 *  Takes a network number and a local network address and constructs
 *  an internet address.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsInet_makeaddr)
	(this, ev,net,lna);
}


/* method: somsInet_netof */
unsigned long   somsInet_netof(Environment *ev, 
		in_addr* addr)
{
/*
 *  Returns the network number portion of the given internet address.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsInet_netof)
	(this, ev,addr);
}


/* method: somsInet_network */
unsigned long   somsInet_network(Environment *ev, 
		string cp)
{
/*
 *  Interprets character strings representing numbers expressed in
 *  standard '.' notation and returns numbers suitable for use as
 *  network numbers.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsInet_network)
	(this, ev,cp);
}


/* method: somsInet_ntoa */
string   somsInet_ntoa(Environment *ev, 
		in_addr* addr)
{
/*
 *  Returns a pointer to a string expressed in the dotted-decimal
 *  notation.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsInet_ntoa)
	(this, ev,addr);
}


/* method: somsListen */
long   somsListen(Environment *ev, 
		long s, 
		long backlog)
{
/*
 *  Creates a connection request queue of length backlog to queue
 *  incoming connection requests, and then waits for incoming
 *  connection requests.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsListen)
	(this, ev,s,backlog);
}


/* method: somsNtohl */
unsigned long   somsNtohl(Environment *ev, 
		unsigned long a)
{
/*
 *  Translates an unsigned long integer from network-byte order
 *  to host-byte order.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsNtohl)
	(this, ev,a);
}


/* method: somsNtohs */
unsigned short   somsNtohs(Environment *ev, 
		unsigned short a)
{
/*
 *  Translates an unsigned short integer from network-byte order
 *  to host-byte order.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsNtohs)
	(this, ev,a);
}


/* method: somsReadv */
long   somsReadv(Environment *ev, 
		long s, 
		iovec* iov, 
		long iovcnt)
{
/*
 *  Reads data on socket s and stores it in a set of buffers
 *  described by iov.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsReadv)
	(this, ev,s,iov,iovcnt);
}


/* method: somsRecv */
long   somsRecv(Environment *ev, 
		long s, 
		char* buf, 
		long len, 
		long flags)
{
/*
 *  Receives data on streams socket s and stores it in buf.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsRecv)
	(this, ev,s,buf,len,flags);
}


/* method: somsRecvfrom */
long   somsRecvfrom(Environment *ev, 
		long s, 
		char* buf, 
		long len, 
		long flags, 
		sockaddr* name, 
		long* namelen)
{
/*
 *  Receives data on datagram socket s and stores it in buf.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsRecvfrom)
	(this, ev,s,buf,len,flags,name,namelen);
}


/* method: somsRecvmsg */
long   somsRecvmsg(Environment *ev, 
		long s, 
		msghdr* msg, 
		long flags)
{
/*
 *  Receives messages on a socket with descriptor s and stores them
 *  in an array of message headers.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsRecvmsg)
	(this, ev,s,msg,flags);
}


/* method: somsSelect */
long   somsSelect(Environment *ev, 
		long nfds, 
		fd_set* readfds, 
		fd_set* writefds, 
		fd_set* exceptfds, 
		timeval* timeout)
{
/*
 *  Monitors activity on a set of different sockets until a timeout
 *  expires, to see if any sockets are ready for reading or writing,
 *  or if an exceptional condition is pending.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsSelect)
	(this, ev,nfds,readfds,writefds,exceptfds,timeout);
}


/* method: somsSend */
long   somsSend(Environment *ev, 
		long s, 
		char* msg, 
		long len, 
		long flags)
{
/*
 *  Sends msg on streams socket s.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsSend)
	(this, ev,s,msg,len,flags);
}


/* method: somsSendmsg */
long   somsSendmsg(Environment *ev, 
		long s, 
		msghdr* msg, 
		long flags)
{
/*
 *  Sends messages passed in an array of message headers on a socket
 *  with descriptor s.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsSendmsg)
	(this, ev,s,msg,flags);
}


/* method: somsSendto */
long   somsSendto(Environment *ev, 
		long s, 
		char* msg, 
		long len, 
		long flags, 
		sockaddr* to, 
		long tolen)
{
/*
 *  Sends msg on datagram socket s.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsSendto)
	(this, ev,s,msg,len,flags,to,tolen);
}


/* method: somsSetsockopt */
long   somsSetsockopt(Environment *ev, 
		long s, 
		long level, 
		long optname, 
		char* optval, 
		long optlen)
{
/*
 *  Sets options associated with a socket.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsSetsockopt)
	(this, ev,s,level,optname,optval,optlen);
}


/* method: somsShutdown */
long   somsShutdown(Environment *ev, 
		long s, 
		long how)
{
/*
 *  Shuts down all or part of a full-duplex connection.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsShutdown)
	(this, ev,s,how);
}


/* method: somsSocket */
long   somsSocket(Environment *ev, 
		long domain, 
		long type, 
		long protocol)
{
/*
 *  Creates an endpoint for communication and returns a socket
 *  descriptor representing the endpoint.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsSocket)
	(this, ev,domain,type,protocol);
}


/* method: somsSoclose */
long   somsSoclose(Environment *ev, 
		long s)
{
/*
 *  Shuts down socket s and frees resources allocated to the socket.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsSoclose)
	(this, ev,s);
}


/* method: somsWritev */
long   somsWritev(Environment *ev, 
		long s, 
		iovec* iov, 
		long iovcnt)
{
/*
 *  Writes data on socket s.  The data is gathered from the buffers
 *  described by iov.
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,somsWritev)
	(this, ev,s,iov,iovcnt);
}


/* method: _get_serrno */
long   _get_serrno(Environment *ev)
{
/*
 * Method from the IDL attribute statement:
 * "attribute long serrno"
 */
   return SOM_ResolveD(this,TCPIPSockets32,Sockets,_get_serrno)
	(this, ev);
}


/* method: _set_serrno */
void   _set_serrno(Environment *ev, 
		long serrno)
{
/*
 * Method from the IDL attribute statement:
 * "attribute long serrno"
 */
   SOM_ResolveD(this,TCPIPSockets32,Sockets,_set_serrno)
	(this, ev,serrno);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
TCPIPSockets32*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
TCPIPSockets32*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
TCPIPSockets32*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
TCPIPSockets32*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,TCPIPSockets32,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,TCPIPSockets32,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,TCPIPSockets32,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMMSingleInstance*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   TCPIPSockets32_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   TCPIPSockets32_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,TCPIPSockets32,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   TCPIPSockets32_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   TCPIPSockets32_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   TCPIPSockets32_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   TCPIPSockets32_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,TCPIPSockets32,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,TCPIPSockets32,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* TCPIPSockets32 */



#endif       /* SOM_TCPIPSockets32_xh */

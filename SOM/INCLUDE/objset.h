
/*
 * This file was generated by the SOM Compiler.
 * FileName: objset.h.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emith: 2.47
 */

/*
 *    COMPONENT_NAME: somp
 * 
 *    ORIGINS: 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1994,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMPObjectSet_h
#define SOM_SOMPObjectSet_h


#include <som.h>

/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * Define the class name as an object type
 */
#ifndef SOMPObjectSet
#define SOMPObjectSet SOMObject
#endif
/*
 *  This class is an abstact definition for a set of objects
 *  and the operations which can be performed on the set.
 */
#include <somobj.h>

/*
 * Start of bindings for IDL types
 */

#ifndef SOMClass
    #define SOMClass SOMObject
#endif /* SOMClass */
#ifndef SOMBuf
    #define SOMBuf SOMObject
#endif /* SOMBuf */
#ifndef SOMPPersistentId
    #define SOMPPersistentId SOMObject
#endif /* SOMPPersistentId */

/*
 * End of bindings for IDL types.
 */

#define SOMPObjectSet_MajorVersion 2
#define SOMPObjectSet_MinorVersion 1

/*
 * External name shortening if required
 */
#ifdef SOM_USE_SHORT_EXTERNAL_NAMES
#define SOMPObjectSetNewClass c
#pragma linkage(c, system)
#define SOMPObjectSetClassData d
#define SOMPObjectSetCClassData x
#endif /* SOM_USE_SHORT_EXTERNAL_NAMES */
/*--------------Migration------------*/
#define SOMPObjectSet_classObj SOMPObjectSetClassData.classObject
#define _SOMPObjectSet SOMPObjectSet_classObj

/*
 * Declare the class creation procedure
 */
SOMEXTERN SOMClass * SOMLINK SOMPObjectSetNewClass(integer4 somtmajorVersion,
		integer4 somtminorVersion);
#pragma linkage(SOMPObjectSetNewClass, system)

/*
 * Declare the class data structure
 */
SOMEXTERN struct SOMPObjectSetClassDataStructure {
	SOMClass *classObject;
	somMToken sompSetGetNth;
	somMToken sompFindByID;
	somMToken sompFindByAddress;
	somMToken sompAddToSet;
	somMToken sompSetDeleteNth;
	somMToken sompGetSetSize;
	somMToken sompObjEqualsID;
} SOMDLINK SOMPObjectSetClassData;

/*
 * Declare the C specific class data structure
 */
SOMEXTERN struct SOMPObjectSetCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} SOMDLINK SOMPObjectSetCClassData;

/*
 * New and Renew macros for SOMPObjectSet
 */
#define SOMPObjectSetNew() \
   ( _SOMPObjectSet ? \
	_somNew(_SOMPObjectSet) \
	: ( SOMPObjectSetNewClass(\
		SOMPObjectSet_MajorVersion, \
		SOMPObjectSet_MinorVersion),\
	   _somNew(_SOMPObjectSet)))
#define SOMPObjectSetRenew(buf) \
   ( _SOMPObjectSet ? \
	_somRenew(_SOMPObjectSet, buf) \
	: ( SOMPObjectSetNewClass(\
		SOMPObjectSet_MajorVersion, \
		SOMPObjectSet_MinorVersion),\
	   _somRenew(_SOMPObjectSet, buf)))

/*
 * Override method: somInit
 */
#define SOMPObjectSet_somInit(somSelf) \
	SOMObject_somInit(somSelf)

/*
 * Override method: somUninit
 */
#define SOMPObjectSet_somUninit(somSelf) \
	SOMObject_somUninit(somSelf)

/*
 * Override method: somDumpSelfInt
 */
#define SOMPObjectSet_somDumpSelfInt(somSelf,level) \
	SOMObject_somDumpSelfInt(somSelf,level)

/*
 * New Method: sompSetGetNth
 */
typedef SOMObject*   SOMLINK somTP_SOMPObjectSet_sompSetGetNth(SOMPObjectSet *somSelf, Environment *ev, 
		unsigned long n);
#pragma linkage(somTP_SOMPObjectSet_sompSetGetNth, system)
typedef somTP_SOMPObjectSet_sompSetGetNth *somTD_SOMPObjectSet_sompSetGetNth;
/*
 *  Return the nth object from the set.
 */
#define somMD_SOMPObjectSet_sompSetGetNth "::SOMPObjectSet::sompSetGetNth"
#define SOMPObjectSet_sompSetGetNth(somSelf,ev,n) \
    (SOM_Resolve(somSelf, SOMPObjectSet, sompSetGetNth) \
	(somSelf,ev,n))
#ifndef SOMGD_sompSetGetNth
    #if (defined(_sompSetGetNth) || defined(__sompSetGetNth))
        #undef _sompSetGetNth
        #undef __sompSetGetNth
        #define SOMGD_sompSetGetNth 1
    #else
        #define _sompSetGetNth SOMPObjectSet_sompSetGetNth
    #endif /* _sompSetGetNth */
#endif /* SOMGD_sompSetGetNth */

/*
 * New Method: sompFindByID
 */
typedef SOMObject*   SOMLINK somTP_SOMPObjectSet_sompFindByID(SOMPObjectSet *somSelf, Environment *ev, 
		SOMPPersistentId* lookfor);
#pragma linkage(somTP_SOMPObjectSet_sompFindByID, system)
typedef somTP_SOMPObjectSet_sompFindByID *somTD_SOMPObjectSet_sompFindByID;
/*
 *  Return the object with the ID given by <lookfor>. The true type of the
 *  ID passed depends on the objects in the set. (All the objects in the
 *  set are expected to be of the same type.)
 */
#define somMD_SOMPObjectSet_sompFindByID "::SOMPObjectSet::sompFindByID"
#define SOMPObjectSet_sompFindByID(somSelf,ev,lookfor) \
    (SOM_Resolve(somSelf, SOMPObjectSet, sompFindByID) \
	(somSelf,ev,lookfor))
#ifndef SOMGD_sompFindByID
    #if (defined(_sompFindByID) || defined(__sompFindByID))
        #undef _sompFindByID
        #undef __sompFindByID
        #define SOMGD_sompFindByID 1
    #else
        #define _sompFindByID SOMPObjectSet_sompFindByID
    #endif /* _sompFindByID */
#endif /* SOMGD_sompFindByID */

/*
 * New Method: sompFindByAddress
 */
typedef long   SOMLINK somTP_SOMPObjectSet_sompFindByAddress(SOMPObjectSet *somSelf, Environment *ev, 
		SOMObject* lookfor);
#pragma linkage(somTP_SOMPObjectSet_sompFindByAddress, system)
typedef somTP_SOMPObjectSet_sompFindByAddress *somTD_SOMPObjectSet_sompFindByAddress;
/*
 *  Returns the position in the set of the "lookfor" object or
 *  -1 if the object was not found.
 */
#define somMD_SOMPObjectSet_sompFindByAddress "::SOMPObjectSet::sompFindByAddress"
#define SOMPObjectSet_sompFindByAddress(somSelf,ev,lookfor) \
    (SOM_Resolve(somSelf, SOMPObjectSet, sompFindByAddress) \
	(somSelf,ev,lookfor))
#ifndef SOMGD_sompFindByAddress
    #if (defined(_sompFindByAddress) || defined(__sompFindByAddress))
        #undef _sompFindByAddress
        #undef __sompFindByAddress
        #define SOMGD_sompFindByAddress 1
    #else
        #define _sompFindByAddress SOMPObjectSet_sompFindByAddress
    #endif /* _sompFindByAddress */
#endif /* SOMGD_sompFindByAddress */

/*
 * New Method: sompAddToSet
 */
typedef void   SOMLINK somTP_SOMPObjectSet_sompAddToSet(SOMPObjectSet *somSelf, Environment *ev, 
		SOMObject* thisObject);
#pragma linkage(somTP_SOMPObjectSet_sompAddToSet, system)
typedef somTP_SOMPObjectSet_sompAddToSet *somTD_SOMPObjectSet_sompAddToSet;
/*
 *  Add an object to the set.
 */
#define somMD_SOMPObjectSet_sompAddToSet "::SOMPObjectSet::sompAddToSet"
#define SOMPObjectSet_sompAddToSet(somSelf,ev,thisObject) \
    (SOM_Resolve(somSelf, SOMPObjectSet, sompAddToSet) \
	(somSelf,ev,thisObject))
#ifndef SOMGD_sompAddToSet
    #if (defined(_sompAddToSet) || defined(__sompAddToSet))
        #undef _sompAddToSet
        #undef __sompAddToSet
        #define SOMGD_sompAddToSet 1
    #else
        #define _sompAddToSet SOMPObjectSet_sompAddToSet
    #endif /* _sompAddToSet */
#endif /* SOMGD_sompAddToSet */

/*
 * New Method: sompSetDeleteNth
 */
typedef void   SOMLINK somTP_SOMPObjectSet_sompSetDeleteNth(SOMPObjectSet *somSelf, Environment *ev, 
		unsigned long n);
#pragma linkage(somTP_SOMPObjectSet_sompSetDeleteNth, system)
typedef somTP_SOMPObjectSet_sompSetDeleteNth *somTD_SOMPObjectSet_sompSetDeleteNth;
/*
 *  Delete the nth object from the set.
 */
#define somMD_SOMPObjectSet_sompSetDeleteNth "::SOMPObjectSet::sompSetDeleteNth"
#define SOMPObjectSet_sompSetDeleteNth(somSelf,ev,n) \
    (SOM_Resolve(somSelf, SOMPObjectSet, sompSetDeleteNth) \
	(somSelf,ev,n))
#ifndef SOMGD_sompSetDeleteNth
    #if (defined(_sompSetDeleteNth) || defined(__sompSetDeleteNth))
        #undef _sompSetDeleteNth
        #undef __sompSetDeleteNth
        #define SOMGD_sompSetDeleteNth 1
    #else
        #define _sompSetDeleteNth SOMPObjectSet_sompSetDeleteNth
    #endif /* _sompSetDeleteNth */
#endif /* SOMGD_sompSetDeleteNth */

/*
 * New Method: sompGetSetSize
 */
typedef long   SOMLINK somTP_SOMPObjectSet_sompGetSetSize(SOMPObjectSet *somSelf, Environment *ev);
#pragma linkage(somTP_SOMPObjectSet_sompGetSetSize, system)
typedef somTP_SOMPObjectSet_sompGetSetSize *somTD_SOMPObjectSet_sompGetSetSize;
/*
 *  Returns the set size.
 */
#define somMD_SOMPObjectSet_sompGetSetSize "::SOMPObjectSet::sompGetSetSize"
#define SOMPObjectSet_sompGetSetSize(somSelf,ev) \
    (SOM_Resolve(somSelf, SOMPObjectSet, sompGetSetSize) \
	(somSelf,ev))
#ifndef SOMGD_sompGetSetSize
    #if (defined(_sompGetSetSize) || defined(__sompGetSetSize))
        #undef _sompGetSetSize
        #undef __sompGetSetSize
        #define SOMGD_sompGetSetSize 1
    #else
        #define _sompGetSetSize SOMPObjectSet_sompGetSetSize
    #endif /* _sompGetSetSize */
#endif /* SOMGD_sompGetSetSize */

/*
 * New Method: sompObjEqualsID
 */
typedef boolean   SOMLINK somTP_SOMPObjectSet_sompObjEqualsID(SOMPObjectSet *somSelf, Environment *ev, 
		SOMObject* cmpObj, 
		SOMPPersistentId* lookfor);
#pragma linkage(somTP_SOMPObjectSet_sompObjEqualsID, system)
typedef somTP_SOMPObjectSet_sompObjEqualsID *somTD_SOMPObjectSet_sompObjEqualsID;
/*
 *  Returns TRUE if the given object <cmpObj> has the given
 *  ID <lookfor>. Override this to make the appropriate
 *  comparison for the objects in the set.
 */
#define somMD_SOMPObjectSet_sompObjEqualsID "::SOMPObjectSet::sompObjEqualsID"
#define SOMPObjectSet_sompObjEqualsID(somSelf,ev,cmpObj,lookfor) \
    (SOM_Resolve(somSelf, SOMPObjectSet, sompObjEqualsID) \
	(somSelf,ev,cmpObj,lookfor))
#ifndef SOMGD_sompObjEqualsID
    #if (defined(_sompObjEqualsID) || defined(__sompObjEqualsID))
        #undef _sompObjEqualsID
        #undef __sompObjEqualsID
        #define SOMGD_sompObjEqualsID 1
    #else
        #define _sompObjEqualsID SOMPObjectSet_sompObjEqualsID
    #endif /* _sompObjEqualsID */
#endif /* SOMGD_sompObjEqualsID */
#ifndef SOM_DONT_USE_INHERITED_MACROS
#define SOMPObjectSet_somDefaultInit SOMObject_somDefaultInit
#define SOMPObjectSet_somDestruct SOMObject_somDestruct
#define SOMPObjectSet_somDefaultCopyInit SOMObject_somDefaultCopyInit
#define SOMPObjectSet_somDefaultAssign SOMObject_somDefaultAssign
#define SOMPObjectSet_somDefaultConstCopyInit SOMObject_somDefaultConstCopyInit
#define SOMPObjectSet_somDefaultVCopyInit SOMObject_somDefaultVCopyInit
#define SOMPObjectSet_somDefaultConstVCopyInit SOMObject_somDefaultConstVCopyInit
#define SOMPObjectSet_somDefaultConstAssign SOMObject_somDefaultConstAssign
#define SOMPObjectSet_somDefaultVAssign SOMObject_somDefaultVAssign
#define SOMPObjectSet_somDefaultConstVAssign SOMObject_somDefaultConstVAssign
#define SOMPObjectSet_somFree SOMObject_somFree
#define SOMPObjectSet_somGetClass SOMObject_somGetClass
#define SOMPObjectSet_somGetClassName SOMObject_somGetClassName
#define SOMPObjectSet_somGetSize SOMObject_somGetSize
#define SOMPObjectSet_somIsA SOMObject_somIsA
#define SOMPObjectSet_somIsInstanceOf SOMObject_somIsInstanceOf
#define SOMPObjectSet_somRespondsTo SOMObject_somRespondsTo
#define SOMPObjectSet_somDispatch SOMObject_somDispatch
#define SOMPObjectSet_somClassDispatch SOMObject_somClassDispatch
#define SOMPObjectSet_somCastObj SOMObject_somCastObj
#define SOMPObjectSet_somResetObj SOMObject_somResetObj
#define SOMPObjectSet_somDispatchV SOMObject_somDispatchV
#define SOMPObjectSet_somDispatchL SOMObject_somDispatchL
#define SOMPObjectSet_somDispatchA SOMObject_somDispatchA
#define SOMPObjectSet_somDispatchD SOMObject_somDispatchD
#define SOMPObjectSet_somPrintSelf SOMObject_somPrintSelf
#define SOMPObjectSet_somDumpSelf SOMObject_somDumpSelf
#endif /* SOM_DONT_USE_INHERITED_MACROS */

#endif       /* SOM_SOMPObjectSet_h */

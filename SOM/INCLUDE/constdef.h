
/*
 * This file was generated by the SOM Compiler.
 * FileName: constdef.h.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emith: 2.47
 */

#ifndef SOM_ConstantDef_h
#define SOM_ConstantDef_h


/*
 * Passthru lines: File: "C.h", "before"
 */

    #include <somtcnst.h>
    #include <somir.h>
    #include <containd.h>


#include <som.h>

/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * Define the class name as an object type
 */
#ifndef ConstantDef
#define ConstantDef SOMObject
#endif
/*
 *  This interface is used to access information associated with
 *  constants defined in an IDL file.
 * 
 *  See CORBA 1.1, 7.5.9, p.137
 */
#include <containd.h>

/*
 * Start of bindings for IDL types
 */

#ifndef SOMClass
    #define SOMClass SOMObject
#endif /* SOMClass */
#ifndef Container
    #define Container SOMObject
#endif /* Container */
typedef
struct ConstantDef_ConstantDescription {
Identifier name;
RepositoryId id;
RepositoryId defined_in;
TypeCode type;
any  value;
} ConstantDef_ConstantDescription;
/*
 *  The inherited describe method returns an instance of this
 *  (ConstantDescription) structure in the "value" member of the
 *  Description structure defined in the Contained interface.
 */


#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_ConstantDescription
    #ifdef ConstantDescription
        #undef ConstantDescription
        #define SOMTGD_ConstantDescription 1
    #else
        #define ConstantDescription ConstantDef_ConstantDescription
    #endif /* ConstantDescription */
#endif /* SOMTGD_ConstantDescription */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

#define ConstantDef_MajorVersion 2
#define ConstantDef_MinorVersion 3

/*
 * External name shortening if required
 */
#ifdef SOM_USE_SHORT_EXTERNAL_NAMES
#define ConstantDefNewClass c
#pragma linkage(c, system)
#define ConstantDefClassData d
#define ConstantDefCClassData x
#endif /* SOM_USE_SHORT_EXTERNAL_NAMES */
/*--------------Migration------------*/
#define ConstantDef_classObj ConstantDefClassData.classObject
#define _ConstantDef ConstantDef_classObj

/*
 * Declare the class creation procedure
 */
SOMEXTERN SOMClass * SOMLINK ConstantDefNewClass(integer4 somtmajorVersion,
		integer4 somtminorVersion);
#pragma linkage(ConstantDefNewClass, system)

/*
 * Declare the class data structure
 */
SOMEXTERN struct ConstantDefClassDataStructure {
	SOMClass *classObject;
	somMToken _get_type;
	somMToken _set_type;
	somMToken _get_value;
	somMToken _set_value;
} SOMDLINK ConstantDefClassData;

/*
 * Declare the C specific class data structure
 */
SOMEXTERN struct ConstantDefCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} SOMDLINK ConstantDefCClassData;

/*
 * New and Renew macros for ConstantDef
 */
#define ConstantDefNew() \
   ( _ConstantDef ? \
	_somNew(_ConstantDef) \
	: ( ConstantDefNewClass(\
		ConstantDef_MajorVersion, \
		ConstantDef_MinorVersion),\
	   _somNew(_ConstantDef)))
#define ConstantDefRenew(buf) \
   ( _ConstantDef ? \
	_somRenew(_ConstantDef, buf) \
	: ( ConstantDefNewClass(\
		ConstantDef_MajorVersion, \
		ConstantDef_MinorVersion),\
	   _somRenew(_ConstantDef, buf)))

/*
 * Override method: somDefaultInit
 */
#define ConstantDef_somDefaultInit(somSelf,ctrl) \
	SOMObject_somDefaultInit(somSelf,ctrl)

/*
 * Override method: somDestruct
 */
#define ConstantDef_somDestruct(somSelf,doFree,ctrl) \
	SOMObject_somDestruct(somSelf,doFree,ctrl)

/*
 * Override method: somDumpSelf
 */
#define ConstantDef_somDumpSelf(somSelf,level) \
	SOMObject_somDumpSelf(somSelf,level)

/*
 * Override method: somDumpSelfInt
 */
#define ConstantDef_somDumpSelfInt(somSelf,level) \
	SOMObject_somDumpSelfInt(somSelf,level)

/*
 * Override method: describe
 */
#define ConstantDef_describe(somSelf,ev) \
	Contained_describe(somSelf,ev)

/*
 * New Method: _get_type
 */
typedef TypeCode   SOMLINK somTP_ConstantDef__get_type(ConstantDef *somSelf, Environment *ev);
#pragma linkage(somTP_ConstantDef__get_type, system)
typedef somTP_ConstantDef__get_type *somTD_ConstantDef__get_type;
/*
 *  The TypeCode of the receiving object.  The memory used to hold
 *  the TypeCode is contained in the receiving object, which retains
 *  ownership.  Hence, do not free the returned TypeCode.  If you want
 *  to obtain a separate copy, use the TypeCode_copy operation.
 */
#define somMD_ConstantDef__get_type "::ConstantDef::_get_type"
#define ConstantDef__get_type(somSelf,ev) \
    (SOM_Resolve(somSelf, ConstantDef, _get_type) \
	(somSelf,ev))
#ifndef SOMGD_get_type
    #if (defined(_get_type) || defined(__get_type))
        #undef _get_type
        #undef __get_type
        #define SOMGD_get_type 1
    #else
        #define __get_type ConstantDef__get_type
    #endif /* __get_type */
#endif /* SOMGD_get_type */

/*
 * New Method: _set_type
 */
typedef void   SOMLINK somTP_ConstantDef__set_type(ConstantDef *somSelf, Environment *ev, 
		TypeCode type);
#pragma linkage(somTP_ConstantDef__set_type, system)
typedef somTP_ConstantDef__set_type *somTD_ConstantDef__set_type;
/*
 *  The TypeCode of the receiving object.  The memory used to hold
 *  the TypeCode is contained in the receiving object, which retains
 *  ownership.  Hence, do not free the returned TypeCode.  If you want
 *  to obtain a separate copy, use the TypeCode_copy operation.
 */
#define somMD_ConstantDef__set_type "::ConstantDef::_set_type"
#define ConstantDef__set_type(somSelf,ev,type) \
    (SOM_Resolve(somSelf, ConstantDef, _set_type) \
	(somSelf,ev,type))
#ifndef SOMGD_set_type
    #if (defined(_set_type) || defined(__set_type))
        #undef _set_type
        #undef __set_type
        #define SOMGD_set_type 1
    #else
        #define __set_type ConstantDef__set_type
    #endif /* __set_type */
#endif /* SOMGD_set_type */

/*
 * New Method: _get_value
 */
typedef any   SOMLINK somTP_ConstantDef__get_value(ConstantDef *somSelf, Environment *ev);
#pragma linkage(somTP_ConstantDef__get_value, system)
typedef somTP_ConstantDef__get_value *somTD_ConstantDef__get_value;
/*
 *  The value of the receiving constant object;
 *  "value" is an any carrying a string per CORBA 7.5.9 p. 123
 */
#define somMD_ConstantDef__get_value "::ConstantDef::_get_value"
#define ConstantDef__get_value(somSelf,ev) \
    (SOM_Resolve(somSelf, ConstantDef, _get_value) \
	(somSelf,ev))
#ifndef SOMGD_get_value
    #if (defined(_get_value) || defined(__get_value))
        #undef _get_value
        #undef __get_value
        #define SOMGD_get_value 1
    #else
        #define __get_value ConstantDef__get_value
    #endif /* __get_value */
#endif /* SOMGD_get_value */

/*
 * New Method: _set_value
 */
typedef void   SOMLINK somTP_ConstantDef__set_value(ConstantDef *somSelf, Environment *ev, 
		any* value);
#pragma linkage(somTP_ConstantDef__set_value, system)
typedef somTP_ConstantDef__set_value *somTD_ConstantDef__set_value;
/*
 *  The value of the receiving constant object;
 *  "value" is an any carrying a string per CORBA 7.5.9 p. 123
 */
#define somMD_ConstantDef__set_value "::ConstantDef::_set_value"
#define ConstantDef__set_value(somSelf,ev,value) \
    (SOM_Resolve(somSelf, ConstantDef, _set_value) \
	(somSelf,ev,value))
#ifndef SOMGD_set_value
    #if (defined(_set_value) || defined(__set_value))
        #undef _set_value
        #undef __set_value
        #define SOMGD_set_value 1
    #else
        #define __set_value ConstantDef__set_value
    #endif /* __set_value */
#endif /* SOMGD_set_value */
#ifndef SOM_DONT_USE_INHERITED_MACROS
#define ConstantDef__get_name Contained__get_name
#define ConstantDef__set_name Contained__set_name
#define ConstantDef__get_id Contained__get_id
#define ConstantDef__set_id Contained__set_id
#define ConstantDef__get_defined_in Contained__get_defined_in
#define ConstantDef__set_defined_in Contained__set_defined_in
#define ConstantDef__get_somModifiers Contained__get_somModifiers
#define ConstantDef__set_somModifiers Contained__set_somModifiers
#define ConstantDef_within Contained_within
#define ConstantDef_somFree SOMObject_somFree
#define ConstantDef_somDefaultCopyInit SOMObject_somDefaultCopyInit
#define ConstantDef_somDefaultAssign SOMObject_somDefaultAssign
#define ConstantDef_somDefaultConstCopyInit SOMObject_somDefaultConstCopyInit
#define ConstantDef_somDefaultVCopyInit SOMObject_somDefaultVCopyInit
#define ConstantDef_somDefaultConstVCopyInit SOMObject_somDefaultConstVCopyInit
#define ConstantDef_somDefaultConstAssign SOMObject_somDefaultConstAssign
#define ConstantDef_somDefaultVAssign SOMObject_somDefaultVAssign
#define ConstantDef_somDefaultConstVAssign SOMObject_somDefaultConstVAssign
#define ConstantDef_somInit SOMObject_somInit
#define ConstantDef_somUninit SOMObject_somUninit
#define ConstantDef_somGetClass SOMObject_somGetClass
#define ConstantDef_somGetClassName SOMObject_somGetClassName
#define ConstantDef_somGetSize SOMObject_somGetSize
#define ConstantDef_somIsA SOMObject_somIsA
#define ConstantDef_somIsInstanceOf SOMObject_somIsInstanceOf
#define ConstantDef_somRespondsTo SOMObject_somRespondsTo
#define ConstantDef_somDispatch SOMObject_somDispatch
#define ConstantDef_somClassDispatch SOMObject_somClassDispatch
#define ConstantDef_somCastObj SOMObject_somCastObj
#define ConstantDef_somResetObj SOMObject_somResetObj
#define ConstantDef_somDispatchV SOMObject_somDispatchV
#define ConstantDef_somDispatchL SOMObject_somDispatchL
#define ConstantDef_somDispatchA SOMObject_somDispatchA
#define ConstantDef_somDispatchD SOMObject_somDispatchD
#define ConstantDef_somPrintSelf SOMObject_somPrintSelf
#endif /* SOM_DONT_USE_INHERITED_MACROS */

#endif       /* SOM_ConstantDef_h */

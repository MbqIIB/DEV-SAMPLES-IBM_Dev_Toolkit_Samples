
/*
 * This file was generated by the SOM Compiler.
 * FileName: poida.h.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emith: 2.47
 */

/*
 *    COMPONENT_NAME: somp
 * 
 *    ORIGINS: 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1994,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 */


#ifndef SOM_SOMPIdAssignerAbstract_h
#define SOM_SOMPIdAssignerAbstract_h


#include <som.h>

/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * Define the class name as an object type
 */
#ifndef SOMPIdAssignerAbstract
#define SOMPIdAssignerAbstract SOMObject
#endif
/*
 *  This is the abstract contract for an ID Assigner. The ID in
 *  this case is an ID for a persistent object. An ID Assigner is
 *  used at the time a persistent object is initialized.
 */
#include <somobj.h>

/*
 * Start of bindings for IDL types
 */

#ifndef SOMClass
    #define SOMClass SOMObject
#endif /* SOMClass */
#ifndef SOMPPersistentId
    #define SOMPPersistentId SOMObject
#endif /* SOMPPersistentId */

/*
 * End of bindings for IDL types.
 */

#define SOMPIdAssignerAbstract_MajorVersion 2
#define SOMPIdAssignerAbstract_MinorVersion 1

/*
 * External name shortening if required
 */
#ifdef SOM_USE_SHORT_EXTERNAL_NAMES
#define SOMPIdAssignerAbstractNewClass c
#pragma linkage(c, system)
#define SOMPIdAssignerAbstractClassData d
#define SOMPIdAssignerAbstractCClassData x
#endif /* SOM_USE_SHORT_EXTERNAL_NAMES */
/*--------------Migration------------*/
#define SOMPIdAssignerAbstract_classObj SOMPIdAssignerAbstractClassData.classObject
#define _SOMPIdAssignerAbstract SOMPIdAssignerAbstract_classObj

/*
 * Declare the class creation procedure
 */
SOMEXTERN SOMClass * SOMLINK SOMPIdAssignerAbstractNewClass(integer4 somtmajorVersion,
		integer4 somtminorVersion);
#pragma linkage(SOMPIdAssignerAbstractNewClass, system)

/*
 * Declare the class data structure
 */
SOMEXTERN struct SOMPIdAssignerAbstractClassDataStructure {
	SOMClass *classObject;
	somMToken sompGetSystemAssignedId;
} SOMDLINK SOMPIdAssignerAbstractClassData;

/*
 * Declare the C specific class data structure
 */
SOMEXTERN struct SOMPIdAssignerAbstractCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} SOMDLINK SOMPIdAssignerAbstractCClassData;

/*
 * New and Renew macros for SOMPIdAssignerAbstract
 */
#define SOMPIdAssignerAbstractNew() \
   ( _SOMPIdAssignerAbstract ? \
	_somNew(_SOMPIdAssignerAbstract) \
	: ( SOMPIdAssignerAbstractNewClass(\
		SOMPIdAssignerAbstract_MajorVersion, \
		SOMPIdAssignerAbstract_MinorVersion),\
	   _somNew(_SOMPIdAssignerAbstract)))
#define SOMPIdAssignerAbstractRenew(buf) \
   ( _SOMPIdAssignerAbstract ? \
	_somRenew(_SOMPIdAssignerAbstract, buf) \
	: ( SOMPIdAssignerAbstractNewClass(\
		SOMPIdAssignerAbstract_MajorVersion, \
		SOMPIdAssignerAbstract_MinorVersion),\
	   _somRenew(_SOMPIdAssignerAbstract, buf)))

/*
 * New Method: sompGetSystemAssignedId
 */
typedef void   SOMLINK somTP_SOMPIdAssignerAbstract_sompGetSystemAssignedId(SOMPIdAssignerAbstract *somSelf, Environment *ev, 
		SOMPPersistentId** id);
#pragma linkage(somTP_SOMPIdAssignerAbstract_sompGetSystemAssignedId, system)
typedef somTP_SOMPIdAssignerAbstract_sompGetSystemAssignedId *somTD_SOMPIdAssignerAbstract_sompGetSystemAssignedId;
/*
 *  Assign a system ID.
 *  Input: Pointer to persistent ID object
 *  Output: Returns nonzero error if ID could not be assigned,
 *          otherwise, returns 0.
 *          This method allocates the ID object.
 *          Freeing the storage space is the
 *          responsibility of the persistent object (po.c) at uninit.
 */
#define somMD_SOMPIdAssignerAbstract_sompGetSystemAssignedId "::SOMPIdAssignerAbstract::sompGetSystemAssignedId"
#define SOMPIdAssignerAbstract_sompGetSystemAssignedId(somSelf,ev,id) \
    (SOM_Resolve(somSelf, SOMPIdAssignerAbstract, sompGetSystemAssignedId) \
	(somSelf,ev,id))
#ifndef SOMGD_sompGetSystemAssignedId
    #if (defined(_sompGetSystemAssignedId) || defined(__sompGetSystemAssignedId))
        #undef _sompGetSystemAssignedId
        #undef __sompGetSystemAssignedId
        #define SOMGD_sompGetSystemAssignedId 1
    #else
        #define _sompGetSystemAssignedId SOMPIdAssignerAbstract_sompGetSystemAssignedId
    #endif /* _sompGetSystemAssignedId */
#endif /* SOMGD_sompGetSystemAssignedId */
#ifndef SOM_DONT_USE_INHERITED_MACROS
#define SOMPIdAssignerAbstract_somDefaultInit SOMObject_somDefaultInit
#define SOMPIdAssignerAbstract_somDestruct SOMObject_somDestruct
#define SOMPIdAssignerAbstract_somDefaultCopyInit SOMObject_somDefaultCopyInit
#define SOMPIdAssignerAbstract_somDefaultAssign SOMObject_somDefaultAssign
#define SOMPIdAssignerAbstract_somDefaultConstCopyInit SOMObject_somDefaultConstCopyInit
#define SOMPIdAssignerAbstract_somDefaultVCopyInit SOMObject_somDefaultVCopyInit
#define SOMPIdAssignerAbstract_somDefaultConstVCopyInit SOMObject_somDefaultConstVCopyInit
#define SOMPIdAssignerAbstract_somDefaultConstAssign SOMObject_somDefaultConstAssign
#define SOMPIdAssignerAbstract_somDefaultVAssign SOMObject_somDefaultVAssign
#define SOMPIdAssignerAbstract_somDefaultConstVAssign SOMObject_somDefaultConstVAssign
#define SOMPIdAssignerAbstract_somInit SOMObject_somInit
#define SOMPIdAssignerAbstract_somFree SOMObject_somFree
#define SOMPIdAssignerAbstract_somUninit SOMObject_somUninit
#define SOMPIdAssignerAbstract_somGetClass SOMObject_somGetClass
#define SOMPIdAssignerAbstract_somGetClassName SOMObject_somGetClassName
#define SOMPIdAssignerAbstract_somGetSize SOMObject_somGetSize
#define SOMPIdAssignerAbstract_somIsA SOMObject_somIsA
#define SOMPIdAssignerAbstract_somIsInstanceOf SOMObject_somIsInstanceOf
#define SOMPIdAssignerAbstract_somRespondsTo SOMObject_somRespondsTo
#define SOMPIdAssignerAbstract_somDispatch SOMObject_somDispatch
#define SOMPIdAssignerAbstract_somClassDispatch SOMObject_somClassDispatch
#define SOMPIdAssignerAbstract_somCastObj SOMObject_somCastObj
#define SOMPIdAssignerAbstract_somResetObj SOMObject_somResetObj
#define SOMPIdAssignerAbstract_somDispatchV SOMObject_somDispatchV
#define SOMPIdAssignerAbstract_somDispatchL SOMObject_somDispatchL
#define SOMPIdAssignerAbstract_somDispatchA SOMObject_somDispatchA
#define SOMPIdAssignerAbstract_somDispatchD SOMObject_somDispatchD
#define SOMPIdAssignerAbstract_somPrintSelf SOMObject_somPrintSelf
#define SOMPIdAssignerAbstract_somDumpSelf SOMObject_somDumpSelf
#define SOMPIdAssignerAbstract_somDumpSelfInt SOMObject_somDumpSelfInt
#endif /* SOM_DONT_USE_INHERITED_MACROS */

#endif       /* SOM_SOMPIdAssignerAbstract_h */

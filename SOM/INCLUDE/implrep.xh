
/*
 * This file was generated by the SOM Compiler.
 * FileName: implrep.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *   CLASS SPECIFICATION FOR IMPLEMENTATION REPOSITORY
 */


#ifndef SOM_ImplRepository_xh
#define SOM_ImplRepository_xh

class ImplRepository;

#define ImplRepository_MajorVersion 2
#define ImplRepository_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

/*
 * C++ metaclass def
 */
#include <snglicls.xh>

#ifndef ImplRepository_API
#define ImplRepository_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class Container;
class ImplementationDef;
#ifndef _IDL_SEQUENCE_ImplementationDef_defined
#define _IDL_SEQUENCE_ImplementationDef_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    ImplementationDef **_buffer;
} _IDL_SEQUENCE_ImplementationDef;
#endif /* _IDL_SEQUENCE_ImplementationDef_defined */ 
#ifndef _IDL_SEQUENCE_string_defined
#define _IDL_SEQUENCE_string_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    string *_buffer;
} _IDL_SEQUENCE_string;
#endif /* _IDL_SEQUENCE_string_defined */ 

#ifndef SOM_DONT_USE_SHORT_NAMES
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */

class ImplRepository;
#include <impldef.xh>

SOMEXTERN ImplRepository * SOMDLINK SOMD_ImplRepObject;


/* A procedure to create the ImplRepository Class */
class SOMMSingleInstance;
SOMEXTERN SOMMSingleInstance * SOMLINK ImplRepositoryNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the ImplRepository class object, and the methods it introduces. */
SOMEXTERN struct ImplRepositoryClassDataStructure {
	SOMMSingleInstance *classObject;
	somMToken find_impldef;
	somMToken find_impldef_by_alias;
	somMToken find_impldef2;
	somMToken find_impldef_by_alias2;
	somMToken find_impldef_by_class;
	somMToken add_impldef;
	somMToken update_impldef;
	somMToken delete_impldef;
	somMToken add_class_to_impldef;
	somMToken remove_class_from_impldef;
	somMToken remove_class_from_all;
	somMToken find_classes_by_impldef;
	somMToken implr_get_impl;
	somMToken implr_search_impl;
	somMToken implr_search_class;
	somMToken implr_update_impl;
	somMToken find_all_impldefs;
} SOMDLINK ImplRepositoryClassData;
#define _ImplRepository ImplRepositoryClassData.classObject

/* The API to parentMtabs for ImplRepository, and the instance data it introduces. */
SOMEXTERN struct ImplRepositoryCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK ImplRepositoryCClassData;

/*
 * -- Typedefs for ImplRepository Method Procedures
 */
SOMEXTERN {
typedef ImplementationDef*   SOMLINK somTP_ImplRepository_find_impldef(ImplRepository *somSelf, Environment *ev, 
		ImplId implid);
typedef somTP_ImplRepository_find_impldef *somTD_ImplRepository_find_impldef;
typedef ImplementationDef*   SOMLINK somTP_ImplRepository_find_impldef_by_alias(ImplRepository *somSelf, Environment *ev, 
		string alias_name);
typedef somTP_ImplRepository_find_impldef_by_alias *somTD_ImplRepository_find_impldef_by_alias;
typedef ORBStatus   SOMLINK somTP_ImplRepository_find_all_impldefs(ImplRepository *somSelf, Environment *ev, 
		_IDL_SEQUENCE_ImplementationDef* outimpldefs);
typedef somTP_ImplRepository_find_all_impldefs *somTD_ImplRepository_find_all_impldefs;
typedef _IDL_SEQUENCE_ImplementationDef   SOMLINK somTP_ImplRepository_find_impldef_by_class(ImplRepository *somSelf, Environment *ev, 
		string classname);
typedef somTP_ImplRepository_find_impldef_by_class *somTD_ImplRepository_find_impldef_by_class;
typedef void   SOMLINK somTP_ImplRepository_add_impldef(ImplRepository *somSelf, Environment *ev, 
		ImplementationDef* impldef);
typedef somTP_ImplRepository_add_impldef *somTD_ImplRepository_add_impldef;
typedef void   SOMLINK somTP_ImplRepository_update_impldef(ImplRepository *somSelf, Environment *ev, 
		ImplementationDef* impldef);
typedef somTP_ImplRepository_update_impldef *somTD_ImplRepository_update_impldef;
typedef void   SOMLINK somTP_ImplRepository_delete_impldef(ImplRepository *somSelf, Environment *ev, 
		ImplId implid);
typedef somTP_ImplRepository_delete_impldef *somTD_ImplRepository_delete_impldef;
typedef void   SOMLINK somTP_ImplRepository_add_class_to_impldef(ImplRepository *somSelf, Environment *ev, 
		ImplId implid, 
		string classname);
typedef somTP_ImplRepository_add_class_to_impldef *somTD_ImplRepository_add_class_to_impldef;
typedef void   SOMLINK somTP_ImplRepository_remove_class_from_impldef(ImplRepository *somSelf, Environment *ev, 
		ImplId implid, 
		string classname);
typedef somTP_ImplRepository_remove_class_from_impldef *somTD_ImplRepository_remove_class_from_impldef;
typedef void   SOMLINK somTP_ImplRepository_remove_class_from_all(ImplRepository *somSelf, Environment *ev, 
		string classname);
typedef somTP_ImplRepository_remove_class_from_all *somTD_ImplRepository_remove_class_from_all;
typedef _IDL_SEQUENCE_string   SOMLINK somTP_ImplRepository_find_classes_by_impldef(ImplRepository *somSelf, Environment *ev, 
		ImplId implid);
typedef somTP_ImplRepository_find_classes_by_impldef *somTD_ImplRepository_find_classes_by_impldef;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef void   SOMLINK somTP_ImplRepository_somDefaultInit(ImplRepository *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_ImplRepository_somDefaultInit *somTD_ImplRepository_somDefaultInit;
typedef void   SOMLINK somTP_ImplRepository_somDestruct(ImplRepository *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_ImplRepository_somDestruct *somTD_ImplRepository_somDestruct;
typedef void   SOMLINK somTP_ImplRepository_somDefaultCopyInit(ImplRepository *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ImplRepository_somDefaultCopyInit *somTD_ImplRepository_somDefaultCopyInit;
typedef ImplRepository*   SOMLINK somTP_ImplRepository_somDefaultAssign(ImplRepository *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ImplRepository_somDefaultAssign *somTD_ImplRepository_somDefaultAssign;
typedef void   SOMLINK somTP_ImplRepository_somDefaultConstCopyInit(ImplRepository *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ImplRepository_somDefaultConstCopyInit *somTD_ImplRepository_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_ImplRepository_somDefaultVCopyInit(ImplRepository *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ImplRepository_somDefaultVCopyInit *somTD_ImplRepository_somDefaultVCopyInit;
typedef void   SOMLINK somTP_ImplRepository_somDefaultConstVCopyInit(ImplRepository *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ImplRepository_somDefaultConstVCopyInit *somTD_ImplRepository_somDefaultConstVCopyInit;
typedef ImplRepository*   SOMLINK somTP_ImplRepository_somDefaultConstAssign(ImplRepository *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ImplRepository_somDefaultConstAssign *somTD_ImplRepository_somDefaultConstAssign;
typedef ImplRepository*   SOMLINK somTP_ImplRepository_somDefaultVAssign(ImplRepository *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ImplRepository_somDefaultVAssign *somTD_ImplRepository_somDefaultVAssign;
typedef ImplRepository*   SOMLINK somTP_ImplRepository_somDefaultConstVAssign(ImplRepository *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_ImplRepository_somDefaultConstVAssign *somTD_ImplRepository_somDefaultConstVAssign;
typedef void   SOMLINK somTP_ImplRepository_somInit(ImplRepository *somSelf);
typedef somTP_ImplRepository_somInit *somTD_ImplRepository_somInit;
typedef void   SOMLINK somTP_ImplRepository_somFree(ImplRepository *somSelf);
typedef somTP_ImplRepository_somFree *somTD_ImplRepository_somFree;
typedef void   SOMLINK somTP_ImplRepository_somUninit(ImplRepository *somSelf);
typedef somTP_ImplRepository_somUninit *somTD_ImplRepository_somUninit;
typedef SOMMSingleInstance*   SOMLINK somTP_ImplRepository_somGetClass(ImplRepository *somSelf);
typedef somTP_ImplRepository_somGetClass *somTD_ImplRepository_somGetClass;
typedef string   SOMLINK somTP_ImplRepository_somGetClassName(ImplRepository *somSelf);
typedef somTP_ImplRepository_somGetClassName *somTD_ImplRepository_somGetClassName;
typedef long   SOMLINK somTP_ImplRepository_somGetSize(ImplRepository *somSelf);
typedef somTP_ImplRepository_somGetSize *somTD_ImplRepository_somGetSize;
typedef boolean   SOMLINK somTP_ImplRepository_somIsA(ImplRepository *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ImplRepository_somIsA *somTD_ImplRepository_somIsA;
typedef boolean   SOMLINK somTP_ImplRepository_somIsInstanceOf(ImplRepository *somSelf, 
		SOMClass* aClassObj);
typedef somTP_ImplRepository_somIsInstanceOf *somTD_ImplRepository_somIsInstanceOf;
typedef boolean   SOMLINK somTP_ImplRepository_somRespondsTo(ImplRepository *somSelf, 
		somId mId);
typedef somTP_ImplRepository_somRespondsTo *somTD_ImplRepository_somRespondsTo;
typedef boolean   SOMLINK somTP_ImplRepository_somDispatch(ImplRepository *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ImplRepository_somDispatch *somTD_ImplRepository_somDispatch;
typedef boolean   SOMLINK somTP_ImplRepository_somClassDispatch(ImplRepository *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_ImplRepository_somClassDispatch *somTD_ImplRepository_somClassDispatch;
typedef boolean   SOMLINK somTP_ImplRepository_somCastObj(ImplRepository *somSelf, 
		SOMClass* cls);
typedef somTP_ImplRepository_somCastObj *somTD_ImplRepository_somCastObj;
typedef boolean   SOMLINK somTP_ImplRepository_somResetObj(ImplRepository *somSelf);
typedef somTP_ImplRepository_somResetObj *somTD_ImplRepository_somResetObj;
typedef void   SOMLINK somTP_ImplRepository_somDispatchV(ImplRepository *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ImplRepository_somDispatchV *somTD_ImplRepository_somDispatchV;
typedef long   SOMLINK somTP_ImplRepository_somDispatchL(ImplRepository *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ImplRepository_somDispatchL *somTD_ImplRepository_somDispatchL;
typedef void*   SOMLINK somTP_ImplRepository_somDispatchA(ImplRepository *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ImplRepository_somDispatchA *somTD_ImplRepository_somDispatchA;
typedef double   SOMLINK somTP_ImplRepository_somDispatchD(ImplRepository *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_ImplRepository_somDispatchD *somTD_ImplRepository_somDispatchD;
typedef SOMObject*   SOMLINK somTP_ImplRepository_somPrintSelf(ImplRepository *somSelf);
typedef somTP_ImplRepository_somPrintSelf *somTD_ImplRepository_somPrintSelf;
typedef void   SOMLINK somTP_ImplRepository_somDumpSelf(ImplRepository *somSelf, 
		long level);
typedef somTP_ImplRepository_somDumpSelf *somTD_ImplRepository_somDumpSelf;
typedef void   SOMLINK somTP_ImplRepository_somDumpSelfInt(ImplRepository *somSelf, 
		long level);
typedef somTP_ImplRepository_somDumpSelfInt *somTD_ImplRepository_somDumpSelfInt;
}

#endif /* ImplRepository_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for ImplRepository
 */
class ImplRepository : public SOMObject
{
public:

// ImplRepository::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_ImplRepository) ImplRepositoryNewClass(ImplRepository_MajorVersion,ImplRepository_MinorVersion);
   return (void*)
      SOM_Resolve(_ImplRepository,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_ImplRepository));
}

// ImplRepository::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

ImplRepository& operator=(ImplRepository& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

ImplRepository()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ImplRepositoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

ImplRepository(ImplRepository* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ImplRepositoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
ImplRepository(const ImplRepository* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (ImplRepositoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: find_impldef */
ImplementationDef*   find_impldef(Environment *ev, 
		ImplId implid)
{
/*
 *  This method searches the Implementation Repository and returns
 *  an ImplementationDef object with the specified implid.
 */
   return SOM_ResolveD(this,ImplRepository,ImplRepository,find_impldef)
	(this, ev,implid);
}


/* method: find_impldef_by_alias */
ImplementationDef*   find_impldef_by_alias(Environment *ev, 
		string alias_name)
{
/*
 *  This method searches the Implementation Repository and returns
 *  an ImplementationDef object with the specified name (alias).
 */
   return SOM_ResolveD(this,ImplRepository,ImplRepository,find_impldef_by_alias)
	(this, ev,alias_name);
}


/* method: find_all_impldefs */
ORBStatus   find_all_impldefs(Environment *ev, 
		_IDL_SEQUENCE_ImplementationDef* outimpldefs)
{
/*
 *  This method searches the Implementation Repository and returns
 *  all the ImplementationDef objects in it.
 */
   return SOM_ResolveD(this,ImplRepository,ImplRepository,find_all_impldefs)
	(this, ev,outimpldefs);
}


/* method: find_impldef_by_class */
_IDL_SEQUENCE_ImplementationDef   find_impldef_by_class(Environment *ev, 
		string classname)
{
/*
 *  This method searches the class index and returns the sequence of
 *  ImplementationDef objects for servers which implement that class.
 */
   return SOM_ResolveD(this,ImplRepository,ImplRepository,find_impldef_by_class)
	(this, ev,classname);
}


/* method: add_impldef */
void   add_impldef(Environment *ev, 
		ImplementationDef* impldef)
{
/*
 *  This method inserts an ImplementationDef object into the Implementation
 *  Repository.
 */
   SOM_ResolveD(this,ImplRepository,ImplRepository,add_impldef)
	(this, ev,impldef);
}


/* method: update_impldef */
void   update_impldef(Environment *ev, 
		ImplementationDef* impldef)
{
/*
 *  This method replaces an ImplementationDef object in the Implementation
 *  Repository with the supplied object.  The "impl_id" attribute of the
 *  supplied object is used to find the object to replace in the Impl.
 *  Repository.
 */
   SOM_ResolveD(this,ImplRepository,ImplRepository,update_impldef)
	(this, ev,impldef);
}


/* method: delete_impldef */
void   delete_impldef(Environment *ev, 
		ImplId implid)
{
/*
 *  This method deletes the ImplementationDef object with the specified
 *  implid from the Implementation Repository.
 */
   SOM_ResolveD(this,ImplRepository,ImplRepository,delete_impldef)
	(this, ev,implid);
}


/* method: add_class_to_impldef */
void   add_class_to_impldef(Environment *ev, 
		ImplId implid, 
		string classname)
{
/*
 *  This method associates the classname with the ImplementationDef
 *  whose id is "implid".  This is meant to indicate that the server
 *  (specified by the ImplementationDef) implements the named class.
 */
   SOM_ResolveD(this,ImplRepository,ImplRepository,add_class_to_impldef)
	(this, ev,implid,classname);
}


/* method: remove_class_from_impldef */
void   remove_class_from_impldef(Environment *ev, 
		ImplId implid, 
		string classname)
{
/*
 *  This method removes the classname from the list of classnames
 *  associated with the ImplementationDef whose id is "implid".
 */
   SOM_ResolveD(this,ImplRepository,ImplRepository,remove_class_from_impldef)
	(this, ev,implid,classname);
}


/* method: remove_class_from_all */
void   remove_class_from_all(Environment *ev, 
		string classname)
{
/*
 *  This method removes the classname from all the ImplementationDefs.
 */
   SOM_ResolveD(this,ImplRepository,ImplRepository,remove_class_from_all)
	(this, ev,classname);
}


/* method: find_classes_by_impldef */
_IDL_SEQUENCE_string   find_classes_by_impldef(Environment *ev, 
		ImplId implid)
{
/*
 *  This method searches the class index and returns the sequence of
 *  class names supported by a server with specified "implid".
 */
   return SOM_ResolveD(this,ImplRepository,ImplRepository,find_classes_by_impldef)
	(this, ev,implid);
}


/*
 * Reintroduce inherited methods
 */

/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,ImplRepository,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,ImplRepository,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,ImplRepository,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
ImplRepository*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,ImplRepository,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,ImplRepository,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,ImplRepository,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,ImplRepository,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
ImplRepository*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,ImplRepository,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
ImplRepository*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,ImplRepository,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
ImplRepository*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,ImplRepository,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,ImplRepository,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,ImplRepository,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,ImplRepository,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMMSingleInstance*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,ImplRepository,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,ImplRepository,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,ImplRepository,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ImplRepository,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ImplRepository,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,ImplRepository,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   ImplRepository_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ImplRepository,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ImplRepository,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   ImplRepository_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,ImplRepository,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,ImplRepository,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,ImplRepository,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,ImplRepository,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   ImplRepository_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,ImplRepository,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,ImplRepository,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   ImplRepository_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ImplRepository,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,ImplRepository,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   ImplRepository_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ImplRepository,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,ImplRepository,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   ImplRepository_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,ImplRepository,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,ImplRepository,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,ImplRepository,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,ImplRepository,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,ImplRepository,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* ImplRepository */



#endif       /* SOM_ImplRepository_xh */

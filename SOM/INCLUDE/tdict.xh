
/*
 * This file was generated by the SOM Compiler.
 * FileName: tdict.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

/*
 *    COMPONENT_NAME: somuc
 * 
 *    ORIGINS: 82, 81, 27
 * 
 * 
 *     25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
 *    All Rights Reserved
 *    Licensed Materials - Property of IBM
 *    US Government Users Restricted Rights - Use, duplication or
 *    disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 * 
 *    Copyright © 1988, 1989 Apple Computer, Inc. All rights reserved.
 * 
 * CLASS_NAME: somf_TDictionary
 * 
 * DESCRIPTION: This class represents a collection of paired objects
 *              (associations).  Because dictionaries are sometimes used
 *              to represent a bijective mapping, functions for retrieving a
 *              key given a value are provided along with the usual access
 *              functions (however, this will probably be slow).
 * 
 *  This file was generated by the SOM Compiler.
 *  FileName: TDict.id2.
 *  Generated using:
 *      SOM Precompiler spc: 6.13
 *      SOM Emitter emitidl.dll: 6.18
 */


#ifndef SOM_somf_TDictionary_xh
#define SOM_somf_TDictionary_xh

class somf_TDictionary;

#define somf_TDictionary_MajorVersion 2
#define somf_TDictionary_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_somf_TCollection_xh
#include <tcollect.xh>
#endif

#ifndef somf_TDictionary_API
#define somf_TDictionary_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class somf_TIterator;
class somf_THashTable;

/*
 * End of bindings for IDL types.
 */

/*
 * Passthru lines: File: "C.xh", "after"
 */


#include <mcollect.xh>
#include <thash.xh>


/* A procedure to create the somf_TDictionary Class */
SOMEXTERN SOMClass * SOMLINK somf_TDictionaryNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the somf_TDictionary class object, and the methods it introduces. */
SOMEXTERN struct somf_TDictionaryClassDataStructure {
	SOMClass *classObject;
	somMToken somfDeleteAllKeys;
	somMToken somfDeleteAllValues;
	somMToken somfValueAt;
	somMToken somfKeyAtMF;
	somMToken somfKeyAtM;
	somMToken somfDeleteKey;
	somMToken somfAddKeyValuePairMMB;
	somMToken somfAddKeyValuePairMM;
	somMToken somfSetHashFunction;
	somMToken somfGetHashFunction;
	somMToken somfCreateNewImplementationFLLL;
	somMToken somfCreateNewImplementationF;
	somMToken somfCreateNewImplementationFL;
	somMToken somfCreateNewImplementationFLL;
	somMToken somfCopyImplementation;
	somMToken somfAssign;
	somMToken somfTDictionaryInitFLL;
	somMToken somfTDictionaryInitFL;
	somMToken somfTDictionaryInitF;
	somMToken somfTDictionaryInitLLF;
	somMToken somfTDictionaryInitLL;
	somMToken somfTDictionaryInitL;
	somMToken somfTDictionaryInitD;
} SOMDLINK somf_TDictionaryClassData;
#define _somf_TDictionary somf_TDictionaryClassData.classObject

/* The API to parentMtabs for somf_TDictionary, and the instance data it introduces. */
SOMEXTERN struct somf_TDictionaryCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK somf_TDictionaryCClassData;

/*
 * -- Typedefs for somf_TDictionary Method Procedures
 */
SOMEXTERN {
typedef somf_TDictionary*   SOMLINK somTP_somf_TDictionary_somfTDictionaryInitFLL(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn, 
		long sizeHint, 
		long growthRate);
typedef somTP_somf_TDictionary_somfTDictionaryInitFLL *somTD_somf_TDictionary_somfTDictionaryInitFLL;
typedef somf_TDictionary*   SOMLINK somTP_somf_TDictionary_somfTDictionaryInitFL(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn, 
		long sizeHint);
typedef somTP_somf_TDictionary_somfTDictionaryInitFL *somTD_somf_TDictionary_somfTDictionaryInitFL;
typedef somf_TDictionary*   SOMLINK somTP_somf_TDictionary_somfTDictionaryInitF(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn);
typedef somTP_somf_TDictionary_somfTDictionaryInitF *somTD_somf_TDictionary_somfTDictionaryInitF;
typedef somf_TDictionary*   SOMLINK somTP_somf_TDictionary_somfTDictionaryInitLLF(somf_TDictionary *somSelf, Environment *ev, 
		long sizeHint, 
		long growthRate, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn);
typedef somTP_somf_TDictionary_somfTDictionaryInitLLF *somTD_somf_TDictionary_somfTDictionaryInitLLF;
typedef somf_TDictionary*   SOMLINK somTP_somf_TDictionary_somfTDictionaryInitLL(somf_TDictionary *somSelf, Environment *ev, 
		long sizeHint, 
		long growthRate);
typedef somTP_somf_TDictionary_somfTDictionaryInitLL *somTD_somf_TDictionary_somfTDictionaryInitLL;
typedef somf_TDictionary*   SOMLINK somTP_somf_TDictionary_somfTDictionaryInitL(somf_TDictionary *somSelf, Environment *ev, 
		long sizeHint);
typedef somTP_somf_TDictionary_somfTDictionaryInitL *somTD_somf_TDictionary_somfTDictionaryInitL;
typedef somf_TDictionary*   SOMLINK somTP_somf_TDictionary_somfTDictionaryInitD(somf_TDictionary *somSelf, Environment *ev, 
		somf_TDictionary* dictionary);
typedef somTP_somf_TDictionary_somfTDictionaryInitD *somTD_somf_TDictionary_somfTDictionaryInitD;
typedef void   SOMLINK somTP_somf_TDictionary_somfAssign(somf_TDictionary *somSelf, Environment *ev, 
		somf_TDictionary* source);
typedef somTP_somf_TDictionary_somfAssign *somTD_somf_TDictionary_somfAssign;
typedef void   SOMLINK somTP_somf_TDictionary_somfDeleteAllKeys(somf_TDictionary *somSelf, Environment *ev);
typedef somTP_somf_TDictionary_somfDeleteAllKeys *somTD_somf_TDictionary_somfDeleteAllKeys;
typedef void   SOMLINK somTP_somf_TDictionary_somfDeleteAllValues(somf_TDictionary *somSelf, Environment *ev);
typedef somTP_somf_TDictionary_somfDeleteAllValues *somTD_somf_TDictionary_somfDeleteAllValues;
typedef somf_MCollectible*   SOMLINK somTP_somf_TDictionary_somfValueAt(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible* key);
typedef somTP_somf_TDictionary_somfValueAt *somTD_somf_TDictionary_somfValueAt;
typedef somf_MCollectible*   SOMLINK somTP_somf_TDictionary_somfKeyAtMF(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible* val, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn);
typedef somTP_somf_TDictionary_somfKeyAtMF *somTD_somf_TDictionary_somfKeyAtMF;
typedef somf_MCollectible*   SOMLINK somTP_somf_TDictionary_somfKeyAtM(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible* val);
typedef somTP_somf_TDictionary_somfKeyAtM *somTD_somf_TDictionary_somfKeyAtM;
typedef somf_MCollectible*   SOMLINK somTP_somf_TDictionary_somfDeleteKey(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible* key);
typedef somTP_somf_TDictionary_somfDeleteKey *somTD_somf_TDictionary_somfDeleteKey;
typedef somf_MCollectible*   SOMLINK somTP_somf_TDictionary_somfAddKeyValuePairMMB(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible* key, 
		somf_MCollectible* val, 
		boolean replace);
typedef somTP_somf_TDictionary_somfAddKeyValuePairMMB *somTD_somf_TDictionary_somfAddKeyValuePairMMB;
typedef somf_MCollectible*   SOMLINK somTP_somf_TDictionary_somfAddKeyValuePairMM(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible* key, 
		somf_MCollectible* val);
typedef somTP_somf_TDictionary_somfAddKeyValuePairMM *somTD_somf_TDictionary_somfAddKeyValuePairMM;
typedef void   SOMLINK somTP_somf_TDictionary_somfSetHashFunction(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleHashFn fn);
typedef somTP_somf_TDictionary_somfSetHashFunction *somTD_somf_TDictionary_somfSetHashFunction;
typedef somf_MCollectible_somf_MCollectibleHashFn   SOMLINK somTP_somf_TDictionary_somfGetHashFunction(somf_TDictionary *somSelf, Environment *ev);
typedef somTP_somf_TDictionary_somfGetHashFunction *somTD_somf_TDictionary_somfGetHashFunction;
typedef somf_THashTable*   SOMLINK somTP_somf_TDictionary_somfCreateNewImplementationFLLL(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn, 
		long tablesize, 
		long rate, 
		long threshold);
typedef somTP_somf_TDictionary_somfCreateNewImplementationFLLL *somTD_somf_TDictionary_somfCreateNewImplementationFLLL;
typedef somf_THashTable*   SOMLINK somTP_somf_TDictionary_somfCreateNewImplementationF(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn);
typedef somTP_somf_TDictionary_somfCreateNewImplementationF *somTD_somf_TDictionary_somfCreateNewImplementationF;
typedef somf_THashTable*   SOMLINK somTP_somf_TDictionary_somfCreateNewImplementationFL(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn, 
		long tablesize);
typedef somTP_somf_TDictionary_somfCreateNewImplementationFL *somTD_somf_TDictionary_somfCreateNewImplementationFL;
typedef somf_THashTable*   SOMLINK somTP_somf_TDictionary_somfCreateNewImplementationFLL(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn, 
		long tablesize, 
		long rate);
typedef somTP_somf_TDictionary_somfCreateNewImplementationFLL *somTD_somf_TDictionary_somfCreateNewImplementationFLL;
typedef somf_THashTable*   SOMLINK somTP_somf_TDictionary_somfCopyImplementation(somf_TDictionary *somSelf, Environment *ev);
typedef somTP_somf_TDictionary_somfCopyImplementation *somTD_somf_TDictionary_somfCopyImplementation;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef somf_MCollectible*   SOMLINK somTP_somf_TDictionary_somfAdd(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_TDictionary_somfAdd *somTD_somf_TDictionary_somfAdd;
typedef void   SOMLINK somTP_somf_TDictionary_somfAddAll(somf_TDictionary *somSelf, Environment *ev, 
		somf_TCollection* col);
typedef somTP_somf_TDictionary_somfAddAll *somTD_somf_TDictionary_somfAddAll;
typedef somf_MCollectible*   SOMLINK somTP_somf_TDictionary_somfRemove(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_TDictionary_somfRemove *somTD_somf_TDictionary_somfRemove;
typedef void   SOMLINK somTP_somf_TDictionary_somfRemoveAll(somf_TDictionary *somSelf, Environment *ev);
typedef somTP_somf_TDictionary_somfRemoveAll *somTD_somf_TDictionary_somfRemoveAll;
typedef void   SOMLINK somTP_somf_TDictionary_somfDeleteAll(somf_TDictionary *somSelf, Environment *ev);
typedef somTP_somf_TDictionary_somfDeleteAll *somTD_somf_TDictionary_somfDeleteAll;
typedef long   SOMLINK somTP_somf_TDictionary_somfCount(somf_TDictionary *somSelf, Environment *ev);
typedef somTP_somf_TDictionary_somfCount *somTD_somf_TDictionary_somfCount;
typedef somf_MCollectible*   SOMLINK somTP_somf_TDictionary_somfMember(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_TDictionary_somfMember *somTD_somf_TDictionary_somfMember;
typedef somf_TIterator*   SOMLINK somTP_somf_TDictionary_somfCreateIterator(somf_TDictionary *somSelf, Environment *ev);
typedef somTP_somf_TDictionary_somfCreateIterator *somTD_somf_TDictionary_somfCreateIterator;
typedef somf_MCollectible_somf_MCollectibleCompareFn   SOMLINK somTP_somf_TDictionary_somfTestFunction(somf_TDictionary *somSelf, Environment *ev);
typedef somTP_somf_TDictionary_somfTestFunction *somTD_somf_TDictionary_somfTestFunction;
typedef void   SOMLINK somTP_somf_TDictionary_somfSetTestFunction(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn);
typedef somTP_somf_TDictionary_somfSetTestFunction *somTD_somf_TDictionary_somfSetTestFunction;
typedef somf_TCollection*   SOMLINK somTP_somf_TDictionary_somfTCollectionInit(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn);
typedef somTP_somf_TDictionary_somfTCollectionInit *somTD_somf_TDictionary_somfTCollectionInit;
typedef boolean   SOMLINK somTP_somf_TDictionary_somfIsEqual(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_TDictionary_somfIsEqual *somTD_somf_TDictionary_somfIsEqual;
typedef somf_MCollectible*   SOMLINK somTP_somf_TDictionary_somfClone(somf_TDictionary *somSelf, Environment *ev);
typedef somTP_somf_TDictionary_somfClone *somTD_somf_TDictionary_somfClone;
typedef somf_MCollectible*   SOMLINK somTP_somf_TDictionary_somfClonePointer(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible* clonee);
typedef somTP_somf_TDictionary_somfClonePointer *somTD_somf_TDictionary_somfClonePointer;
typedef long   SOMLINK somTP_somf_TDictionary_somfHash(somf_TDictionary *somSelf, Environment *ev);
typedef somTP_somf_TDictionary_somfHash *somTD_somf_TDictionary_somfHash;
typedef boolean   SOMLINK somTP_somf_TDictionary_somfIsSame(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_TDictionary_somfIsSame *somTD_somf_TDictionary_somfIsSame;
typedef boolean   SOMLINK somTP_somf_TDictionary_somfIsNotEqual(somf_TDictionary *somSelf, Environment *ev, 
		somf_MCollectible* obj);
typedef somTP_somf_TDictionary_somfIsNotEqual *somTD_somf_TDictionary_somfIsNotEqual;
typedef void   SOMLINK somTP_somf_TDictionary_somDefaultInit(somf_TDictionary *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_somf_TDictionary_somDefaultInit *somTD_somf_TDictionary_somDefaultInit;
typedef void   SOMLINK somTP_somf_TDictionary_somDestruct(somf_TDictionary *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_somf_TDictionary_somDestruct *somTD_somf_TDictionary_somDestruct;
typedef void   SOMLINK somTP_somf_TDictionary_somDefaultCopyInit(somf_TDictionary *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TDictionary_somDefaultCopyInit *somTD_somf_TDictionary_somDefaultCopyInit;
typedef somf_TDictionary*   SOMLINK somTP_somf_TDictionary_somDefaultAssign(somf_TDictionary *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TDictionary_somDefaultAssign *somTD_somf_TDictionary_somDefaultAssign;
typedef void   SOMLINK somTP_somf_TDictionary_somDefaultConstCopyInit(somf_TDictionary *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TDictionary_somDefaultConstCopyInit *somTD_somf_TDictionary_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_somf_TDictionary_somDefaultVCopyInit(somf_TDictionary *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TDictionary_somDefaultVCopyInit *somTD_somf_TDictionary_somDefaultVCopyInit;
typedef void   SOMLINK somTP_somf_TDictionary_somDefaultConstVCopyInit(somf_TDictionary *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TDictionary_somDefaultConstVCopyInit *somTD_somf_TDictionary_somDefaultConstVCopyInit;
typedef somf_TDictionary*   SOMLINK somTP_somf_TDictionary_somDefaultConstAssign(somf_TDictionary *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TDictionary_somDefaultConstAssign *somTD_somf_TDictionary_somDefaultConstAssign;
typedef somf_TDictionary*   SOMLINK somTP_somf_TDictionary_somDefaultVAssign(somf_TDictionary *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TDictionary_somDefaultVAssign *somTD_somf_TDictionary_somDefaultVAssign;
typedef somf_TDictionary*   SOMLINK somTP_somf_TDictionary_somDefaultConstVAssign(somf_TDictionary *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_somf_TDictionary_somDefaultConstVAssign *somTD_somf_TDictionary_somDefaultConstVAssign;
typedef void   SOMLINK somTP_somf_TDictionary_somInit(somf_TDictionary *somSelf);
typedef somTP_somf_TDictionary_somInit *somTD_somf_TDictionary_somInit;
typedef void   SOMLINK somTP_somf_TDictionary_somFree(somf_TDictionary *somSelf);
typedef somTP_somf_TDictionary_somFree *somTD_somf_TDictionary_somFree;
typedef void   SOMLINK somTP_somf_TDictionary_somUninit(somf_TDictionary *somSelf);
typedef somTP_somf_TDictionary_somUninit *somTD_somf_TDictionary_somUninit;
typedef SOMClass*   SOMLINK somTP_somf_TDictionary_somGetClass(somf_TDictionary *somSelf);
typedef somTP_somf_TDictionary_somGetClass *somTD_somf_TDictionary_somGetClass;
typedef string   SOMLINK somTP_somf_TDictionary_somGetClassName(somf_TDictionary *somSelf);
typedef somTP_somf_TDictionary_somGetClassName *somTD_somf_TDictionary_somGetClassName;
typedef long   SOMLINK somTP_somf_TDictionary_somGetSize(somf_TDictionary *somSelf);
typedef somTP_somf_TDictionary_somGetSize *somTD_somf_TDictionary_somGetSize;
typedef boolean   SOMLINK somTP_somf_TDictionary_somIsA(somf_TDictionary *somSelf, 
		SOMClass* aClassObj);
typedef somTP_somf_TDictionary_somIsA *somTD_somf_TDictionary_somIsA;
typedef boolean   SOMLINK somTP_somf_TDictionary_somIsInstanceOf(somf_TDictionary *somSelf, 
		SOMClass* aClassObj);
typedef somTP_somf_TDictionary_somIsInstanceOf *somTD_somf_TDictionary_somIsInstanceOf;
typedef boolean   SOMLINK somTP_somf_TDictionary_somRespondsTo(somf_TDictionary *somSelf, 
		somId mId);
typedef somTP_somf_TDictionary_somRespondsTo *somTD_somf_TDictionary_somRespondsTo;
typedef boolean   SOMLINK somTP_somf_TDictionary_somDispatch(somf_TDictionary *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_somf_TDictionary_somDispatch *somTD_somf_TDictionary_somDispatch;
typedef boolean   SOMLINK somTP_somf_TDictionary_somClassDispatch(somf_TDictionary *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_somf_TDictionary_somClassDispatch *somTD_somf_TDictionary_somClassDispatch;
typedef boolean   SOMLINK somTP_somf_TDictionary_somCastObj(somf_TDictionary *somSelf, 
		SOMClass* cls);
typedef somTP_somf_TDictionary_somCastObj *somTD_somf_TDictionary_somCastObj;
typedef boolean   SOMLINK somTP_somf_TDictionary_somResetObj(somf_TDictionary *somSelf);
typedef somTP_somf_TDictionary_somResetObj *somTD_somf_TDictionary_somResetObj;
typedef void   SOMLINK somTP_somf_TDictionary_somDispatchV(somf_TDictionary *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_TDictionary_somDispatchV *somTD_somf_TDictionary_somDispatchV;
typedef long   SOMLINK somTP_somf_TDictionary_somDispatchL(somf_TDictionary *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_TDictionary_somDispatchL *somTD_somf_TDictionary_somDispatchL;
typedef void*   SOMLINK somTP_somf_TDictionary_somDispatchA(somf_TDictionary *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_TDictionary_somDispatchA *somTD_somf_TDictionary_somDispatchA;
typedef double   SOMLINK somTP_somf_TDictionary_somDispatchD(somf_TDictionary *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_somf_TDictionary_somDispatchD *somTD_somf_TDictionary_somDispatchD;
typedef SOMObject*   SOMLINK somTP_somf_TDictionary_somPrintSelf(somf_TDictionary *somSelf);
typedef somTP_somf_TDictionary_somPrintSelf *somTD_somf_TDictionary_somPrintSelf;
typedef void   SOMLINK somTP_somf_TDictionary_somDumpSelf(somf_TDictionary *somSelf, 
		long level);
typedef somTP_somf_TDictionary_somDumpSelf *somTD_somf_TDictionary_somDumpSelf;
typedef void   SOMLINK somTP_somf_TDictionary_somDumpSelfInt(somf_TDictionary *somSelf, 
		long level);
typedef somTP_somf_TDictionary_somDumpSelfInt *somTD_somf_TDictionary_somDumpSelfInt;
}

#endif /* somf_TDictionary_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for somf_TDictionary
 */
class somf_TDictionary : public somf_TCollection
{
public:

// somf_TDictionary::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_somf_TDictionary) somf_TDictionaryNewClass(somf_TDictionary_MajorVersion,somf_TDictionary_MinorVersion);
   return (void*)
      SOM_Resolve(_somf_TDictionary,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_somf_TDictionary));
}

// somf_TDictionary::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

somf_TDictionary& operator=(somf_TDictionary& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

somf_TDictionary()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_TDictionaryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

somf_TDictionary(somf_TDictionary* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_TDictionaryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
somf_TDictionary(const somf_TDictionary* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (somf_TDictionaryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: somfTDictionaryInitFLL */
somf_TDictionary*   somfTDictionaryInitFLL(Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn, 
		long sizeHint, 
		long growthRate)
{
/*
 *  Initializes the new dictionary.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfTDictionaryInitFLL)
	(this, ev,testfn,sizeHint,growthRate);
}


/* method: somfTDictionaryInitFL */
somf_TDictionary*   somfTDictionaryInitFL(Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn, 
		long sizeHint)
{
/*
 *  Initializes the new dictionary.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfTDictionaryInitFL)
	(this, ev,testfn,sizeHint);
}


/* method: somfTDictionaryInitF */
somf_TDictionary*   somfTDictionaryInitF(Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn)
{
/*
 *  Initializes the new dictionary.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfTDictionaryInitF)
	(this, ev,testfn);
}


/* method: somfTDictionaryInitLLF */
somf_TDictionary*   somfTDictionaryInitLLF(Environment *ev, 
		long sizeHint, 
		long growthRate, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn)
{
/*
 *  Initializes the new dictionary.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfTDictionaryInitLLF)
	(this, ev,sizeHint,growthRate,testfn);
}


/* method: somfTDictionaryInitLL */
somf_TDictionary*   somfTDictionaryInitLL(Environment *ev, 
		long sizeHint, 
		long growthRate)
{
/*
 *  Initializes the new dictionary.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfTDictionaryInitLL)
	(this, ev,sizeHint,growthRate);
}


/* method: somfTDictionaryInitL */
somf_TDictionary*   somfTDictionaryInitL(Environment *ev, 
		long sizeHint)
{
/*
 *  Initializes the new dictionary.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfTDictionaryInitL)
	(this, ev,sizeHint);
}


/* method: somfTDictionaryInitD */
somf_TDictionary*   somfTDictionaryInitD(Environment *ev, 
		somf_TDictionary* dictionary)
{
/*
 *  Initializes the new dictionary.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfTDictionaryInitD)
	(this, ev,dictionary);
}


/* method: somfAssign */
void   somfAssign(Environment *ev, 
		somf_TDictionary* source)
{
/*
 *  Assign the instance of this equal to the instance of source.
 */
   SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfAssign)
	(this, ev,source);
}


/* method: somfDeleteAllKeys */
void   somfDeleteAllKeys(Environment *ev)
{
/*
 *  Remove all of the entries in the dictionary.  Reset the count to be zero.
 *  Call the destructor on every key in the dictionary.
 */
   SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfDeleteAllKeys)
	(this, ev);
}


/* method: somfDeleteAllValues */
void   somfDeleteAllValues(Environment *ev)
{
/*
 *  Remove all of the entries in the dictionary.  Reset the count to be zero.
 *  Call the destructor on every value in the hash table.  If you have a value
 *  which appears more than once, you will be sorry you used this method because
 *  the utility classes will delete the same object more than once.  This
 *  is not good.
 */
   SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfDeleteAllValues)
	(this, ev);
}


/* method: somfValueAt */
somf_MCollectible*   somfValueAt(Environment *ev, 
		somf_MCollectible* key)
{
/*
 *  Return the value associated with the key.  Return SOMF_NIL if the key could not
 *  be found.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfValueAt)
	(this, ev,key);
}


/* method: somfKeyAtMF */
somf_MCollectible*   somfKeyAtMF(Environment *ev, 
		somf_MCollectible* val, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn)
{
/*
 *  Return the first key found which has val as its value.  This involves a slow
 *  search.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfKeyAtMF)
	(this, ev,val,testfn);
}


/* method: somfKeyAtM */
somf_MCollectible*   somfKeyAtM(Environment *ev, 
		somf_MCollectible* val)
{
/*
 *  Return the first key found which has val as its value.  This involves a slow
 *  search. This method uses the same compare function as specified in
 *  the constructor.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfKeyAtM)
	(this, ev,val);
}


/* method: somfDeleteKey */
somf_MCollectible*   somfDeleteKey(Environment *ev, 
		somf_MCollectible* key)
{
/*
 *  Delete the key from the key,value pair associated with key and remove the
 *  key,value pair from the dictionary.  Return the value that was removed
 *  as a result of this call.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfDeleteKey)
	(this, ev,key);
}


/* method: somfAddKeyValuePairMMB */
somf_MCollectible*   somfAddKeyValuePairMMB(Environment *ev, 
		somf_MCollectible* key, 
		somf_MCollectible* val, 
		boolean replace)
{
/*
 *  If replace = FALSE, then only add key,value pair to the table if there is not
 *  an existing key,value pair.  Otherwise, if replace=TRUE, add the key,value
 *  pair to the hash table.  Either way, return the key that existed (if any) in
 *  the hash table before this call.  Proper memory management may involve
 *  checking to see if the key returned is "the same" as the key passes in when
 *  replacing key,value pairs.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfAddKeyValuePairMMB)
	(this, ev,key,val,replace);
}


/* method: somfAddKeyValuePairMM */
somf_MCollectible*   somfAddKeyValuePairMM(Environment *ev, 
		somf_MCollectible* key, 
		somf_MCollectible* val)
{
/*
 *  Add the key,value pair to the hash table, and return the key that existed
 *  (if any) in the hash table before this call.  Proper memory management may
 *  involve checking to see if the key returned is "the same" as the key passes
 *  in when replacing key,value pairs.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfAddKeyValuePairMM)
	(this, ev,key,val);
}


/* method: somfSetHashFunction */
void   somfSetHashFunction(Environment *ev, 
		somf_MCollectible_somf_MCollectibleHashFn fn)
{
/*
 *  Set the hash function to fn.  By default this is set to MCollectible's Hash
 *  (which is usually overridden in the objects you are adding to the hash
 *  table).  You can use any hash function that you like as long as it has the
 *  type signature of somf_MCollectibleHashFn.  Most of the time, you won't need to
 *  do this.
 */
   SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfSetHashFunction)
	(this, ev,fn);
}


/* method: somfGetHashFunction */
somf_MCollectible_somf_MCollectibleHashFn   somfGetHashFunction(Environment *ev)
{
/*
 *  Return the hash function.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfGetHashFunction)
	(this, ev);
}


/* method: somfCreateNewImplementationFLLL */
somf_THashTable*   somfCreateNewImplementationFLLL(Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn, 
		long tablesize, 
		long rate, 
		long threshold)
{
/*
 *  Create a new hash table for the dictionary.  Normally you won't have to do
 *  this.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfCreateNewImplementationFLLL)
	(this, ev,testfn,tablesize,rate,threshold);
}


/* method: somfCreateNewImplementationF */
somf_THashTable*   somfCreateNewImplementationF(Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn)
{
/*
 *  Create a new hash table for the dictionary.  Normally you won't have to do
 *  this.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfCreateNewImplementationF)
	(this, ev,testfn);
}


/* method: somfCreateNewImplementationFL */
somf_THashTable*   somfCreateNewImplementationFL(Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn, 
		long tablesize)
{
/*
 *  Create a new hash table for the dictionary.  Normally you won't have to do
 *  this.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfCreateNewImplementationFL)
	(this, ev,testfn,tablesize);
}


/* method: somfCreateNewImplementationFLL */
somf_THashTable*   somfCreateNewImplementationFLL(Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn, 
		long tablesize, 
		long rate)
{
/*
 *  Create a new hash table for the dictionary.  Normally you won't have to do
 *  this.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfCreateNewImplementationFLL)
	(this, ev,testfn,tablesize,rate);
}


/* method: somfCopyImplementation */
somf_THashTable*   somfCopyImplementation(Environment *ev)
{
/*
 *  Return a hash table that is a copy of the hash table in this.  Normally you
 *  won't have to do this.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TDictionary,somfCopyImplementation)
	(this, ev);
}


/*
 * Reintroduce inherited methods
 */

/* method: somfAdd */
somf_MCollectible*   somfAdd(Environment *ev, 
		somf_MCollectible* obj)
{
/*
 *  Add obj to this.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TCollection,somfAdd)
	(this, ev,obj);
}


/* method: somfAddAll */
void   somfAddAll(Environment *ev, 
		somf_TCollection* col)
{
/*
 *  Add all of the objects in collection to this.  Essentially this is
 *  equivalent to getting an iterator for the collection passed in and adding
 *  each element in the collection to this.
 */
   SOM_ResolveD(this,somf_TDictionary,somf_TCollection,somfAddAll)
	(this, ev,col);
}


/* method: somfRemove */
somf_MCollectible*   somfRemove(Environment *ev, 
		somf_MCollectible* obj)
{
/*
 *  Remove obj from this.  Return the object which was actually removed
 *  (which if you are using an IsEqual test function may not be the same as the
 *  object passed in only "equal")
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TCollection,somfRemove)
	(this, ev,obj);
}


/* method: somfRemoveAll */
void   somfRemoveAll(Environment *ev)
{
/*
 *  Remove all of the objects from this.
 */
   SOM_ResolveD(this,somf_TDictionary,somf_TCollection,somfRemoveAll)
	(this, ev);
}


/* method: somfDeleteAll */
void   somfDeleteAll(Environment *ev)
{
/*
 *  Remove all of the objects from this and deallocate the storage that these
 *  objects might have owned (that is, the destructor function is called
 *  for each object in the collection).
 */
   SOM_ResolveD(this,somf_TDictionary,somf_TCollection,somfDeleteAll)
	(this, ev);
}


/* method: somfCount */
long   somfCount(Environment *ev)
{
/*
 *  Return the number of objects in this.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TCollection,somfCount)
	(this, ev);
}


/* method: somfMember */
somf_MCollectible*   somfMember(Environment *ev, 
		somf_MCollectible* obj)
{
/*
 *  Each object in this is compared to obj using the function testFn.  Return the
 *  object for which testFn returned TRUE.  Return SOMF_NIL if not object was found.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TCollection,somfMember)
	(this, ev,obj);
}


/* method: somfCreateIterator */
somf_TIterator*   somfCreateIterator(Environment *ev)
{
/*
 *  This method returns a new iterator which is suitable for use in iterating
 *  over the objects in this collection.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TCollection,somfCreateIterator)
	(this, ev);
}


/* method: somfTestFunction */
somf_MCollectible_somf_MCollectibleCompareFn   somfTestFunction(Environment *ev)
{
/*
 *  Return the test function.  This is usually either IsSame or IsEqual.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TCollection,somfTestFunction)
	(this, ev);
}


/* method: somfSetTestFunction */
void   somfSetTestFunction(Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn)
{
/*
 *  Set the test function.
 */
   SOM_ResolveD(this,somf_TDictionary,somf_TCollection,somfSetTestFunction)
	(this, ev,testfn);
}


/* method: somfTCollectionInit */
somf_TCollection*   somfTCollectionInit(Environment *ev, 
		somf_MCollectible_somf_MCollectibleCompareFn testfn)
{
/*
 *  Initialize the somf_TCollection test function to testfn.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_TCollection,somfTCollectionInit)
	(this, ev,testfn);
}


/* method: somfIsEqual */
boolean   somfIsEqual(Environment *ev, 
		somf_MCollectible* obj)
{
   return SOM_ResolveD(this,somf_TDictionary,somf_MCollectible,somfIsEqual)
	(this, ev,obj);
}


/* method: somfClone */
somf_MCollectible*   somfClone(Environment *ev)
{
/*
 *  somfClone provides a general function for creating a new instance of this.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_MCollectible,somfClone)
	(this, ev);
}


/* method: somfClonePointer */
somf_MCollectible*   somfClonePointer(Environment *ev, 
		somf_MCollectible* clonee)
{
/*
 *  somfClonePointer returns a pointer to a Clone
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_MCollectible,somfClonePointer)
	(this, ev,clonee);
}


/* method: somfHash */
long   somfHash(Environment *ev)
{
/*
 *  somfHash returns a value suitable for use as a hashing probe for this.
 *  The default function will simply return the address of the object.
 *  The default function is almost certainly not adequate if you are overriding
 *  somfIsEqual because you need to make sure that all objects that "are equal"
 *  to each other return the same hash value.  For example, a TText object would
 *  return a hash value computed using the characters in the string instead of
 *  the address of the string.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_MCollectible,somfHash)
	(this, ev);
}


/* method: somfIsSame */
boolean   somfIsSame(Environment *ev, 
		somf_MCollectible* obj)
{
/*
 *  The default function for somfIsSame is a pointer comparison
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_MCollectible,somfIsSame)
	(this, ev,obj);
}


/* method: somfIsNotEqual */
boolean   somfIsNotEqual(Environment *ev, 
		somf_MCollectible* obj)
{
/*
 *  somfIsNotEqual returns TRUE if obj is NOT isomorphic to this.  It uses
 *  somfIsEqual, so overriding somfIsEqual will handle the logic of somfIsNotEqual too.
 */
   return SOM_ResolveD(this,somf_TDictionary,somf_MCollectible,somfIsNotEqual)
	(this, ev,obj);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
/*
 *  A default initializer for a SOM object. Passing a null ctrl
 *  indicates to the receiver that its class is the class of the
 *  object being initialized, whereby the initializer will determine
 *  an appropriate control structure.
 */
   SOM_ResolveD(this,somf_TDictionary,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
/*
 *  The default destructor for a SOM object. A nonzero <doFree>
 *  indicates that the object storage should be freed by the
 *  object's class (via somDeallocate) after uninitialization.
 *  As with somDefaultInit, a null ctrl can be passed.
 */
   SOM_ResolveD(this,somf_TDictionary,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,somf_TDictionary,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
somf_TDictionary*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,somf_TDictionary,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,somf_TDictionary,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,somf_TDictionary,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,somf_TDictionary,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
somf_TDictionary*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,somf_TDictionary,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
somf_TDictionary*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,somf_TDictionary,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
somf_TDictionary*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,somf_TDictionary,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,somf_TDictionary,SOMObject,somInit)
	(this);
}


/* method: somFree */
void   somFree()
{
/*
 *  Use as directed by framework implementations.
 */
   SOM_ResolveD(this,somf_TDictionary,SOMObject,somFree)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,somf_TDictionary,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,somf_TDictionary,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,somf_TDictionary,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,somf_TDictionary,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,somf_TDictionary,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,somf_TDictionary,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,somf_TDictionary,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   somf_TDictionary_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,somf_TDictionary,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,somf_TDictionary,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   somf_TDictionary_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,somf_TDictionary,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,somf_TDictionary,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,somf_TDictionary,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,somf_TDictionary,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   somf_TDictionary_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,somf_TDictionary,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,somf_TDictionary,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   somf_TDictionary_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,somf_TDictionary,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,somf_TDictionary,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   somf_TDictionary_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,somf_TDictionary,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,somf_TDictionary,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   somf_TDictionary_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,somf_TDictionary,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,somf_TDictionary,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,somf_TDictionary,SOMObject,somPrintSelf)
	(this);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write a detailed description of this object
 *  and its current state.
 * 
 *  <level> indicates the nesting level for describing compound objects
 *  it must be greater than or equal to zero.  All lines in the
 *  description will be preceeded by <2*level> spaces.
 * 
 *  This routine only actually writes the data that concerns the object
 *  as a whole, such as class, and uses <somDumpSelfInt> to describe
 *  the object's current state.  This approach allows readable
 *  descriptions of compound objects to be constructed.
 * 
 *  Generally it is not necessary to override this method, if it is
 *  overriden it generally must be completely replaced.
 */
   SOM_ResolveD(this,somf_TDictionary,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
/*
 *  Uses <SOMOutCharRoutine> to write in the current state of this object.
 *  Generally this method will need to be overridden.  When overriding
 *  it, begin by calling the parent class form of this method and then
 *  write in a description of your class's instance data. This will
 *  result in a description of all the object's instance data going
 *  from its root ancestor class to its specific class.
 */
   SOM_ResolveD(this,somf_TDictionary,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* somf_TDictionary */



#endif       /* SOM_somf_TDictionary_xh */

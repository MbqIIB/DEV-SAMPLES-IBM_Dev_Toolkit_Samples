
/*
 * This file was generated by the SOM Compiler.
 * FileName: attribdf.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.17
 *     SOM Emitter emitxh: 2.47
 */

#ifndef SOM_AttributeDef_xh
#define SOM_AttributeDef_xh

class AttributeDef;

/*
 *  This interface is used to access information associated with
 *  attributes defined in an IDL interface.
 * 
 *  See CORBA 1.1, 7.5.5, p.135
 */

#define AttributeDef_MajorVersion 2
#define AttributeDef_MinorVersion 3

/*
 * Passthru lines: File: "C.xh", "before"
 */

    #include <somtcnst.xh>
    #include <somir.xh>
    #include <containd.xh>


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_Contained_xh
#include <containd.xh>
#endif

#ifndef AttributeDef_API
#define AttributeDef_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class Container;
typedef unsigned long AttributeDef_AttributeMode;
#define AttributeDef_NORMAL 1UL
#define AttributeDef_READONLY 2UL
typedef
struct AttributeDef_AttributeDescription {
Identifier name;
RepositoryId id;
RepositoryId defined_in;
TypeCode type;
AttributeDef_AttributeMode mode;
} AttributeDef_AttributeDescription;
/*
 *  The inherited describe method returns an instance of this
 *  (AttributeDescription) structure in the "value" member of the
 *  Description structure defined in the Contained interface.
 */


#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_AttributeMode
    #ifdef AttributeMode
        #undef AttributeMode
        #define SOMTGD_AttributeMode 1
    #else
        #define AttributeMode AttributeDef_AttributeMode
    #endif /* AttributeMode */
#endif /* SOMTGD_AttributeMode */
#ifndef SOMTGD_AttributeDescription
    #ifdef AttributeDescription
        #undef AttributeDescription
        #define SOMTGD_AttributeDescription 1
    #else
        #define AttributeDescription AttributeDef_AttributeDescription
    #endif /* AttributeDescription */
#endif /* SOMTGD_AttributeDescription */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the AttributeDef Class */
SOMEXTERN SOMClass * SOMLINK AttributeDefNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the AttributeDef class object, and the methods it introduces. */
SOMEXTERN struct AttributeDefClassDataStructure {
	SOMClass *classObject;
	somMToken _get_type;
	somMToken _set_type;
	somMToken _get_mode;
	somMToken _set_mode;
} SOMDLINK AttributeDefClassData;
#define _AttributeDef AttributeDefClassData.classObject

/* The API to parentMtabs for AttributeDef, and the instance data it introduces. */
SOMEXTERN struct AttributeDefCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK AttributeDefCClassData;

/*
 * -- Typedefs for AttributeDef Method Procedures
 */
SOMEXTERN {
typedef TypeCode   SOMLINK somTP_AttributeDef__get_type(AttributeDef *somSelf, Environment *ev);
typedef somTP_AttributeDef__get_type *somTD_AttributeDef__get_type;
typedef void   SOMLINK somTP_AttributeDef__set_type(AttributeDef *somSelf, Environment *ev, 
		TypeCode type);
typedef somTP_AttributeDef__set_type *somTD_AttributeDef__set_type;
typedef AttributeDef_AttributeMode   SOMLINK somTP_AttributeDef__get_mode(AttributeDef *somSelf, Environment *ev);
typedef somTP_AttributeDef__get_mode *somTD_AttributeDef__get_mode;
typedef void   SOMLINK somTP_AttributeDef__set_mode(AttributeDef *somSelf, Environment *ev, 
		AttributeDef_AttributeMode mode);
typedef somTP_AttributeDef__set_mode *somTD_AttributeDef__set_mode;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef Identifier   SOMLINK somTP_AttributeDef__get_name(AttributeDef *somSelf, Environment *ev);
typedef somTP_AttributeDef__get_name *somTD_AttributeDef__get_name;
typedef void   SOMLINK somTP_AttributeDef__set_name(AttributeDef *somSelf, Environment *ev, 
		Identifier name);
typedef somTP_AttributeDef__set_name *somTD_AttributeDef__set_name;
typedef RepositoryId   SOMLINK somTP_AttributeDef__get_id(AttributeDef *somSelf, Environment *ev);
typedef somTP_AttributeDef__get_id *somTD_AttributeDef__get_id;
typedef void   SOMLINK somTP_AttributeDef__set_id(AttributeDef *somSelf, Environment *ev, 
		RepositoryId id);
typedef somTP_AttributeDef__set_id *somTD_AttributeDef__set_id;
typedef RepositoryId   SOMLINK somTP_AttributeDef__get_defined_in(AttributeDef *somSelf, Environment *ev);
typedef somTP_AttributeDef__get_defined_in *somTD_AttributeDef__get_defined_in;
typedef void   SOMLINK somTP_AttributeDef__set_defined_in(AttributeDef *somSelf, Environment *ev, 
		RepositoryId defined_in);
typedef somTP_AttributeDef__set_defined_in *somTD_AttributeDef__set_defined_in;
typedef _IDL_SEQUENCE_somModifier   SOMLINK somTP_AttributeDef__get_somModifiers(AttributeDef *somSelf, Environment *ev);
typedef somTP_AttributeDef__get_somModifiers *somTD_AttributeDef__get_somModifiers;
typedef void   SOMLINK somTP_AttributeDef__set_somModifiers(AttributeDef *somSelf, Environment *ev, 
		_IDL_SEQUENCE_somModifier* somModifiers);
typedef somTP_AttributeDef__set_somModifiers *somTD_AttributeDef__set_somModifiers;
typedef _IDL_SEQUENCE_Container   SOMLINK somTP_AttributeDef_within(AttributeDef *somSelf, Environment *ev);
typedef somTP_AttributeDef_within *somTD_AttributeDef_within;
typedef Contained_Description   SOMLINK somTP_AttributeDef_describe(AttributeDef *somSelf, Environment *ev);
typedef somTP_AttributeDef_describe *somTD_AttributeDef_describe;
typedef void   SOMLINK somTP_AttributeDef_somFree(AttributeDef *somSelf);
typedef somTP_AttributeDef_somFree *somTD_AttributeDef_somFree;
typedef void   SOMLINK somTP_AttributeDef_somDefaultInit(AttributeDef *somSelf, 
		som3InitCtrl* ctrl);
typedef somTP_AttributeDef_somDefaultInit *somTD_AttributeDef_somDefaultInit;
typedef void   SOMLINK somTP_AttributeDef_somDestruct(AttributeDef *somSelf, 
		octet doFree, 
		som3DestructCtrl* ctrl);
typedef somTP_AttributeDef_somDestruct *somTD_AttributeDef_somDestruct;
typedef void   SOMLINK somTP_AttributeDef_somDumpSelf(AttributeDef *somSelf, 
		long level);
typedef somTP_AttributeDef_somDumpSelf *somTD_AttributeDef_somDumpSelf;
typedef void   SOMLINK somTP_AttributeDef_somDumpSelfInt(AttributeDef *somSelf, 
		long level);
typedef somTP_AttributeDef_somDumpSelfInt *somTD_AttributeDef_somDumpSelfInt;
typedef void   SOMLINK somTP_AttributeDef_somDefaultCopyInit(AttributeDef *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_AttributeDef_somDefaultCopyInit *somTD_AttributeDef_somDefaultCopyInit;
typedef AttributeDef*   SOMLINK somTP_AttributeDef_somDefaultAssign(AttributeDef *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_AttributeDef_somDefaultAssign *somTD_AttributeDef_somDefaultAssign;
typedef void   SOMLINK somTP_AttributeDef_somDefaultConstCopyInit(AttributeDef *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_AttributeDef_somDefaultConstCopyInit *somTD_AttributeDef_somDefaultConstCopyInit;
typedef void   SOMLINK somTP_AttributeDef_somDefaultVCopyInit(AttributeDef *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_AttributeDef_somDefaultVCopyInit *somTD_AttributeDef_somDefaultVCopyInit;
typedef void   SOMLINK somTP_AttributeDef_somDefaultConstVCopyInit(AttributeDef *somSelf, 
		som3InitCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_AttributeDef_somDefaultConstVCopyInit *somTD_AttributeDef_somDefaultConstVCopyInit;
typedef AttributeDef*   SOMLINK somTP_AttributeDef_somDefaultConstAssign(AttributeDef *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_AttributeDef_somDefaultConstAssign *somTD_AttributeDef_somDefaultConstAssign;
typedef AttributeDef*   SOMLINK somTP_AttributeDef_somDefaultVAssign(AttributeDef *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_AttributeDef_somDefaultVAssign *somTD_AttributeDef_somDefaultVAssign;
typedef AttributeDef*   SOMLINK somTP_AttributeDef_somDefaultConstVAssign(AttributeDef *somSelf, 
		som3AssignCtrl* ctrl, 
		SOMObject* fromObj);
typedef somTP_AttributeDef_somDefaultConstVAssign *somTD_AttributeDef_somDefaultConstVAssign;
typedef void   SOMLINK somTP_AttributeDef_somInit(AttributeDef *somSelf);
typedef somTP_AttributeDef_somInit *somTD_AttributeDef_somInit;
typedef void   SOMLINK somTP_AttributeDef_somUninit(AttributeDef *somSelf);
typedef somTP_AttributeDef_somUninit *somTD_AttributeDef_somUninit;
typedef SOMClass*   SOMLINK somTP_AttributeDef_somGetClass(AttributeDef *somSelf);
typedef somTP_AttributeDef_somGetClass *somTD_AttributeDef_somGetClass;
typedef string   SOMLINK somTP_AttributeDef_somGetClassName(AttributeDef *somSelf);
typedef somTP_AttributeDef_somGetClassName *somTD_AttributeDef_somGetClassName;
typedef long   SOMLINK somTP_AttributeDef_somGetSize(AttributeDef *somSelf);
typedef somTP_AttributeDef_somGetSize *somTD_AttributeDef_somGetSize;
typedef boolean   SOMLINK somTP_AttributeDef_somIsA(AttributeDef *somSelf, 
		SOMClass* aClassObj);
typedef somTP_AttributeDef_somIsA *somTD_AttributeDef_somIsA;
typedef boolean   SOMLINK somTP_AttributeDef_somIsInstanceOf(AttributeDef *somSelf, 
		SOMClass* aClassObj);
typedef somTP_AttributeDef_somIsInstanceOf *somTD_AttributeDef_somIsInstanceOf;
typedef boolean   SOMLINK somTP_AttributeDef_somRespondsTo(AttributeDef *somSelf, 
		somId mId);
typedef somTP_AttributeDef_somRespondsTo *somTD_AttributeDef_somRespondsTo;
typedef boolean   SOMLINK somTP_AttributeDef_somDispatch(AttributeDef *somSelf, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_AttributeDef_somDispatch *somTD_AttributeDef_somDispatch;
typedef boolean   SOMLINK somTP_AttributeDef_somClassDispatch(AttributeDef *somSelf, 
		SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap);
typedef somTP_AttributeDef_somClassDispatch *somTD_AttributeDef_somClassDispatch;
typedef boolean   SOMLINK somTP_AttributeDef_somCastObj(AttributeDef *somSelf, 
		SOMClass* cls);
typedef somTP_AttributeDef_somCastObj *somTD_AttributeDef_somCastObj;
typedef boolean   SOMLINK somTP_AttributeDef_somResetObj(AttributeDef *somSelf);
typedef somTP_AttributeDef_somResetObj *somTD_AttributeDef_somResetObj;
typedef void   SOMLINK somTP_AttributeDef_somDispatchV(AttributeDef *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_AttributeDef_somDispatchV *somTD_AttributeDef_somDispatchV;
typedef long   SOMLINK somTP_AttributeDef_somDispatchL(AttributeDef *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_AttributeDef_somDispatchL *somTD_AttributeDef_somDispatchL;
typedef void*   SOMLINK somTP_AttributeDef_somDispatchA(AttributeDef *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_AttributeDef_somDispatchA *somTD_AttributeDef_somDispatchA;
typedef double   SOMLINK somTP_AttributeDef_somDispatchD(AttributeDef *somSelf, 
		somId methodId, 
		somId descriptor, 
		va_list ap);
typedef somTP_AttributeDef_somDispatchD *somTD_AttributeDef_somDispatchD;
typedef SOMObject*   SOMLINK somTP_AttributeDef_somPrintSelf(AttributeDef *somSelf);
typedef somTP_AttributeDef_somPrintSelf *somTD_AttributeDef_somPrintSelf;
}

#endif /* AttributeDef_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for AttributeDef
 */
class AttributeDef : public Contained
{
/*
 *  This interface is used to access information associated with
 *  attributes defined in an IDL interface.
 * 
 *  See CORBA 1.1, 7.5.5, p.135
 */
public:

// AttributeDef::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_AttributeDef) AttributeDefNewClass(AttributeDef_MajorVersion,AttributeDef_MinorVersion);
   return (void*)
      SOM_Resolve(_AttributeDef,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_AttributeDef));
}

// AttributeDef::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somFree)
         ((SOMObject*)obj);
   }
}

AttributeDef& operator=(AttributeDef& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

AttributeDef()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AttributeDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

AttributeDef(AttributeDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AttributeDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

#ifdef __IBMCPP__
#pragma info(nocnv,nopar)
#endif
AttributeDef(const AttributeDef* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (AttributeDefCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}
#ifdef __IBMCPP__
#pragma info(restore)
#endif


/* method: _get_type */
TypeCode   _get_type(Environment *ev)
{
/*
 *  The TypeCode of the receiving object.  The memory used to hold
 *  the TypeCode is contained in the receiving object, which retains
 *  ownership.  Hence, do not free the returned TypeCode.  If you want
 *  to obtain a separate copy, use the TypeCode_copy operation.
 */
   return SOM_ResolveD(this,AttributeDef,AttributeDef,_get_type)
	(this, ev);
}


/* method: _set_type */
void   _set_type(Environment *ev, 
		TypeCode type)
{
/*
 *  The TypeCode of the receiving object.  The memory used to hold
 *  the TypeCode is contained in the receiving object, which retains
 *  ownership.  Hence, do not free the returned TypeCode.  If you want
 *  to obtain a separate copy, use the TypeCode_copy operation.
 */
   SOM_ResolveD(this,AttributeDef,AttributeDef,_set_type)
	(this, ev,type);
}


/* method: _get_mode */
AttributeDef_AttributeMode   _get_mode(Environment *ev)
{
/*
 *  The AttributeMode of the receiving object;
 */
   return SOM_ResolveD(this,AttributeDef,AttributeDef,_get_mode)
	(this, ev);
}


/* method: _set_mode */
void   _set_mode(Environment *ev, 
		AttributeDef_AttributeMode mode)
{
/*
 *  The AttributeMode of the receiving object;
 */
   SOM_ResolveD(this,AttributeDef,AttributeDef,_set_mode)
	(this, ev,mode);
}


/*
 * Reintroduce inherited methods
 */

/* method: _get_name */
Identifier   _get_name(Environment *ev)
{
/*
 *  The value of the "name" field of the receiving object
 * 
 *  This is a simple name that indentifies the receiving object
 *  within its containment hierarchy.  Outside of the containment
 *  hierarchy this name is not necessarily unique, and may require
 *  qualification by ModuleDef name, InterfaceDef name, etc.
 */
   return SOM_ResolveD(this,AttributeDef,Contained,_get_name)
	(this, ev);
}


/* method: _set_name */
void   _set_name(Environment *ev, 
		Identifier name)
{
/*
 *  The value of the "name" field of the receiving object
 * 
 *  This is a simple name that indentifies the receiving object
 *  within its containment hierarchy.  Outside of the containment
 *  hierarchy this name is not necessarily unique, and may require
 *  qualification by ModuleDef name, InterfaceDef name, etc.
 */
   SOM_ResolveD(this,AttributeDef,Contained,_set_name)
	(this, ev,name);
}


/* method: _get_id */
RepositoryId   _get_id(Environment *ev)
{
/*
 *  The value of the "id" field of the receiving object
 * 
 *  The "id" is a string that uniquely identifies any object in
 *  the interface repository.  No qualification is needed for
 *  an "id".  Notice that "RepositoryId"s have no relationship
 *  to the SOM type "somId".
 */
   return SOM_ResolveD(this,AttributeDef,Contained,_get_id)
	(this, ev);
}


/* method: _set_id */
void   _set_id(Environment *ev, 
		RepositoryId id)
{
/*
 *  The value of the "id" field of the receiving object
 * 
 *  The "id" is a string that uniquely identifies any object in
 *  the interface repository.  No qualification is needed for
 *  an "id".  Notice that "RepositoryId"s have no relationship
 *  to the SOM type "somId".
 */
   SOM_ResolveD(this,AttributeDef,Contained,_set_id)
	(this, ev,id);
}


/* method: _get_defined_in */
RepositoryId   _get_defined_in(Environment *ev)
{
/*
 *  The value of the "defined_in" field of the receiving object
 * 
 *  This "id" uniquely identifies the container where the
 *  receiving object is defined.  Objects that have global scope
 *  and do not appear within any other objects are by default
 *  placed in the "Repository" object.
 */
   return SOM_ResolveD(this,AttributeDef,Contained,_get_defined_in)
	(this, ev);
}


/* method: _set_defined_in */
void   _set_defined_in(Environment *ev, 
		RepositoryId defined_in)
{
/*
 *  The value of the "defined_in" field of the receiving object
 * 
 *  This "id" uniquely identifies the container where the
 *  receiving object is defined.  Objects that have global scope
 *  and do not appear within any other objects are by default
 *  placed in the "Repository" object.
 */
   SOM_ResolveD(this,AttributeDef,Contained,_set_defined_in)
	(this, ev,defined_in);
}


/* method: _get_somModifiers */
_IDL_SEQUENCE_somModifier   _get_somModifiers(Environment *ev)
{
/*
 *  [SOM-unique extension]
 * 
 *  The somModifiers attribute is a sequence containing all of
 *  the "modifiers" attached to the corresponding IDL object in
 *  the SOM-unique implementation section of the IDL file where
 *  the receiving object was originally defined.
 */
   return SOM_ResolveD(this,AttributeDef,Contained,_get_somModifiers)
	(this, ev);
}


/* method: _set_somModifiers */
void   _set_somModifiers(Environment *ev, 
		_IDL_SEQUENCE_somModifier* somModifiers)
{
/*
 *  [SOM-unique extension]
 * 
 *  The somModifiers attribute is a sequence containing all of
 *  the "modifiers" attached to the corresponding IDL object in
 *  the SOM-unique implementation section of the IDL file where
 *  the receiving object was originally defined.
 */
   SOM_ResolveD(this,AttributeDef,Contained,_set_somModifiers)
	(this, ev,somModifiers);
}


/* method: within */
_IDL_SEQUENCE_Container   within(Environment *ev)
{
/*
 *  Returns a list of objects that contain the receiving object.
 *  If the object is an interface or module, it can only be contained
 *  by the object that defines it.  Other objects can be contained by
 *  objects that define or inherit them.
 * 
 *  When you have finished using the sequence returned by this method
 *  it is your responsibility to release the storage allocated for it.
 *  To free the sequence, use a call similar to the following:
 * 
 * 	  if (seqname._length)
 * 	      long i;
 * 	      for(i=0; i<seqname._length; i++)
 * 		_somFree(seqname._buffer[i]);
 * 	      SOMFree (seqname._buffer);
 */
   return SOM_ResolveD(this,AttributeDef,Contained,within)
	(this, ev);
}


/* method: describe */
Contained_Description   describe(Environment *ev)
{
/*
 *  Returns a structure containing all of the attributes defined in
 *  the interface of the receiving object.
 * 
 *  Warning: this method returns pointers to things withing objects
 *  (for example, name).  Don't use the somFree method to release
 *  any of these objects while this information is still needed..
 * 
 *  When you have finished using the information in the returned
 *  Description structure, it is your responsibility to release
 *  the associated storage using a call similar to the following:
 * 
 * 	  if (desc.value._value)
 * 	      SOMFree (desc.value._value);
 */
   return SOM_ResolveD(this,AttributeDef,Contained,describe)
	(this, ev);
}


/* method: somFree */
void   somFree()
{
   SOM_ResolveD(this,AttributeDef,SOMObject,somFree)
	(this);
}


/* initializer method: somDefaultInit */
void   somDefaultInit(som3InitCtrl* ctrl)
{
   SOM_ResolveD(this,AttributeDef,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* method: somDestruct */
void   somDestruct(octet doFree, 
		som3DestructCtrl* ctrl)
{
   SOM_ResolveD(this,AttributeDef,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,AttributeDef,SOMObject,somDumpSelf)
	(this,level);
}


/* method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,AttributeDef,SOMObject,somDumpSelfInt)
	(this,level);
}


/* initializer method: somDefaultCopyInit */
void   somDefaultCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor. Use this to make copies of objects for
 *  calling methods with "by-value" argument semantics.
 */
   SOM_ResolveD(this,AttributeDef,SOMObject,somDefaultCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultAssign */
AttributeDef*  somDefaultAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator. Use this to "assign" the state of one
 *  object to another.
 */
   return SOM_ResolveD(this,AttributeDef,SOMObject,somDefaultAssign)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstCopyInit */
void   somDefaultConstCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const fromObj.
 */
   SOM_ResolveD(this,AttributeDef,SOMObject,somDefaultConstCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultVCopyInit */
void   somDefaultVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a volatile fromObj.
 */
   SOM_ResolveD(this,AttributeDef,SOMObject,somDefaultVCopyInit)
	(this,ctrl,fromObj);
}


/* initializer method: somDefaultConstVCopyInit */
void   somDefaultConstVCopyInit(som3InitCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default copy constructor that uses a const volatile fromObj.
 */
   SOM_ResolveD(this,AttributeDef,SOMObject,somDefaultConstVCopyInit)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstAssign */
AttributeDef*  somDefaultConstAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const fromObj.
 */
   return SOM_ResolveD(this,AttributeDef,SOMObject,somDefaultConstAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultVAssign */
AttributeDef*  somDefaultVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a volatile fromObj.
 */
   return SOM_ResolveD(this,AttributeDef,SOMObject,somDefaultVAssign)
	(this,ctrl,fromObj);
}


/* method: somDefaultConstVAssign */
AttributeDef*  somDefaultConstVAssign(som3AssignCtrl* ctrl, 
		SOMObject* fromObj)
{
/*
 *  A default assignment operator that uses a const volatile fromObj.
 */
   return SOM_ResolveD(this,AttributeDef,SOMObject,somDefaultConstVAssign)
	(this,ctrl,fromObj);
}


/* method: somInit */
void   somInit()
{
/*
 *  Obsolete but still supported. Override somDefaultInit instead of somInit.
 */
   SOM_ResolveD(this,AttributeDef,SOMObject,somInit)
	(this);
}


/* method: somUninit */
void   somUninit()
{
/*
 *  Obsolete but still supported. Override somDestruct instead of somUninit.
 */
   SOM_ResolveD(this,AttributeDef,SOMObject,somUninit)
	(this);
}


/* method: somGetClass */
SOMClass*   somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,AttributeDef,SOMObject,somGetClass)
	(this);
}


/* method: somGetClassName */
string   somGetClassName()
{
/*
 *  Return the name of the receiver's class.
 */
   return SOM_ResolveD(this,AttributeDef,SOMObject,somGetClassName)
	(this);
}


/* method: somGetSize */
long   somGetSize()
{
/*
 *  Return the size of the receiver.
 */
   return SOM_ResolveD(this,AttributeDef,SOMObject,somGetSize)
	(this);
}


/* method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver responds to methods
 *  introduced by <aClassObj>, and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,AttributeDef,SOMObject,somIsA)
	(this,aClassObj);
}


/* method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
/*
 *  Returns 1 (true) if the receiver is an instance of
 *  <aClassObj> and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,AttributeDef,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
/*
 *  Returns 1 (true) if the indicated method can be invoked
 *  on the receiver and 0 (false) otherwise.
 */
   return SOM_ResolveD(this,AttributeDef,SOMObject,somRespondsTo)
	(this,mId);
}


/* va_list method: somDispatch */

/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
/* the va_list invocation form */
boolean   AttributeDef_somDispatch(somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,AttributeDef,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  This method provides a generic, class-specific dispatch mechanism.
 *  It accepts as input <retValue> a pointer to the memory area to be
 *  loaded with the result of dispatching the method indicated by
 *  <methodId> using the arguments in <ap>. <ap> contains the object
 *  on which the method is to be invoked as the first argument.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AttributeDef,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somClassDispatch */

/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
/* the va_list invocation form */
boolean   AttributeDef_somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		va_list ap)
{return SOM_ResolveD(this,AttributeDef,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj, 
		somToken* retValue, 
		somId methodId, 
		...)
{
/*
 *  Like somDispatch, but method resolution for static methods is done
 *  according to the clsObj instance method table.
 */
   va_list ap;
   va_start(ap, methodId);
   boolean __somResult = 
      SOM_ResolveD(this,AttributeDef,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return __somResult;
}


/* method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
/*
 *  cast the receiving object to cls (which must be an ancestor of the
 *  objects true class. Returns true on success.
 */
   return SOM_ResolveD(this,AttributeDef,SOMObject,somCastObj)
	(this,cls);
}


/* method: somResetObj */
boolean   somResetObj()
{
/*
 *  reset an object to its true class. Returns true always.
 */
   return SOM_ResolveD(this,AttributeDef,SOMObject,somResetObj)
	(this);
}


/* va_list method: somDispatchV */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void   AttributeDef_somDispatchV(somId methodId, 
		somId descriptor, 
		va_list ap)
{   SOM_ResolveD(this,AttributeDef,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,AttributeDef,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* va_list method: somDispatchL */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
long   AttributeDef_somDispatchL(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,AttributeDef,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   long __somResult = 
      SOM_ResolveD(this,AttributeDef,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchA */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
void*   AttributeDef_somDispatchA(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,AttributeDef,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   void* __somResult = 
      SOM_ResolveD(this,AttributeDef,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* va_list method: somDispatchD */

/*
 *  Obsolete. Use somDispatch instead.
 */
/* the va_list invocation form */
double   AttributeDef_somDispatchD(somId methodId, 
		somId descriptor, 
		va_list ap)
{return SOM_ResolveD(this,AttributeDef,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId, 
		somId descriptor, 
		...)
{
/*
 *  Obsolete. Use somDispatch instead.
 */
   va_list ap;
   va_start(ap, descriptor);
   double __somResult = 
      SOM_ResolveD(this,AttributeDef,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return __somResult;
}


/* method: somPrintSelf */
SOMObject*   somPrintSelf()
{
/*
 *  Uses <SOMOutCharRoutine> to write a brief string with identifying
 *  information about this object.  The default implementation just gives
 *  the object's class name and its address in memory.
 *  <self> is returned.
 */
   return SOM_ResolveD(this,AttributeDef,SOMObject,somPrintSelf)
	(this);
}



};   /* AttributeDef */



#endif       /* SOM_AttributeDef_xh */

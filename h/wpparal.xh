
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpparal.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPPARALLEL
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPDevParallel_xh
#define SOM_WPDevParallel_xh

class WPDevParallel;

#define WPDevParallel_MajorVersion 1
#define WPDevParallel_MinorVersion 2

/*
 * Passthru lines: File: "C.h", "before"
 */



/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef WPDevParallel_API
#define WPDevParallel_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPTransient;
class M_WPDevice;
class M_WPDevParallel;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPDevParallel Class */
class M_WPDevParallel;
SOMEXTERN M_WPDevParallel * SOMLINK WPDevParallelNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPDevParallel class object, and the methods it introduces. */
SOMEXTERN struct WPDevParallelClassDataStructure {
	M_WPDevParallel *classObject;
} SOMDLINK WPDevParallelClassData;
#define _WPDevParallel WPDevParallelClassData.classObject

/* The API to parentMtabs for WPDevParallel, and the instance data it introduces. */
SOMEXTERN struct WPDevParallelCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPDevParallelCClassData;

/*
 * -- Typedefs for WPDevParallel Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPDevParallel*   SOMLINK somTP_WPDevParallel_somGetClass(WPDevParallel *somSelf);
typedef somTP_WPDevParallel_somGetClass *somTD_WPDevParallel_somGetClass;
}

#endif /* WPDevParallel_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPDevParallel
 */
class WPDevParallel : public WPDevice
{
public:

// WPDevParallel::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPDevParallel) WPDevParallelNewClass(WPDevParallel_MajorVersion,WPDevParallel_MinorVersion);
   return (void*)
      SOM_Resolve(_WPDevParallel,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPDevParallel));
}

// WPDevParallel::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPDevParallel& operator=(WPDevParallel& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPDevParallel()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevParallelCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPDevParallel(WPDevParallel* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevParallelCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPDevParallel(const WPDevParallel* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevParallelCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPDevParallel*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPDevParallel,SOMObject,somGetClass)
	(this);
}



};   /* WPDevParallel */



#endif       /* SOM_WPDevParallel_xh */

#ifndef SOM_M_WPDevParallel_xh
#define SOM_M_WPDevParallel_xh

class M_WPDevParallel;

/*
 *  New class methods section
 */

#define M_WPDevParallel_MajorVersion 1
#define M_WPDevParallel_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef M_WPDevParallel_API
#define M_WPDevParallel_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPDevParallel is a metaclass for WPDevParallel. Make sure WPDevParallel is known.
 */
class WPDevParallel;


/* A procedure to create the M_WPDevParallel Class */
SOMEXTERN SOMClass * SOMLINK M_WPDevParallelNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPDevParallel class object, and the methods it introduces. */
SOMEXTERN struct M_WPDevParallelClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPDevParallelClassData;
#define _M_WPDevParallel M_WPDevParallelClassData.classObject

/* The API to parentMtabs for M_WPDevParallel, and the instance data it introduces. */
SOMEXTERN struct M_WPDevParallelCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPDevParallelCClassData;

/*
 * -- Typedefs for M_WPDevParallel Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPDevParallel*   SOMLINK somTP_M_WPDevParallel_somNew(M_WPDevParallel *somSelf);
typedef somTP_M_WPDevParallel_somNew *somTD_M_WPDevParallel_somNew;
}

#endif /* M_WPDevParallel_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPDevParallel
 */
class M_WPDevParallel : public M_WPDevice
{
/*
 *  New class methods section
 */
public:

// M_WPDevParallel::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPDevParallel) M_WPDevParallelNewClass(M_WPDevParallel_MajorVersion,M_WPDevParallel_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPDevParallel,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPDevParallel));
}

// M_WPDevParallel::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPDevParallel& operator=(M_WPDevParallel& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPDevParallel()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevParallelCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPDevParallel(M_WPDevParallel* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevParallelCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPDevParallel(const M_WPDevParallel* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevParallelCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPDevParallel*  somNew()
{
   return SOM_ResolveD(this,M_WPDevParallel,SOMClass,somNew)
	(this);
}



};   /* M_WPDevParallel */



#endif       /* SOM_M_WPDevParallel_xh */

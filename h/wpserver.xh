
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpserver.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPSERVER
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPServer_xh
#define SOM_WPServer_xh

class WPServer;

#define WPServer_MajorVersion 1
#define WPServer_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef WPServer_API
#define WPServer_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPFolder;
class M_WPServer;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPServer Class */
class M_WPServer;
SOMEXTERN M_WPServer * SOMLINK WPServerNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPServer class object, and the methods it introduces. */
SOMEXTERN struct WPServerClassDataStructure {
	M_WPServer *classObject;
	somMToken wpAddServerPage;
	somMToken wpQuerySrvrIdentity;
} SOMDLINK WPServerClassData;
#define _WPServer WPServerClassData.classObject

/* The API to parentMtabs for WPServer, and the instance data it introduces. */
SOMEXTERN struct WPServerCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPServerCClassData;

/*
 * -- Typedefs for WPServer Method Procedures
 */
SOMEXTERN {
typedef ULONG   SOMLINK somTP_WPServer_wpAddServerPage(WPServer *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPServer_wpAddServerPage *somTD_WPServer_wpAddServerPage;
typedef PSZ   SOMLINK somTP_WPServer_wpQuerySrvrIdentity(WPServer *somSelf);
typedef somTP_WPServer_wpQuerySrvrIdentity *somTD_WPServer_wpQuerySrvrIdentity;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPServer*   SOMLINK somTP_WPServer_somGetClass(WPServer *somSelf);
typedef somTP_WPServer_somGetClass *somTD_WPServer_somGetClass;
}

#endif /* WPServer_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPServer
 */
class WPServer : public WPFolder
{
public:

// WPServer::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPServer) WPServerNewClass(WPServer_MajorVersion,WPServer_MinorVersion);
   return (void*)
      SOM_Resolve(_WPServer,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPServer));
}

// WPServer::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPServer& operator=(WPServer& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPServer()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPServerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPServer(WPServer* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPServerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPServer(const WPServer* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPServerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: wpAddServerPage */
ULONG   wpAddServerPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPServer,WPServer,wpAddServerPage)
	(this,hwndNotebook);
}


/* method: wpQuerySrvrIdentity */
PSZ   wpQuerySrvrIdentity()
{
   return SOM_ResolveD(this,WPServer,WPServer,wpQuerySrvrIdentity)
	(this);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPServer*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPServer,SOMObject,somGetClass)
	(this);
}



};   /* WPServer */



#endif       /* SOM_WPServer_xh */

#ifndef SOM_M_WPServer_xh
#define SOM_M_WPServer_xh

class M_WPServer;

#define M_WPServer_MajorVersion 1
#define M_WPServer_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef M_WPServer_API
#define M_WPServer_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPServer is a metaclass for WPServer. Make sure WPServer is known.
 */
class WPServer;


/* A procedure to create the M_WPServer Class */
SOMEXTERN SOMClass * SOMLINK M_WPServerNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPServer class object, and the methods it introduces. */
SOMEXTERN struct M_WPServerClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPServerClassData;
#define _M_WPServer M_WPServerClassData.classObject

/* The API to parentMtabs for M_WPServer, and the instance data it introduces. */
SOMEXTERN struct M_WPServerCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPServerCClassData;

/*
 * -- Typedefs for M_WPServer Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPServer*   SOMLINK somTP_M_WPServer_somNew(M_WPServer *somSelf);
typedef somTP_M_WPServer_somNew *somTD_M_WPServer_somNew;
}

#endif /* M_WPServer_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPServer
 */
class M_WPServer : public M_WPFolder
{
public:

// M_WPServer::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPServer) M_WPServerNewClass(M_WPServer_MajorVersion,M_WPServer_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPServer,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPServer));
}

// M_WPServer::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPServer& operator=(M_WPServer& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPServer()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPServerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPServer(M_WPServer* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPServerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPServer(const M_WPServer* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPServerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPServer*  somNew()
{
   return SOM_ResolveD(this,M_WPServer,SOMClass,somNew)
	(this);
}



};   /* M_WPServer */



#endif       /* SOM_M_WPServer_xh */

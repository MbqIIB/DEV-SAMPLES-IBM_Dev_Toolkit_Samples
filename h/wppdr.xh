
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wppdr.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPPDR
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPPdr_xh
#define SOM_WPPdr_xh

class WPPdr;

#define WPPdr_MajorVersion 1
#define WPPdr_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPTransient_xh
#include <wptrans.xh>
#endif

#ifndef WPPdr_API
#define WPPdr_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPTransient;
class M_WPPdr;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPPdr Class */
class M_WPPdr;
SOMEXTERN M_WPPdr * SOMLINK WPPdrNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPPdr class object, and the methods it introduces. */
SOMEXTERN struct WPPdrClassDataStructure {
	M_WPPdr *classObject;
	somMToken prtGetPDriverInfo;
	somMToken prtSetPDriverInfo;
	somMToken prtGetPDriverName;
	somMToken prtGetPDeviceName;
	somMToken prtSetPdrIcon;
	somMToken prtSetPDriverDiscardhwndDlg;
	somMToken prtSetPDriverInstallhwndDlg;
	somMToken prtGetDriverFilename;
	somMToken prtSetPdrState;
	somMToken prtGetPdrState;
} SOMDLINK WPPdrClassData;
#define _WPPdr WPPdrClassData.classObject

/* The API to parentMtabs for WPPdr, and the instance data it introduces. */
SOMEXTERN struct WPPdrCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPPdrCClassData;

/*
 * -- Typedefs for WPPdr Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPPdr*   SOMLINK somTP_WPPdr_somGetClass(WPPdr *somSelf);
typedef somTP_WPPdr_somGetClass *somTD_WPPdr_somGetClass;
}

#endif /* WPPdr_API */


/*
 * -- This emitter normally treats Method Tokens as Thunks,
 * -- but the sc modifier "nothunks" was used, so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for WPPdr
 */
class WPPdr : public WPTransient
{
public:

// WPPdr::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPPdr) WPPdrNewClass(WPPdr_MajorVersion,WPPdr_MinorVersion);
   return (void*)
      SOM_Resolve(_WPPdr,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPPdr));
}

// WPPdr::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPPdr& operator=(WPPdr& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPPdr()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPPdrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPPdr(WPPdr* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPPdrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPPdr(const WPPdr* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPPdrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPPdr*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPPdr,SOMObject,somGetClass)
	(this);
}



};   /* WPPdr */



#endif       /* SOM_WPPdr_xh */

#ifndef SOM_M_WPPdr_xh
#define SOM_M_WPPdr_xh

class M_WPPdr;

#define M_WPPdr_MajorVersion 1
#define M_WPPdr_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPTransient_xh
#include <wptrans.xh>
#endif

#ifndef M_WPPdr_API
#define M_WPPdr_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPPdr is a metaclass for WPPdr. Make sure WPPdr is known.
 */
class WPPdr;


/* A procedure to create the M_WPPdr Class */
SOMEXTERN SOMClass * SOMLINK M_WPPdrNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPPdr class object, and the methods it introduces. */
SOMEXTERN struct M_WPPdrClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPPdrClassData;
#define _M_WPPdr M_WPPdrClassData.classObject

/* The API to parentMtabs for M_WPPdr, and the instance data it introduces. */
SOMEXTERN struct M_WPPdrCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPPdrCClassData;

/*
 * -- Typedefs for M_WPPdr Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPPdr*   SOMLINK somTP_M_WPPdr_somNew(M_WPPdr *somSelf);
typedef somTP_M_WPPdr_somNew *somTD_M_WPPdr_somNew;
}

#endif /* M_WPPdr_API */


/*
 * -- This emitter normally treats Method Tokens as Thunks,
 * -- but the sc modifier "nothunks" was used, so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for M_WPPdr
 */
class M_WPPdr : public M_WPTransient
{
public:

// M_WPPdr::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPPdr) M_WPPdrNewClass(M_WPPdr_MajorVersion,M_WPPdr_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPPdr,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPPdr));
}

// M_WPPdr::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPPdr& operator=(M_WPPdr& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPPdr()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPPdrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPPdr(M_WPPdr* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPPdrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPPdr(const M_WPPdr* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPPdrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPPdr*  somNew()
{
   return SOM_ResolveD(this,M_WPPdr,SOMClass,somNew)
	(this);
}



};   /* M_WPPdr */



#endif       /* SOM_M_WPPdr_xh */

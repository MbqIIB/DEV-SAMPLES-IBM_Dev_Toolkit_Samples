
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpcmdf.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPCMDF
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPCommandFile_xh
#define SOM_WPCommandFile_xh

class WPCommandFile;

#define WPCommandFile_MajorVersion 1
#define WPCommandFile_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPProgramFile_xh
#include <wppgmf.xh>
#endif

#ifndef WPCommandFile_API
#define WPCommandFile_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPDataFile;
class M_WPProgramFile;
class M_WPCommandFile;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPCommandFile Class */
class M_WPCommandFile;
SOMEXTERN M_WPCommandFile * SOMLINK WPCommandFileNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPCommandFile class object, and the methods it introduces. */
SOMEXTERN struct WPCommandFileClassDataStructure {
	M_WPCommandFile *classObject;
} SOMDLINK WPCommandFileClassData;
#define _WPCommandFile WPCommandFileClassData.classObject

/* The API to parentMtabs for WPCommandFile, and the instance data it introduces. */
SOMEXTERN struct WPCommandFileCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPCommandFileCClassData;

/*
 * -- Typedefs for WPCommandFile Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPCommandFile*   SOMLINK somTP_WPCommandFile_somGetClass(WPCommandFile *somSelf);
typedef somTP_WPCommandFile_somGetClass *somTD_WPCommandFile_somGetClass;
}

#endif /* WPCommandFile_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPCommandFile
 */
class WPCommandFile : public WPProgramFile
{
public:

// WPCommandFile::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPCommandFile) WPCommandFileNewClass(WPCommandFile_MajorVersion,WPCommandFile_MinorVersion);
   return (void*)
      SOM_Resolve(_WPCommandFile,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPCommandFile));
}

// WPCommandFile::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPCommandFile& operator=(WPCommandFile& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPCommandFile()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPCommandFileCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPCommandFile(WPCommandFile* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPCommandFileCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPCommandFile(const WPCommandFile* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPCommandFileCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPCommandFile*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPCommandFile,SOMObject,somGetClass)
	(this);
}



};   /* WPCommandFile */



#endif       /* SOM_WPCommandFile_xh */

#ifndef SOM_M_WPCommandFile_xh
#define SOM_M_WPCommandFile_xh

class M_WPCommandFile;

#define M_WPCommandFile_MajorVersion 1
#define M_WPCommandFile_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPProgramFile_xh
#include <wppgmf.xh>
#endif

#ifndef M_WPCommandFile_API
#define M_WPCommandFile_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPCommandFile is a metaclass for WPCommandFile. Make sure WPCommandFile is known.
 */
class WPCommandFile;


/* A procedure to create the M_WPCommandFile Class */
SOMEXTERN SOMClass * SOMLINK M_WPCommandFileNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPCommandFile class object, and the methods it introduces. */
SOMEXTERN struct M_WPCommandFileClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPCommandFileClassData;
#define _M_WPCommandFile M_WPCommandFileClassData.classObject

/* The API to parentMtabs for M_WPCommandFile, and the instance data it introduces. */
SOMEXTERN struct M_WPCommandFileCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPCommandFileCClassData;

/*
 * -- Typedefs for M_WPCommandFile Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPCommandFile*   SOMLINK somTP_M_WPCommandFile_somNew(M_WPCommandFile *somSelf);
typedef somTP_M_WPCommandFile_somNew *somTD_M_WPCommandFile_somNew;
}

#endif /* M_WPCommandFile_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPCommandFile
 */
class M_WPCommandFile : public M_WPProgramFile
{
public:

// M_WPCommandFile::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPCommandFile) M_WPCommandFileNewClass(M_WPCommandFile_MajorVersion,M_WPCommandFile_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPCommandFile,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPCommandFile));
}

// M_WPCommandFile::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPCommandFile& operator=(M_WPCommandFile& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPCommandFile()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPCommandFileCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPCommandFile(M_WPCommandFile* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPCommandFileCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPCommandFile(const M_WPCommandFile* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPCommandFileCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPCommandFile*  somNew()
{
   return SOM_ResolveD(this,M_WPCommandFile,SOMClass,somNew)
	(this);
}



};   /* M_WPCommandFile */



#endif       /* SOM_M_WPCommandFile_xh */

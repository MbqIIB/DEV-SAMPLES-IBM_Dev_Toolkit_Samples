
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpshadow.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPSHADOW
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPShadow_xh
#define SOM_WPShadow_xh

class WPShadow;

#define WPShadow_MajorVersion 1
#define WPShadow_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef WPShadow_API
#define WPShadow_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPAbstract;
class M_WPShadow;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPShadow Class */
class M_WPShadow;
SOMEXTERN M_WPShadow * SOMLINK WPShadowNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPShadow class object, and the methods it introduces. */
SOMEXTERN struct WPShadowClassDataStructure {
	M_WPShadow *classObject;
	somMToken wpSetLinkToObject;
	somMToken withdrawn;
	somMToken wpSetShadowTitle;
	somMToken wpQueryShadowedObject;
} SOMDLINK WPShadowClassData;
#define _WPShadow WPShadowClassData.classObject

/* The API to parentMtabs for WPShadow, and the instance data it introduces. */
SOMEXTERN struct WPShadowCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPShadowCClassData;

/*
 * -- Typedefs for WPShadow Method Procedures
 */
SOMEXTERN {
typedef WPObject*   SOMLINK somTP_WPShadow_wpQueryShadowedObject(WPShadow *somSelf, 
		BOOL fLock);
typedef somTP_WPShadow_wpQueryShadowedObject *somTD_WPShadow_wpQueryShadowedObject;
typedef BOOL   SOMLINK somTP_WPShadow_wpSetShadowTitle(WPShadow *somSelf, 
		PSZ pszNewTitle);
typedef somTP_WPShadow_wpSetShadowTitle *somTD_WPShadow_wpSetShadowTitle;
typedef BOOL   SOMLINK somTP_WPShadow_wpSetLinkToObject(WPShadow *somSelf, 
		WPObject* FromObject);
typedef somTP_WPShadow_wpSetLinkToObject *somTD_WPShadow_wpSetLinkToObject;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPShadow*   SOMLINK somTP_WPShadow_somGetClass(WPShadow *somSelf);
typedef somTP_WPShadow_somGetClass *somTD_WPShadow_somGetClass;
}

#endif /* WPShadow_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPShadow
 */
class WPShadow : public WPAbstract
{
public:

// WPShadow::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPShadow) WPShadowNewClass(WPShadow_MajorVersion,WPShadow_MinorVersion);
   return (void*)
      SOM_Resolve(_WPShadow,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPShadow));
}

// WPShadow::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPShadow& operator=(WPShadow& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPShadow()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPShadowCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPShadow(WPShadow* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPShadowCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPShadow(const WPShadow* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPShadowCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: wpQueryShadowedObject */
WPObject*   wpQueryShadowedObject(BOOL fLock)
{
   return SOM_ResolveD(this,WPShadow,WPShadow,wpQueryShadowedObject)
	(this,fLock);
}


/* method: wpSetShadowTitle */
BOOL   wpSetShadowTitle(PSZ pszNewTitle)
{
   return SOM_ResolveD(this,WPShadow,WPShadow,wpSetShadowTitle)
	(this,pszNewTitle);
}


/* method: wpSetLinkToObject */
BOOL   wpSetLinkToObject(WPObject* FromObject)
{
   return SOM_ResolveD(this,WPShadow,WPShadow,wpSetLinkToObject)
	(this,FromObject);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPShadow*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPShadow,SOMObject,somGetClass)
	(this);
}



};   /* WPShadow */



#endif       /* SOM_WPShadow_xh */

#ifndef SOM_M_WPShadow_xh
#define SOM_M_WPShadow_xh

class M_WPShadow;

#define M_WPShadow_MajorVersion 1
#define M_WPShadow_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef M_WPShadow_API
#define M_WPShadow_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPShadow is a metaclass for WPShadow. Make sure WPShadow is known.
 */
class WPShadow;


/* A procedure to create the M_WPShadow Class */
SOMEXTERN SOMClass * SOMLINK M_WPShadowNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPShadow class object, and the methods it introduces. */
SOMEXTERN struct M_WPShadowClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPShadowClassData;
#define _M_WPShadow M_WPShadowClassData.classObject

/* The API to parentMtabs for M_WPShadow, and the instance data it introduces. */
SOMEXTERN struct M_WPShadowCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPShadowCClassData;

/*
 * -- Typedefs for M_WPShadow Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPShadow*   SOMLINK somTP_M_WPShadow_somNew(M_WPShadow *somSelf);
typedef somTP_M_WPShadow_somNew *somTD_M_WPShadow_somNew;
}

#endif /* M_WPShadow_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPShadow
 */
class M_WPShadow : public M_WPAbstract
{
public:

// M_WPShadow::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPShadow) M_WPShadowNewClass(M_WPShadow_MajorVersion,M_WPShadow_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPShadow,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPShadow));
}

// M_WPShadow::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPShadow& operator=(M_WPShadow& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPShadow()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPShadowCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPShadow(M_WPShadow* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPShadowCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPShadow(const M_WPShadow* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPShadowCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPShadow*  somNew()
{
   return SOM_ResolveD(this,M_WPShadow,SOMClass,somNew)
	(this);
}



};   /* M_WPShadow */



#endif       /* SOM_M_WPShadow_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpaudio.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPAUDIO
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPDevAudio_xh
#define SOM_WPDevAudio_xh

class WPDevAudio;

#define WPDevAudio_MajorVersion 1
#define WPDevAudio_MinorVersion 2

/*
 * Passthru lines: File: "C.h", "before"
 */



/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef WPDevAudio_API
#define WPDevAudio_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPTransient;
class M_WPDevice;
class M_WPDevAudio;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPDevAudio Class */
class M_WPDevAudio;
SOMEXTERN M_WPDevAudio * SOMLINK WPDevAudioNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPDevAudio class object, and the methods it introduces. */
SOMEXTERN struct WPDevAudioClassDataStructure {
	M_WPDevAudio *classObject;
} SOMDLINK WPDevAudioClassData;
#define _WPDevAudio WPDevAudioClassData.classObject

/* The API to parentMtabs for WPDevAudio, and the instance data it introduces. */
SOMEXTERN struct WPDevAudioCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPDevAudioCClassData;

/*
 * -- Typedefs for WPDevAudio Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPDevAudio*   SOMLINK somTP_WPDevAudio_somGetClass(WPDevAudio *somSelf);
typedef somTP_WPDevAudio_somGetClass *somTD_WPDevAudio_somGetClass;
}

#endif /* WPDevAudio_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPDevAudio
 */
class WPDevAudio : public WPDevice
{
public:

// WPDevAudio::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPDevAudio) WPDevAudioNewClass(WPDevAudio_MajorVersion,WPDevAudio_MinorVersion);
   return (void*)
      SOM_Resolve(_WPDevAudio,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPDevAudio));
}

// WPDevAudio::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPDevAudio& operator=(WPDevAudio& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPDevAudio()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevAudioCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPDevAudio(WPDevAudio* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevAudioCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPDevAudio(const WPDevAudio* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevAudioCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPDevAudio*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPDevAudio,SOMObject,somGetClass)
	(this);
}



};   /* WPDevAudio */



#endif       /* SOM_WPDevAudio_xh */

#ifndef SOM_M_WPDevAudio_xh
#define SOM_M_WPDevAudio_xh

class M_WPDevAudio;

/*
 *  New class methods section
 */

#define M_WPDevAudio_MajorVersion 1
#define M_WPDevAudio_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef M_WPDevAudio_API
#define M_WPDevAudio_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPDevAudio is a metaclass for WPDevAudio. Make sure WPDevAudio is known.
 */
class WPDevAudio;


/* A procedure to create the M_WPDevAudio Class */
SOMEXTERN SOMClass * SOMLINK M_WPDevAudioNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPDevAudio class object, and the methods it introduces. */
SOMEXTERN struct M_WPDevAudioClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPDevAudioClassData;
#define _M_WPDevAudio M_WPDevAudioClassData.classObject

/* The API to parentMtabs for M_WPDevAudio, and the instance data it introduces. */
SOMEXTERN struct M_WPDevAudioCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPDevAudioCClassData;

/*
 * -- Typedefs for M_WPDevAudio Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPDevAudio*   SOMLINK somTP_M_WPDevAudio_somNew(M_WPDevAudio *somSelf);
typedef somTP_M_WPDevAudio_somNew *somTD_M_WPDevAudio_somNew;
}

#endif /* M_WPDevAudio_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPDevAudio
 */
class M_WPDevAudio : public M_WPDevice
{
/*
 *  New class methods section
 */
public:

// M_WPDevAudio::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPDevAudio) M_WPDevAudioNewClass(M_WPDevAudio_MajorVersion,M_WPDevAudio_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPDevAudio,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPDevAudio));
}

// M_WPDevAudio::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPDevAudio& operator=(M_WPDevAudio& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPDevAudio()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevAudioCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPDevAudio(M_WPDevAudio* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevAudioCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPDevAudio(const M_WPDevAudio* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevAudioCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPDevAudio*  somNew()
{
   return SOM_ResolveD(this,M_WPDevAudio,SOMClass,somNew)
	(this);
}



};   /* M_WPDevAudio */



#endif       /* SOM_M_WPDevAudio_xh */

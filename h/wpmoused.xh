
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpmoused.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPMOUSED
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPDevMouse_xh
#define SOM_WPDevMouse_xh

class WPDevMouse;

#define WPDevMouse_MajorVersion 1
#define WPDevMouse_MinorVersion 2

/*
 * Passthru lines: File: "C.h", "before"
 */



/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef WPDevMouse_API
#define WPDevMouse_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPTransient;
class M_WPDevice;
class M_WPDevMouse;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPDevMouse Class */
class M_WPDevMouse;
SOMEXTERN M_WPDevMouse * SOMLINK WPDevMouseNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPDevMouse class object, and the methods it introduces. */
SOMEXTERN struct WPDevMouseClassDataStructure {
	M_WPDevMouse *classObject;
} SOMDLINK WPDevMouseClassData;
#define _WPDevMouse WPDevMouseClassData.classObject

/* The API to parentMtabs for WPDevMouse, and the instance data it introduces. */
SOMEXTERN struct WPDevMouseCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPDevMouseCClassData;

/*
 * -- Typedefs for WPDevMouse Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPDevMouse*   SOMLINK somTP_WPDevMouse_somGetClass(WPDevMouse *somSelf);
typedef somTP_WPDevMouse_somGetClass *somTD_WPDevMouse_somGetClass;
}

#endif /* WPDevMouse_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPDevMouse
 */
class WPDevMouse : public WPDevice
{
public:

// WPDevMouse::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPDevMouse) WPDevMouseNewClass(WPDevMouse_MajorVersion,WPDevMouse_MinorVersion);
   return (void*)
      SOM_Resolve(_WPDevMouse,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPDevMouse));
}

// WPDevMouse::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPDevMouse& operator=(WPDevMouse& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPDevMouse()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevMouseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPDevMouse(WPDevMouse* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevMouseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPDevMouse(const WPDevMouse* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevMouseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPDevMouse*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPDevMouse,SOMObject,somGetClass)
	(this);
}



};   /* WPDevMouse */



#endif       /* SOM_WPDevMouse_xh */

#ifndef SOM_M_WPDevMouse_xh
#define SOM_M_WPDevMouse_xh

class M_WPDevMouse;

/*
 *  New class methods section
 */

#define M_WPDevMouse_MajorVersion 1
#define M_WPDevMouse_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef M_WPDevMouse_API
#define M_WPDevMouse_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPDevMouse is a metaclass for WPDevMouse. Make sure WPDevMouse is known.
 */
class WPDevMouse;


/* A procedure to create the M_WPDevMouse Class */
SOMEXTERN SOMClass * SOMLINK M_WPDevMouseNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPDevMouse class object, and the methods it introduces. */
SOMEXTERN struct M_WPDevMouseClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPDevMouseClassData;
#define _M_WPDevMouse M_WPDevMouseClassData.classObject

/* The API to parentMtabs for M_WPDevMouse, and the instance data it introduces. */
SOMEXTERN struct M_WPDevMouseCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPDevMouseCClassData;

/*
 * -- Typedefs for M_WPDevMouse Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPDevMouse*   SOMLINK somTP_M_WPDevMouse_somNew(M_WPDevMouse *somSelf);
typedef somTP_M_WPDevMouse_somNew *somTD_M_WPDevMouse_somNew;
}

#endif /* M_WPDevMouse_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPDevMouse
 */
class M_WPDevMouse : public M_WPDevice
{
/*
 *  New class methods section
 */
public:

// M_WPDevMouse::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPDevMouse) M_WPDevMouseNewClass(M_WPDevMouse_MajorVersion,M_WPDevMouse_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPDevMouse,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPDevMouse));
}

// M_WPDevMouse::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPDevMouse& operator=(M_WPDevMouse& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPDevMouse()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevMouseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPDevMouse(M_WPDevMouse* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevMouseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPDevMouse(const M_WPDevMouse* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevMouseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPDevMouse*  somNew()
{
   return SOM_ResolveD(this,M_WPDevMouse,SOMClass,somNew)
	(this);
}



};   /* M_WPDevMouse */



#endif       /* SOM_M_WPDevMouse_xh */

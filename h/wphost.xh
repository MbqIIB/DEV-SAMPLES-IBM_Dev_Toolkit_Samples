
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wphost.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *    Module Name: WPHOST
 * 
 *    OS/2 Work Place Shell - Remote FTP Host object
 * 
 *    Copyright (C) 1996 IBM Corporation
 * 
 */


#ifndef SOM_WPHost_xh
#define SOM_WPHost_xh

class WPHost;

#define WPHost_MajorVersion 1
#define WPHost_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef WPHost_API
#define WPHost_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPFolder;
class M_WPTransient;
class M_WPFtpObj;
class M_WPHost;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPHost Class */
class M_WPHost;
SOMEXTERN M_WPHost * SOMLINK WPHostNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPHost class object, and the methods it introduces. */
SOMEXTERN struct WPHostClassDataStructure {
	M_WPHost *classObject;
	somMToken WPHostPrivate1;
	somMToken WPHostPrivate2;
	somMToken WPHostPrivate3;
	somMToken WPHostPrivate4;
	somMToken WPHostPrivate5;
	somMToken WPHostPrivate6;
	somMToken WPHostPrivate7;
	somMToken WPHostPrivate8;
	somMToken WPHostPrivate9;
	somMToken WPHostPrivate10;
	somMToken WPHostPrivate11;
	somMToken WPHostPrivate12;
	somMToken WPHostPrivate13;
	somMToken WPHostPrivate14;
	somMToken WPHostPrivate15;
	somMToken WPHostPrivate16;
	somMToken WPHostPrivate17;
	somMToken WPHostPrivate18;
	somMToken WPHostPrivate19;
	somMToken WPHostPrivate20;
	somMToken WPHostPrivate21;
	somMToken WPHostPrivate22;
	somMToken WPHostPrivate23;
	somMToken WPHostPrivate24;
	somMToken WPHostPrivate25;
	somMToken WPHostPrivate26;
	somMToken WPHostPrivate27;
	somMToken WPHostPrivate28;
	somMToken WPHostPrivate29;
	somMToken WPHostPrivate30;
	somMToken WPHostPrivate31;
	somMToken WPHostPrivate32;
	somMToken WPHostPrivate33;
	somMToken WPHostPrivate34;
	somMToken WPHostPrivate35;
	somMToken WPHostPrivate36;
	somMToken WPHostPrivate37;
	somMToken WPHostPrivate38;
	somMToken WPHostPrivate39;
} SOMDLINK WPHostClassData;
#define _WPHost WPHostClassData.classObject

/* The API to parentMtabs for WPHost, and the instance data it introduces. */
SOMEXTERN struct WPHostCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPHostCClassData;

/*
 * -- Typedefs for WPHost Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPHost*   SOMLINK somTP_WPHost_somGetClass(WPHost *somSelf);
typedef somTP_WPHost_somGetClass *somTD_WPHost_somGetClass;
}

#endif /* WPHost_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPHost
 */
class WPHost : public WPFolder
{
public:

// WPHost::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPHost) WPHostNewClass(WPHost_MajorVersion,WPHost_MinorVersion);
   return (void*)
      SOM_Resolve(_WPHost,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPHost));
}

// WPHost::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPHost& operator=(WPHost& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPHost()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPHostCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPHost(WPHost* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPHostCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPHost(const WPHost* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPHostCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPHost*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPHost,SOMObject,somGetClass)
	(this);
}



};   /* WPHost */



#endif       /* SOM_WPHost_xh */

#ifndef SOM_M_WPHost_xh
#define SOM_M_WPHost_xh

class M_WPHost;

#define M_WPHost_MajorVersion 1
#define M_WPHost_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef M_WPHost_API
#define M_WPHost_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPHost is a metaclass for WPHost. Make sure WPHost is known.
 */
class WPHost;


/* A procedure to create the M_WPHost Class */
SOMEXTERN SOMClass * SOMLINK M_WPHostNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPHost class object, and the methods it introduces. */
SOMEXTERN struct M_WPHostClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPHostClassData;
#define _M_WPHost M_WPHostClassData.classObject

/* The API to parentMtabs for M_WPHost, and the instance data it introduces. */
SOMEXTERN struct M_WPHostCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPHostCClassData;

/*
 * -- Typedefs for M_WPHost Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPHost*   SOMLINK somTP_M_WPHost_somNew(M_WPHost *somSelf);
typedef somTP_M_WPHost_somNew *somTD_M_WPHost_somNew;
}

#endif /* M_WPHost_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPHost
 */
class M_WPHost : public M_WPFolder
{
public:

// M_WPHost::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPHost) M_WPHostNewClass(M_WPHost_MajorVersion,M_WPHost_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPHost,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPHost));
}

// M_WPHost::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPHost& operator=(M_WPHost& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPHost()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPHostCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPHost(M_WPHost* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPHostCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPHost(const M_WPHost* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPHostCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPHost*  somNew()
{
   return SOM_ResolveD(this,M_WPHost,SOMClass,somNew)
	(this);
}



};   /* M_WPHost */



#endif       /* SOM_M_WPHost_xh */

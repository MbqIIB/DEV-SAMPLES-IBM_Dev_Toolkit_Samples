
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpqdr.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPQDR
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPQdr_xh
#define SOM_WPQdr_xh

class WPQdr;

#define WPQdr_MajorVersion 1
#define WPQdr_MinorVersion 1

/*
 * Passthru lines: File: "C.h", "before"
 */

/* common context menu ids    */
#define WPPOIDM_QDR_INSTALL         8001


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPTransient_xh
#include <wptrans.xh>
#endif

#ifndef WPQdr_API
#define WPQdr_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPTransient;
class M_WPQdr;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPQdr Class */
class M_WPQdr;
SOMEXTERN M_WPQdr * SOMLINK WPQdrNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPQdr class object, and the methods it introduces. */
SOMEXTERN struct WPQdrClassDataStructure {
	M_WPQdr *classObject;
	somMToken prtGetQDriverInfo;
	somMToken prtSetQDriverInfo;
	somMToken prtSetQdrIcon;
	somMToken prtSetQDriverDiscardhwndDlg;
	somMToken prtSetQDriverInstallhwndDlg;
} SOMDLINK WPQdrClassData;
#define _WPQdr WPQdrClassData.classObject

/* The API to parentMtabs for WPQdr, and the instance data it introduces. */
SOMEXTERN struct WPQdrCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPQdrCClassData;

/*
 * -- Typedefs for WPQdr Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPQdr*   SOMLINK somTP_WPQdr_somGetClass(WPQdr *somSelf);
typedef somTP_WPQdr_somGetClass *somTD_WPQdr_somGetClass;
}

#endif /* WPQdr_API */


/*
 * -- This emitter normally treats Method Tokens as Thunks,
 * -- but the sc modifier "nothunks" was used, so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for WPQdr
 */
class WPQdr : public WPTransient
{
public:

// WPQdr::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPQdr) WPQdrNewClass(WPQdr_MajorVersion,WPQdr_MinorVersion);
   return (void*)
      SOM_Resolve(_WPQdr,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPQdr));
}

// WPQdr::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPQdr& operator=(WPQdr& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPQdr()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPQdrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPQdr(WPQdr* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPQdrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPQdr(const WPQdr* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPQdrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPQdr*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPQdr,SOMObject,somGetClass)
	(this);
}



};   /* WPQdr */



#endif       /* SOM_WPQdr_xh */

#ifndef SOM_M_WPQdr_xh
#define SOM_M_WPQdr_xh

class M_WPQdr;

#define M_WPQdr_MajorVersion 1
#define M_WPQdr_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPTransient_xh
#include <wptrans.xh>
#endif

#ifndef M_WPQdr_API
#define M_WPQdr_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPQdr is a metaclass for WPQdr. Make sure WPQdr is known.
 */
class WPQdr;


/* A procedure to create the M_WPQdr Class */
SOMEXTERN SOMClass * SOMLINK M_WPQdrNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPQdr class object, and the methods it introduces. */
SOMEXTERN struct M_WPQdrClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPQdrClassData;
#define _M_WPQdr M_WPQdrClassData.classObject

/* The API to parentMtabs for M_WPQdr, and the instance data it introduces. */
SOMEXTERN struct M_WPQdrCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPQdrCClassData;

/*
 * -- Typedefs for M_WPQdr Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPQdr*   SOMLINK somTP_M_WPQdr_somNew(M_WPQdr *somSelf);
typedef somTP_M_WPQdr_somNew *somTD_M_WPQdr_somNew;
}

#endif /* M_WPQdr_API */


/*
 * -- This emitter normally treats Method Tokens as Thunks,
 * -- but the sc modifier "nothunks" was used, so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for M_WPQdr
 */
class M_WPQdr : public M_WPTransient
{
public:

// M_WPQdr::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPQdr) M_WPQdrNewClass(M_WPQdr_MajorVersion,M_WPQdr_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPQdr,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPQdr));
}

// M_WPQdr::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPQdr& operator=(M_WPQdr& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPQdr()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPQdrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPQdr(M_WPQdr* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPQdrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPQdr(const M_WPQdr* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPQdrCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPQdr*  somNew()
{
   return SOM_ResolveD(this,M_WPQdr,SOMClass,somNew)
	(this);
}



};   /* M_WPQdr */



#endif       /* SOM_M_WPQdr_xh */

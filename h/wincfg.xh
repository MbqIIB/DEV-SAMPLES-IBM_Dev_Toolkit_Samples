
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wincfg.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPWinConfig
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPWinConfig_xh
#define SOM_WPWinConfig_xh

class WPWinConfig;

#define WPWinConfig_MajorVersion 1
#define WPWinConfig_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef WPWinConfig_API
#define WPWinConfig_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPAbstract;
class M_WPWinConfig;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPWinConfig Class */
class M_WPWinConfig;
SOMEXTERN M_WPWinConfig * SOMLINK WPWinConfigNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPWinConfig class object, and the methods it introduces. */
SOMEXTERN struct WPWinConfigClassDataStructure {
	M_WPWinConfig *classObject;
	somMToken wpAddDDEPage;
	somMToken wpAddSessionPage;
	somMToken wpAddSession31Page;
} SOMDLINK WPWinConfigClassData;
#define _WPWinConfig WPWinConfigClassData.classObject

/* The API to parentMtabs for WPWinConfig, and the instance data it introduces. */
SOMEXTERN struct WPWinConfigCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPWinConfigCClassData;

/*
 * -- Typedefs for WPWinConfig Method Procedures
 */
SOMEXTERN {
typedef ULONG   SOMLINK somTP_WPWinConfig_wpAddDDEPage(WPWinConfig *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPWinConfig_wpAddDDEPage *somTD_WPWinConfig_wpAddDDEPage;
typedef ULONG   SOMLINK somTP_WPWinConfig_wpAddSessionPage(WPWinConfig *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPWinConfig_wpAddSessionPage *somTD_WPWinConfig_wpAddSessionPage;
typedef ULONG   SOMLINK somTP_WPWinConfig_wpAddSession31Page(WPWinConfig *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPWinConfig_wpAddSession31Page *somTD_WPWinConfig_wpAddSession31Page;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPWinConfig*   SOMLINK somTP_WPWinConfig_somGetClass(WPWinConfig *somSelf);
typedef somTP_WPWinConfig_somGetClass *somTD_WPWinConfig_somGetClass;
}

#endif /* WPWinConfig_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPWinConfig
 */
class WPWinConfig : public WPAbstract
{
public:

// WPWinConfig::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPWinConfig) WPWinConfigNewClass(WPWinConfig_MajorVersion,WPWinConfig_MinorVersion);
   return (void*)
      SOM_Resolve(_WPWinConfig,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPWinConfig));
}

// WPWinConfig::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPWinConfig& operator=(WPWinConfig& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPWinConfig()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPWinConfigCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPWinConfig(WPWinConfig* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPWinConfigCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPWinConfig(const WPWinConfig* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPWinConfigCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: wpAddDDEPage */
ULONG   wpAddDDEPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPWinConfig,WPWinConfig,wpAddDDEPage)
	(this,hwndNotebook);
}


/* method: wpAddSessionPage */
ULONG   wpAddSessionPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPWinConfig,WPWinConfig,wpAddSessionPage)
	(this,hwndNotebook);
}


/* method: wpAddSession31Page */
ULONG   wpAddSession31Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPWinConfig,WPWinConfig,wpAddSession31Page)
	(this,hwndNotebook);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPWinConfig*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPWinConfig,SOMObject,somGetClass)
	(this);
}



};   /* WPWinConfig */



#endif       /* SOM_WPWinConfig_xh */

#ifndef SOM_M_WPWinConfig_xh
#define SOM_M_WPWinConfig_xh

class M_WPWinConfig;

#define M_WPWinConfig_MajorVersion 1
#define M_WPWinConfig_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef M_WPWinConfig_API
#define M_WPWinConfig_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPWinConfig is a metaclass for WPWinConfig. Make sure WPWinConfig is known.
 */
class WPWinConfig;


/* A procedure to create the M_WPWinConfig Class */
SOMEXTERN SOMClass * SOMLINK M_WPWinConfigNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPWinConfig class object, and the methods it introduces. */
SOMEXTERN struct M_WPWinConfigClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPWinConfigClassData;
#define _M_WPWinConfig M_WPWinConfigClassData.classObject

/* The API to parentMtabs for M_WPWinConfig, and the instance data it introduces. */
SOMEXTERN struct M_WPWinConfigCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPWinConfigCClassData;

/*
 * -- Typedefs for M_WPWinConfig Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPWinConfig*   SOMLINK somTP_M_WPWinConfig_somNew(M_WPWinConfig *somSelf);
typedef somTP_M_WPWinConfig_somNew *somTD_M_WPWinConfig_somNew;
}

#endif /* M_WPWinConfig_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPWinConfig
 */
class M_WPWinConfig : public M_WPAbstract
{
public:

// M_WPWinConfig::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPWinConfig) M_WPWinConfigNewClass(M_WPWinConfig_MajorVersion,M_WPWinConfig_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPWinConfig,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPWinConfig));
}

// M_WPWinConfig::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPWinConfig& operator=(M_WPWinConfig& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPWinConfig()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPWinConfigCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPWinConfig(M_WPWinConfig* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPWinConfigCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPWinConfig(const M_WPWinConfig* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPWinConfigCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPWinConfig*  somNew()
{
   return SOM_ResolveD(this,M_WPWinConfig,SOMClass,somNew)
	(this);
}



};   /* M_WPWinConfig */



#endif       /* SOM_M_WPWinConfig_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpurlfdr.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *    Module Name: WPURLFDR
 * 
 *    OS/2 Work Place Shell - Folder for URL objects
 * 
 *    Copyright (C) 1996 IBM Corporation
 * 
 */


#ifndef SOM_WPUrlFolder_xh
#define SOM_WPUrlFolder_xh

class WPUrlFolder;

#define WPUrlFolder_MajorVersion 1
#define WPUrlFolder_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef WPUrlFolder_API
#define WPUrlFolder_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPFolder;
class M_WPUrlFolder;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPUrlFolder Class */
class M_WPUrlFolder;
SOMEXTERN M_WPUrlFolder * SOMLINK WPUrlFolderNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPUrlFolder class object, and the methods it introduces. */
SOMEXTERN struct WPUrlFolderClassDataStructure {
	M_WPUrlFolder *classObject;
} SOMDLINK WPUrlFolderClassData;
#define _WPUrlFolder WPUrlFolderClassData.classObject

/* The API to parentMtabs for WPUrlFolder, and the instance data it introduces. */
SOMEXTERN struct WPUrlFolderCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPUrlFolderCClassData;

/*
 * -- Typedefs for WPUrlFolder Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPUrlFolder*   SOMLINK somTP_WPUrlFolder_somGetClass(WPUrlFolder *somSelf);
typedef somTP_WPUrlFolder_somGetClass *somTD_WPUrlFolder_somGetClass;
}

#endif /* WPUrlFolder_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPUrlFolder
 */
class WPUrlFolder : public WPFolder
{
public:

// WPUrlFolder::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPUrlFolder) WPUrlFolderNewClass(WPUrlFolder_MajorVersion,WPUrlFolder_MinorVersion);
   return (void*)
      SOM_Resolve(_WPUrlFolder,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPUrlFolder));
}

// WPUrlFolder::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPUrlFolder& operator=(WPUrlFolder& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPUrlFolder()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPUrlFolderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPUrlFolder(WPUrlFolder* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPUrlFolderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPUrlFolder(const WPUrlFolder* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPUrlFolderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPUrlFolder*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPUrlFolder,SOMObject,somGetClass)
	(this);
}



};   /* WPUrlFolder */



#endif       /* SOM_WPUrlFolder_xh */

#ifndef SOM_M_WPUrlFolder_xh
#define SOM_M_WPUrlFolder_xh

class M_WPUrlFolder;

#define M_WPUrlFolder_MajorVersion 1
#define M_WPUrlFolder_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef M_WPUrlFolder_API
#define M_WPUrlFolder_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPUrlFolder is a metaclass for WPUrlFolder. Make sure WPUrlFolder is known.
 */
class WPUrlFolder;


/* A procedure to create the M_WPUrlFolder Class */
SOMEXTERN SOMClass * SOMLINK M_WPUrlFolderNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPUrlFolder class object, and the methods it introduces. */
SOMEXTERN struct M_WPUrlFolderClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPUrlFolderClassData;
#define _M_WPUrlFolder M_WPUrlFolderClassData.classObject

/* The API to parentMtabs for M_WPUrlFolder, and the instance data it introduces. */
SOMEXTERN struct M_WPUrlFolderCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPUrlFolderCClassData;

/*
 * -- Typedefs for M_WPUrlFolder Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPUrlFolder*   SOMLINK somTP_M_WPUrlFolder_somNew(M_WPUrlFolder *somSelf);
typedef somTP_M_WPUrlFolder_somNew *somTD_M_WPUrlFolder_somNew;
}

#endif /* M_WPUrlFolder_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPUrlFolder
 */
class M_WPUrlFolder : public M_WPFolder
{
public:

// M_WPUrlFolder::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPUrlFolder) M_WPUrlFolderNewClass(M_WPUrlFolder_MajorVersion,M_WPUrlFolder_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPUrlFolder,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPUrlFolder));
}

// M_WPUrlFolder::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPUrlFolder& operator=(M_WPUrlFolder& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPUrlFolder()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPUrlFolderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPUrlFolder(M_WPUrlFolder* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPUrlFolderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPUrlFolder(const M_WPUrlFolder* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPUrlFolderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPUrlFolder*  somNew()
{
   return SOM_ResolveD(this,M_WPUrlFolder,SOMClass,somNew)
	(this);
}



};   /* M_WPUrlFolder */



#endif       /* SOM_M_WPUrlFolder_xh */

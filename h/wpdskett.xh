
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpdskett.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPDSKETT
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPDevDiskette_xh
#define SOM_WPDevDiskette_xh

class WPDevDiskette;

#define WPDevDiskette_MajorVersion 1
#define WPDevDiskette_MinorVersion 2

/*
 * Passthru lines: File: "C.h", "before"
 */



/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef WPDevDiskette_API
#define WPDevDiskette_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPTransient;
class M_WPDevice;
class M_WPDevDiskette;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPDevDiskette Class */
class M_WPDevDiskette;
SOMEXTERN M_WPDevDiskette * SOMLINK WPDevDisketteNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPDevDiskette class object, and the methods it introduces. */
SOMEXTERN struct WPDevDisketteClassDataStructure {
	M_WPDevDiskette *classObject;
} SOMDLINK WPDevDisketteClassData;
#define _WPDevDiskette WPDevDisketteClassData.classObject

/* The API to parentMtabs for WPDevDiskette, and the instance data it introduces. */
SOMEXTERN struct WPDevDisketteCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPDevDisketteCClassData;

/*
 * -- Typedefs for WPDevDiskette Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPDevDiskette*   SOMLINK somTP_WPDevDiskette_somGetClass(WPDevDiskette *somSelf);
typedef somTP_WPDevDiskette_somGetClass *somTD_WPDevDiskette_somGetClass;
}

#endif /* WPDevDiskette_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPDevDiskette
 */
class WPDevDiskette : public WPDevice
{
public:

// WPDevDiskette::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPDevDiskette) WPDevDisketteNewClass(WPDevDiskette_MajorVersion,WPDevDiskette_MinorVersion);
   return (void*)
      SOM_Resolve(_WPDevDiskette,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPDevDiskette));
}

// WPDevDiskette::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPDevDiskette& operator=(WPDevDiskette& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPDevDiskette()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevDisketteCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPDevDiskette(WPDevDiskette* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevDisketteCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPDevDiskette(const WPDevDiskette* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevDisketteCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPDevDiskette*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPDevDiskette,SOMObject,somGetClass)
	(this);
}



};   /* WPDevDiskette */



#endif       /* SOM_WPDevDiskette_xh */

#ifndef SOM_M_WPDevDiskette_xh
#define SOM_M_WPDevDiskette_xh

class M_WPDevDiskette;

/*
 *  New class methods section
 */

#define M_WPDevDiskette_MajorVersion 1
#define M_WPDevDiskette_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef M_WPDevDiskette_API
#define M_WPDevDiskette_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPDevDiskette is a metaclass for WPDevDiskette. Make sure WPDevDiskette is known.
 */
class WPDevDiskette;


/* A procedure to create the M_WPDevDiskette Class */
SOMEXTERN SOMClass * SOMLINK M_WPDevDisketteNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPDevDiskette class object, and the methods it introduces. */
SOMEXTERN struct M_WPDevDisketteClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPDevDisketteClassData;
#define _M_WPDevDiskette M_WPDevDisketteClassData.classObject

/* The API to parentMtabs for M_WPDevDiskette, and the instance data it introduces. */
SOMEXTERN struct M_WPDevDisketteCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPDevDisketteCClassData;

/*
 * -- Typedefs for M_WPDevDiskette Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPDevDiskette*   SOMLINK somTP_M_WPDevDiskette_somNew(M_WPDevDiskette *somSelf);
typedef somTP_M_WPDevDiskette_somNew *somTD_M_WPDevDiskette_somNew;
}

#endif /* M_WPDevDiskette_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPDevDiskette
 */
class M_WPDevDiskette : public M_WPDevice
{
/*
 *  New class methods section
 */
public:

// M_WPDevDiskette::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPDevDiskette) M_WPDevDisketteNewClass(M_WPDevDiskette_MajorVersion,M_WPDevDiskette_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPDevDiskette,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPDevDiskette));
}

// M_WPDevDiskette::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPDevDiskette& operator=(M_WPDevDiskette& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPDevDiskette()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevDisketteCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPDevDiskette(M_WPDevDiskette* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevDisketteCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPDevDiskette(const M_WPDevDiskette* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevDisketteCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPDevDiskette*  somNew()
{
   return SOM_ResolveD(this,M_WPDevDiskette,SOMClass,somNew)
	(this);
}



};   /* M_WPDevDiskette */



#endif       /* SOM_M_WPDevDiskette_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wphwmgr.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPHWMGR
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPHwManager_xh
#define SOM_WPHwManager_xh

class WPHwManager;

#define WPHwManager_MajorVersion 1
#define WPHwManager_MinorVersion 2

/*
 * Passthru lines: File: "C.h", "before"
 */

#define INCL_DOSMODULEMGR
#include <os2.h>         
#define SNOOP_WARPRISK  0
#define SNOOP_NORISK    1
#define SNOOP_LORISK    2
#define SNOOP_MEDRISK   3
#define SNOOP_HIRISK    4


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef WPHwManager_API
#define WPHwManager_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPFolder;
class M_WPHwManager;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPHwManager Class */
class M_WPHwManager;
SOMEXTERN M_WPHwManager * SOMLINK WPHwManagerNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPHwManager class object, and the methods it introduces. */
SOMEXTERN struct WPHwManagerClassDataStructure {
	M_WPHwManager *classObject;
	somMToken wpAddSnoop1Page;
	somMToken wpHwManagerPrivate1;
	somMToken wpHwManagerPrivate2;
	somMToken wpHwManagerPrivate3;
	somMToken wpHwManagerPrivate4;
} SOMDLINK WPHwManagerClassData;
#define _WPHwManager WPHwManagerClassData.classObject

/* The API to parentMtabs for WPHwManager, and the instance data it introduces. */
SOMEXTERN struct WPHwManagerCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPHwManagerCClassData;

/*
 * -- Typedefs for WPHwManager Method Procedures
 */
SOMEXTERN {
typedef ULONG   SOMLINK somTP_WPHwManager_wpAddSnoop1Page(WPHwManager *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPHwManager_wpAddSnoop1Page *somTD_WPHwManager_wpAddSnoop1Page;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPHwManager*   SOMLINK somTP_WPHwManager_somGetClass(WPHwManager *somSelf);
typedef somTP_WPHwManager_somGetClass *somTD_WPHwManager_somGetClass;
}

#endif /* WPHwManager_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPHwManager
 */
class WPHwManager : public WPFolder
{
public:

// WPHwManager::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPHwManager) WPHwManagerNewClass(WPHwManager_MajorVersion,WPHwManager_MinorVersion);
   return (void*)
      SOM_Resolve(_WPHwManager,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPHwManager));
}

// WPHwManager::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPHwManager& operator=(WPHwManager& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPHwManager()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPHwManagerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPHwManager(WPHwManager* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPHwManagerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPHwManager(const WPHwManager* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPHwManagerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: wpAddSnoop1Page */
ULONG   wpAddSnoop1Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPHwManager,WPHwManager,wpAddSnoop1Page)
	(this,hwndNotebook);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPHwManager*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPHwManager,SOMObject,somGetClass)
	(this);
}



};   /* WPHwManager */



#endif       /* SOM_WPHwManager_xh */

#ifndef SOM_M_WPHwManager_xh
#define SOM_M_WPHwManager_xh

class M_WPHwManager;

#define M_WPHwManager_MajorVersion 1
#define M_WPHwManager_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef M_WPHwManager_API
#define M_WPHwManager_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPHwManager is a metaclass for WPHwManager. Make sure WPHwManager is known.
 */
class WPHwManager;


/* A procedure to create the M_WPHwManager Class */
SOMEXTERN SOMClass * SOMLINK M_WPHwManagerNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPHwManager class object, and the methods it introduces. */
SOMEXTERN struct M_WPHwManagerClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPHwManagerClassData;
#define _M_WPHwManager M_WPHwManagerClassData.classObject

/* The API to parentMtabs for M_WPHwManager, and the instance data it introduces. */
SOMEXTERN struct M_WPHwManagerCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPHwManagerCClassData;

/*
 * -- Typedefs for M_WPHwManager Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPHwManager*   SOMLINK somTP_M_WPHwManager_somNew(M_WPHwManager *somSelf);
typedef somTP_M_WPHwManager_somNew *somTD_M_WPHwManager_somNew;
}

#endif /* M_WPHwManager_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPHwManager
 */
class M_WPHwManager : public M_WPFolder
{
public:

// M_WPHwManager::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPHwManager) M_WPHwManagerNewClass(M_WPHwManager_MajorVersion,M_WPHwManager_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPHwManager,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPHwManager));
}

// M_WPHwManager::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPHwManager& operator=(M_WPHwManager& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPHwManager()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPHwManagerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPHwManager(M_WPHwManager* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPHwManagerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPHwManager(const M_WPHwManager* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPHwManagerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPHwManager*  somNew()
{
   return SOM_ResolveD(this,M_WPHwManager,SOMClass,somNew)
	(this);
}



};   /* M_WPHwManager */



#endif       /* SOM_M_WPHwManager_xh */

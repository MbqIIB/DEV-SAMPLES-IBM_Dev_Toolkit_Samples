
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpmet.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPMET
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPMet_xh
#define SOM_WPMet_xh

class WPMet;

#define WPMet_MajorVersion 1
#define WPMet_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPDataFile_xh
#include <wpdataf.xh>
#endif

#ifndef WPMet_API
#define WPMet_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPDataFile;
class M_WPMet;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPMet Class */
class M_WPMet;
SOMEXTERN M_WPMet * SOMLINK WPMetNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPMet class object, and the methods it introduces. */
SOMEXTERN struct WPMetClassDataStructure {
	M_WPMet *classObject;
} SOMDLINK WPMetClassData;
#define _WPMet WPMetClassData.classObject

/* The API to parentMtabs for WPMet, and the instance data it introduces. */
SOMEXTERN struct WPMetCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPMetCClassData;

/*
 * -- Typedefs for WPMet Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPMet*   SOMLINK somTP_WPMet_somGetClass(WPMet *somSelf);
typedef somTP_WPMet_somGetClass *somTD_WPMet_somGetClass;
}

#endif /* WPMet_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPMet
 */
class WPMet : public WPDataFile
{
public:

// WPMet::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPMet) WPMetNewClass(WPMet_MajorVersion,WPMet_MinorVersion);
   return (void*)
      SOM_Resolve(_WPMet,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPMet));
}

// WPMet::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPMet& operator=(WPMet& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPMet()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPMetCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPMet(WPMet* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPMetCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPMet(const WPMet* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPMetCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPMet*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPMet,SOMObject,somGetClass)
	(this);
}



};   /* WPMet */



#endif       /* SOM_WPMet_xh */

#ifndef SOM_M_WPMet_xh
#define SOM_M_WPMet_xh

class M_WPMet;

#define M_WPMet_MajorVersion 1
#define M_WPMet_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPDataFile_xh
#include <wpdataf.xh>
#endif

#ifndef M_WPMet_API
#define M_WPMet_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPMet is a metaclass for WPMet. Make sure WPMet is known.
 */
class WPMet;


/* A procedure to create the M_WPMet Class */
SOMEXTERN SOMClass * SOMLINK M_WPMetNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPMet class object, and the methods it introduces. */
SOMEXTERN struct M_WPMetClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPMetClassData;
#define _M_WPMet M_WPMetClassData.classObject

/* The API to parentMtabs for M_WPMet, and the instance data it introduces. */
SOMEXTERN struct M_WPMetCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPMetCClassData;

/*
 * -- Typedefs for M_WPMet Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPMet*   SOMLINK somTP_M_WPMet_somNew(M_WPMet *somSelf);
typedef somTP_M_WPMet_somNew *somTD_M_WPMet_somNew;
}

#endif /* M_WPMet_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPMet
 */
class M_WPMet : public M_WPDataFile
{
public:

// M_WPMet::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPMet) M_WPMetNewClass(M_WPMet_MajorVersion,M_WPMet_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPMet,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPMet));
}

// M_WPMet::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPMet& operator=(M_WPMet& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPMet()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPMetCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPMet(M_WPMet* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPMetCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPMet(const M_WPMet* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPMetCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPMet*  somNew()
{
   return SOM_ResolveD(this,M_WPMet,SOMClass,somNew)
	(this);
}



};   /* M_WPMet */



#endif       /* SOM_M_WPMet_xh */

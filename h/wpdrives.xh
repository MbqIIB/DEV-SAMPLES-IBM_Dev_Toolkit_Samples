
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpdrives.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPDRIVES
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPDrives_xh
#define SOM_WPDrives_xh

class WPDrives;

#define WPDrives_MajorVersion 1
#define WPDrives_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef WPDrives_API
#define WPDrives_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPFolder;
class M_WPDrives;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPDrives Class */
class M_WPDrives;
SOMEXTERN M_WPDrives * SOMLINK WPDrivesNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPDrives class object, and the methods it introduces. */
SOMEXTERN struct WPDrivesClassDataStructure {
	M_WPDrives *classObject;
	somMToken wpAddReserveDriveLetterPage;
} SOMDLINK WPDrivesClassData;
#define _WPDrives WPDrivesClassData.classObject

/* The API to parentMtabs for WPDrives, and the instance data it introduces. */
SOMEXTERN struct WPDrivesCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPDrivesCClassData;

/*
 * -- Typedefs for WPDrives Method Procedures
 */
SOMEXTERN {
typedef ULONG   SOMLINK somTP_WPDrives_wpAddReserveDriveLetterPage(WPDrives *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPDrives_wpAddReserveDriveLetterPage *somTD_WPDrives_wpAddReserveDriveLetterPage;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPDrives*   SOMLINK somTP_WPDrives_somGetClass(WPDrives *somSelf);
typedef somTP_WPDrives_somGetClass *somTD_WPDrives_somGetClass;
}

#endif /* WPDrives_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPDrives
 */
class WPDrives : public WPFolder
{
public:

// WPDrives::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPDrives) WPDrivesNewClass(WPDrives_MajorVersion,WPDrives_MinorVersion);
   return (void*)
      SOM_Resolve(_WPDrives,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPDrives));
}

// WPDrives::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPDrives& operator=(WPDrives& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPDrives()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDrivesCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPDrives(WPDrives* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDrivesCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPDrives(const WPDrives* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDrivesCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: wpAddReserveDriveLetterPage */
ULONG   wpAddReserveDriveLetterPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPDrives,WPDrives,wpAddReserveDriveLetterPage)
	(this,hwndNotebook);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPDrives*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPDrives,SOMObject,somGetClass)
	(this);
}



};   /* WPDrives */



#endif       /* SOM_WPDrives_xh */

#ifndef SOM_M_WPDrives_xh
#define SOM_M_WPDrives_xh

class M_WPDrives;

#define M_WPDrives_MajorVersion 1
#define M_WPDrives_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef M_WPDrives_API
#define M_WPDrives_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPDrives is a metaclass for WPDrives. Make sure WPDrives is known.
 */
class WPDrives;


/* A procedure to create the M_WPDrives Class */
SOMEXTERN SOMClass * SOMLINK M_WPDrivesNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPDrives class object, and the methods it introduces. */
SOMEXTERN struct M_WPDrivesClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPDrivesClassData;
#define _M_WPDrives M_WPDrivesClassData.classObject

/* The API to parentMtabs for M_WPDrives, and the instance data it introduces. */
SOMEXTERN struct M_WPDrivesCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPDrivesCClassData;

/*
 * -- Typedefs for M_WPDrives Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPDrives*   SOMLINK somTP_M_WPDrives_somNew(M_WPDrives *somSelf);
typedef somTP_M_WPDrives_somNew *somTD_M_WPDrives_somNew;
}

#endif /* M_WPDrives_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPDrives
 */
class M_WPDrives : public M_WPFolder
{
public:

// M_WPDrives::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPDrives) M_WPDrivesNewClass(M_WPDrives_MajorVersion,M_WPDrives_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPDrives,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPDrives));
}

// M_WPDrives::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPDrives& operator=(M_WPDrives& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPDrives()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDrivesCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPDrives(M_WPDrives* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDrivesCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPDrives(const M_WPDrives* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDrivesCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPDrives*  somNew()
{
   return SOM_ResolveD(this,M_WPDrives,SOMClass,somNew)
	(this);
}



};   /* M_WPDrives */



#endif       /* SOM_M_WPDrives_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpmouse.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPMOUSE
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPMouse_xh
#define SOM_WPMouse_xh

class WPMouse;

#define WPMouse_MajorVersion 1
#define WPMouse_MinorVersion 2

/*
 * Passthru lines: File: "C.h", "before"
 */


/**********************************************************/
/* Defines for wpclsQuerySetting and wpclsSetSetting      */
/**********************************************************/

#define DOUBLECLICK_DEFAULT         0
#define TRACKING_DEFAULT            0
#define BUTTONS_RIGHTHANDED         0
#define BUTTONS_LEFTHANDED          1
#define BUTTONS_DEFAULT             2
#define WINDOWLISTBUTTON_DEFAULT    0
#define POPUPBUTTON_DEFAULT         0
#define DRAGBUTTON_DEFAULT          0
#define TEXTEDITBUTTON_DEFAULT      0



/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef WPMouse_API
#define WPMouse_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPAbstract;
class M_WPMouse;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPMouse Class */
class M_WPMouse;
SOMEXTERN M_WPMouse * SOMLINK WPMouseNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPMouse class object, and the methods it introduces. */
SOMEXTERN struct WPMouseClassDataStructure {
	M_WPMouse *classObject;
	somMToken wpAddMouseMappingsPage;
	somMToken wpAddMouseTimingPage;
	somMToken wpAddMouseTypePage;
	somMToken wpAddMousePtrPage;
	somMToken wpAddMouseCometPage;
} SOMDLINK WPMouseClassData;
#define _WPMouse WPMouseClassData.classObject

/* The API to parentMtabs for WPMouse, and the instance data it introduces. */
SOMEXTERN struct WPMouseCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPMouseCClassData;

/*
 * -- Typedefs for WPMouse Method Procedures
 */
SOMEXTERN {
typedef ULONG   SOMLINK somTP_WPMouse_wpAddMouseMappingsPage(WPMouse *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPMouse_wpAddMouseMappingsPage *somTD_WPMouse_wpAddMouseMappingsPage;
typedef ULONG   SOMLINK somTP_WPMouse_wpAddMouseTimingPage(WPMouse *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPMouse_wpAddMouseTimingPage *somTD_WPMouse_wpAddMouseTimingPage;
typedef ULONG   SOMLINK somTP_WPMouse_wpAddMouseTypePage(WPMouse *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPMouse_wpAddMouseTypePage *somTD_WPMouse_wpAddMouseTypePage;
typedef ULONG   SOMLINK somTP_WPMouse_wpAddMousePtrPage(WPMouse *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPMouse_wpAddMousePtrPage *somTD_WPMouse_wpAddMousePtrPage;
typedef ULONG   SOMLINK somTP_WPMouse_wpAddMouseCometPage(WPMouse *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPMouse_wpAddMouseCometPage *somTD_WPMouse_wpAddMouseCometPage;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPMouse*   SOMLINK somTP_WPMouse_somGetClass(WPMouse *somSelf);
typedef somTP_WPMouse_somGetClass *somTD_WPMouse_somGetClass;
}

#endif /* WPMouse_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPMouse
 */
class WPMouse : public WPAbstract
{
public:

// WPMouse::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPMouse) WPMouseNewClass(WPMouse_MajorVersion,WPMouse_MinorVersion);
   return (void*)
      SOM_Resolve(_WPMouse,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPMouse));
}

// WPMouse::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPMouse& operator=(WPMouse& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPMouse()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPMouseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPMouse(WPMouse* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPMouseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPMouse(const WPMouse* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPMouseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: wpAddMouseMappingsPage */
ULONG   wpAddMouseMappingsPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPMouse,WPMouse,wpAddMouseMappingsPage)
	(this,hwndNotebook);
}


/* method: wpAddMouseTimingPage */
ULONG   wpAddMouseTimingPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPMouse,WPMouse,wpAddMouseTimingPage)
	(this,hwndNotebook);
}


/* method: wpAddMouseTypePage */
ULONG   wpAddMouseTypePage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPMouse,WPMouse,wpAddMouseTypePage)
	(this,hwndNotebook);
}


/* method: wpAddMousePtrPage */
ULONG   wpAddMousePtrPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPMouse,WPMouse,wpAddMousePtrPage)
	(this,hwndNotebook);
}


/* method: wpAddMouseCometPage */
ULONG   wpAddMouseCometPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPMouse,WPMouse,wpAddMouseCometPage)
	(this,hwndNotebook);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPMouse*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPMouse,SOMObject,somGetClass)
	(this);
}



};   /* WPMouse */



#endif       /* SOM_WPMouse_xh */

#ifndef SOM_M_WPMouse_xh
#define SOM_M_WPMouse_xh

class M_WPMouse;

#define M_WPMouse_MajorVersion 1
#define M_WPMouse_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef M_WPMouse_API
#define M_WPMouse_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPMouse is a metaclass for WPMouse. Make sure WPMouse is known.
 */
class WPMouse;


/* A procedure to create the M_WPMouse Class */
SOMEXTERN SOMClass * SOMLINK M_WPMouseNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPMouse class object, and the methods it introduces. */
SOMEXTERN struct M_WPMouseClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPMouseClassData;
#define _M_WPMouse M_WPMouseClassData.classObject

/* The API to parentMtabs for M_WPMouse, and the instance data it introduces. */
SOMEXTERN struct M_WPMouseCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPMouseCClassData;

/*
 * -- Typedefs for M_WPMouse Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPMouse*   SOMLINK somTP_M_WPMouse_somNew(M_WPMouse *somSelf);
typedef somTP_M_WPMouse_somNew *somTD_M_WPMouse_somNew;
}

#endif /* M_WPMouse_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPMouse
 */
class M_WPMouse : public M_WPAbstract
{
public:

// M_WPMouse::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPMouse) M_WPMouseNewClass(M_WPMouse_MajorVersion,M_WPMouse_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPMouse,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPMouse));
}

// M_WPMouse::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPMouse& operator=(M_WPMouse& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPMouse()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPMouseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPMouse(M_WPMouse* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPMouseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPMouse(const M_WPMouse* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPMouseCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPMouse*  somNew()
{
   return SOM_ResolveD(this,M_WPMouse,SOMClass,somNew)
	(this);
}



};   /* M_WPMouse */



#endif       /* SOM_M_WPMouse_xh */

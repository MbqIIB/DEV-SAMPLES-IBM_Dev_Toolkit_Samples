
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpkeybd.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPKEYBD
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPKeyboard_xh
#define SOM_WPKeyboard_xh

class WPKeyboard;

#define WPKeyboard_MajorVersion 1
#define WPKeyboard_MinorVersion 2

/*
 * Passthru lines: File: "C.h", "before"
 */


/***********************************************************/
/* Defines for wpclsQuerySetting and wpclsSetSetting       */
/***********************************************************/

#define REPEATRATE_DEFAULT        0
#define REPEATRATE_MAX           20
#define REPEATRATE_MIN            1
#define REPEATDELAY_DEFAULT      -1
#define REPEATDELAY_MAX         890
#define REPEATDELAY_MIN           0
#define CURSORBLINK_DEFAULT      -1
#define CURSORBLINK_MAX         890
#define CURSORBLINK_MIN           0
#define POPUPKEY_DEFAULT          0
#define TEXTEDITKEY_DEFAULT       0



/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef WPKeyboard_API
#define WPKeyboard_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPAbstract;
class M_WPKeyboard;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPKeyboard Class */
class M_WPKeyboard;
SOMEXTERN M_WPKeyboard * SOMLINK WPKeyboardNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPKeyboard class object, and the methods it introduces. */
SOMEXTERN struct WPKeyboardClassDataStructure {
	M_WPKeyboard *classObject;
	somMToken wpAddKeyboardMappingsPage;
	somMToken wpAddKeyboardTimingPage;
	somMToken wpAddKeyboardSpecialNeedsPage;
	somMToken wpAddKeyboardLayoutPage;
} SOMDLINK WPKeyboardClassData;
#define _WPKeyboard WPKeyboardClassData.classObject

/* The API to parentMtabs for WPKeyboard, and the instance data it introduces. */
SOMEXTERN struct WPKeyboardCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPKeyboardCClassData;

/*
 * -- Typedefs for WPKeyboard Method Procedures
 */
SOMEXTERN {
typedef ULONG   SOMLINK somTP_WPKeyboard_wpAddKeyboardMappingsPage(WPKeyboard *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPKeyboard_wpAddKeyboardMappingsPage *somTD_WPKeyboard_wpAddKeyboardMappingsPage;
typedef ULONG   SOMLINK somTP_WPKeyboard_wpAddKeyboardTimingPage(WPKeyboard *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPKeyboard_wpAddKeyboardTimingPage *somTD_WPKeyboard_wpAddKeyboardTimingPage;
typedef ULONG   SOMLINK somTP_WPKeyboard_wpAddKeyboardSpecialNeedsPage(WPKeyboard *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPKeyboard_wpAddKeyboardSpecialNeedsPage *somTD_WPKeyboard_wpAddKeyboardSpecialNeedsPage;
typedef ULONG   SOMLINK somTP_WPKeyboard_wpAddKeyboardLayoutPage(WPKeyboard *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPKeyboard_wpAddKeyboardLayoutPage *somTD_WPKeyboard_wpAddKeyboardLayoutPage;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPKeyboard*   SOMLINK somTP_WPKeyboard_somGetClass(WPKeyboard *somSelf);
typedef somTP_WPKeyboard_somGetClass *somTD_WPKeyboard_somGetClass;
}

#endif /* WPKeyboard_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPKeyboard
 */
class WPKeyboard : public WPAbstract
{
public:

// WPKeyboard::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPKeyboard) WPKeyboardNewClass(WPKeyboard_MajorVersion,WPKeyboard_MinorVersion);
   return (void*)
      SOM_Resolve(_WPKeyboard,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPKeyboard));
}

// WPKeyboard::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPKeyboard& operator=(WPKeyboard& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPKeyboard()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPKeyboardCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPKeyboard(WPKeyboard* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPKeyboardCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPKeyboard(const WPKeyboard* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPKeyboardCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: wpAddKeyboardMappingsPage */
ULONG   wpAddKeyboardMappingsPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPKeyboard,WPKeyboard,wpAddKeyboardMappingsPage)
	(this,hwndNotebook);
}


/* method: wpAddKeyboardTimingPage */
ULONG   wpAddKeyboardTimingPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPKeyboard,WPKeyboard,wpAddKeyboardTimingPage)
	(this,hwndNotebook);
}


/* method: wpAddKeyboardSpecialNeedsPage */
ULONG   wpAddKeyboardSpecialNeedsPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPKeyboard,WPKeyboard,wpAddKeyboardSpecialNeedsPage)
	(this,hwndNotebook);
}


/* method: wpAddKeyboardLayoutPage */
ULONG   wpAddKeyboardLayoutPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPKeyboard,WPKeyboard,wpAddKeyboardLayoutPage)
	(this,hwndNotebook);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPKeyboard*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPKeyboard,SOMObject,somGetClass)
	(this);
}



};   /* WPKeyboard */



#endif       /* SOM_WPKeyboard_xh */

#ifndef SOM_M_WPKeyboard_xh
#define SOM_M_WPKeyboard_xh

class M_WPKeyboard;

#define M_WPKeyboard_MajorVersion 1
#define M_WPKeyboard_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef M_WPKeyboard_API
#define M_WPKeyboard_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPKeyboard is a metaclass for WPKeyboard. Make sure WPKeyboard is known.
 */
class WPKeyboard;


/* A procedure to create the M_WPKeyboard Class */
SOMEXTERN SOMClass * SOMLINK M_WPKeyboardNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPKeyboard class object, and the methods it introduces. */
SOMEXTERN struct M_WPKeyboardClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPKeyboardClassData;
#define _M_WPKeyboard M_WPKeyboardClassData.classObject

/* The API to parentMtabs for M_WPKeyboard, and the instance data it introduces. */
SOMEXTERN struct M_WPKeyboardCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPKeyboardCClassData;

/*
 * -- Typedefs for M_WPKeyboard Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPKeyboard*   SOMLINK somTP_M_WPKeyboard_somNew(M_WPKeyboard *somSelf);
typedef somTP_M_WPKeyboard_somNew *somTD_M_WPKeyboard_somNew;
}

#endif /* M_WPKeyboard_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPKeyboard
 */
class M_WPKeyboard : public M_WPAbstract
{
public:

// M_WPKeyboard::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPKeyboard) M_WPKeyboardNewClass(M_WPKeyboard_MajorVersion,M_WPKeyboard_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPKeyboard,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPKeyboard));
}

// M_WPKeyboard::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPKeyboard& operator=(M_WPKeyboard& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPKeyboard()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPKeyboardCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPKeyboard(M_WPKeyboard* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPKeyboardCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPKeyboard(const M_WPKeyboard* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPKeyboardCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPKeyboard*  somNew()
{
   return SOM_ResolveD(this,M_WPKeyboard,SOMClass,somNew)
	(this);
}



};   /* M_WPKeyboard */



#endif       /* SOM_M_WPKeyboard_xh */

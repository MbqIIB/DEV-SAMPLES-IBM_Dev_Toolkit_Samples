
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpstart.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPSTART
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPStartup_xh
#define SOM_WPStartup_xh

class WPStartup;

#define WPStartup_MajorVersion 1
#define WPStartup_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef WPStartup_API
#define WPStartup_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPFolder;
class M_WPStartup;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPStartup Class */
class M_WPStartup;
SOMEXTERN M_WPStartup * SOMLINK WPStartupNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPStartup class object, and the methods it introduces. */
SOMEXTERN struct WPStartupClassDataStructure {
	M_WPStartup *classObject;
} SOMDLINK WPStartupClassData;
#define _WPStartup WPStartupClassData.classObject

/* The API to parentMtabs for WPStartup, and the instance data it introduces. */
SOMEXTERN struct WPStartupCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPStartupCClassData;

/*
 * -- Typedefs for WPStartup Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPStartup*   SOMLINK somTP_WPStartup_somGetClass(WPStartup *somSelf);
typedef somTP_WPStartup_somGetClass *somTD_WPStartup_somGetClass;
}

#endif /* WPStartup_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPStartup
 */
class WPStartup : public WPFolder
{
public:

// WPStartup::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPStartup) WPStartupNewClass(WPStartup_MajorVersion,WPStartup_MinorVersion);
   return (void*)
      SOM_Resolve(_WPStartup,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPStartup));
}

// WPStartup::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPStartup& operator=(WPStartup& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPStartup()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPStartupCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPStartup(WPStartup* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPStartupCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPStartup(const WPStartup* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPStartupCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPStartup*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPStartup,SOMObject,somGetClass)
	(this);
}



};   /* WPStartup */



#endif       /* SOM_WPStartup_xh */

#ifndef SOM_M_WPStartup_xh
#define SOM_M_WPStartup_xh

class M_WPStartup;

#define M_WPStartup_MajorVersion 1
#define M_WPStartup_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef M_WPStartup_API
#define M_WPStartup_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPStartup is a metaclass for WPStartup. Make sure WPStartup is known.
 */
class WPStartup;


/* A procedure to create the M_WPStartup Class */
SOMEXTERN SOMClass * SOMLINK M_WPStartupNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPStartup class object, and the methods it introduces. */
SOMEXTERN struct M_WPStartupClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPStartupClassData;
#define _M_WPStartup M_WPStartupClassData.classObject

/* The API to parentMtabs for M_WPStartup, and the instance data it introduces. */
SOMEXTERN struct M_WPStartupCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPStartupCClassData;

/*
 * -- Typedefs for M_WPStartup Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPStartup*   SOMLINK somTP_M_WPStartup_somNew(M_WPStartup *somSelf);
typedef somTP_M_WPStartup_somNew *somTD_M_WPStartup_somNew;
}

#endif /* M_WPStartup_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPStartup
 */
class M_WPStartup : public M_WPFolder
{
public:

// M_WPStartup::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPStartup) M_WPStartupNewClass(M_WPStartup_MajorVersion,M_WPStartup_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPStartup,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPStartup));
}

// M_WPStartup::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPStartup& operator=(M_WPStartup& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPStartup()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPStartupCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPStartup(M_WPStartup* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPStartupCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPStartup(const M_WPStartup* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPStartupCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPStartup*  somNew()
{
   return SOM_ResolveD(this,M_WPStartup,SOMClass,somNew)
	(this);
}



};   /* M_WPStartup */



#endif       /* SOM_M_WPStartup_xh */

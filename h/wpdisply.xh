
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpdisply.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPDISPLY
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPDevDisplay_xh
#define SOM_WPDevDisplay_xh

class WPDevDisplay;

#define WPDevDisplay_MajorVersion 1
#define WPDevDisplay_MinorVersion 2

/*
 * Passthru lines: File: "C.h", "before"
 */



/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef WPDevDisplay_API
#define WPDevDisplay_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPTransient;
class M_WPDevice;
class M_WPDevDisplay;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPDevDisplay Class */
class M_WPDevDisplay;
SOMEXTERN M_WPDevDisplay * SOMLINK WPDevDisplayNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPDevDisplay class object, and the methods it introduces. */
SOMEXTERN struct WPDevDisplayClassDataStructure {
	M_WPDevDisplay *classObject;
} SOMDLINK WPDevDisplayClassData;
#define _WPDevDisplay WPDevDisplayClassData.classObject

/* The API to parentMtabs for WPDevDisplay, and the instance data it introduces. */
SOMEXTERN struct WPDevDisplayCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPDevDisplayCClassData;

/*
 * -- Typedefs for WPDevDisplay Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPDevDisplay*   SOMLINK somTP_WPDevDisplay_somGetClass(WPDevDisplay *somSelf);
typedef somTP_WPDevDisplay_somGetClass *somTD_WPDevDisplay_somGetClass;
}

#endif /* WPDevDisplay_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPDevDisplay
 */
class WPDevDisplay : public WPDevice
{
public:

// WPDevDisplay::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPDevDisplay) WPDevDisplayNewClass(WPDevDisplay_MajorVersion,WPDevDisplay_MinorVersion);
   return (void*)
      SOM_Resolve(_WPDevDisplay,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPDevDisplay));
}

// WPDevDisplay::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPDevDisplay& operator=(WPDevDisplay& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPDevDisplay()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevDisplayCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPDevDisplay(WPDevDisplay* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevDisplayCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPDevDisplay(const WPDevDisplay* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevDisplayCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPDevDisplay*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPDevDisplay,SOMObject,somGetClass)
	(this);
}



};   /* WPDevDisplay */



#endif       /* SOM_WPDevDisplay_xh */

#ifndef SOM_M_WPDevDisplay_xh
#define SOM_M_WPDevDisplay_xh

class M_WPDevDisplay;

/*
 *  New class methods section
 */

#define M_WPDevDisplay_MajorVersion 1
#define M_WPDevDisplay_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef M_WPDevDisplay_API
#define M_WPDevDisplay_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPDevDisplay is a metaclass for WPDevDisplay. Make sure WPDevDisplay is known.
 */
class WPDevDisplay;


/* A procedure to create the M_WPDevDisplay Class */
SOMEXTERN SOMClass * SOMLINK M_WPDevDisplayNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPDevDisplay class object, and the methods it introduces. */
SOMEXTERN struct M_WPDevDisplayClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPDevDisplayClassData;
#define _M_WPDevDisplay M_WPDevDisplayClassData.classObject

/* The API to parentMtabs for M_WPDevDisplay, and the instance data it introduces. */
SOMEXTERN struct M_WPDevDisplayCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPDevDisplayCClassData;

/*
 * -- Typedefs for M_WPDevDisplay Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPDevDisplay*   SOMLINK somTP_M_WPDevDisplay_somNew(M_WPDevDisplay *somSelf);
typedef somTP_M_WPDevDisplay_somNew *somTD_M_WPDevDisplay_somNew;
}

#endif /* M_WPDevDisplay_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPDevDisplay
 */
class M_WPDevDisplay : public M_WPDevice
{
/*
 *  New class methods section
 */
public:

// M_WPDevDisplay::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPDevDisplay) M_WPDevDisplayNewClass(M_WPDevDisplay_MajorVersion,M_WPDevDisplay_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPDevDisplay,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPDevDisplay));
}

// M_WPDevDisplay::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPDevDisplay& operator=(M_WPDevDisplay& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPDevDisplay()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevDisplayCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPDevDisplay(M_WPDevDisplay* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevDisplayCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPDevDisplay(const M_WPDevDisplay* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevDisplayCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPDevDisplay*  somNew()
{
   return SOM_ResolveD(this,M_WPDevDisplay,SOMClass,somNew)
	(this);
}



};   /* M_WPDevDisplay */



#endif       /* SOM_M_WPDevDisplay_xh */

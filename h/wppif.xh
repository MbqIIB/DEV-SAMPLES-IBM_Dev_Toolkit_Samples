
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wppif.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPPIF
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPPif_xh
#define SOM_WPPif_xh

class WPPif;

#define WPPif_MajorVersion 1
#define WPPif_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPDataFile_xh
#include <wpdataf.xh>
#endif

#ifndef WPPif_API
#define WPPif_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPDataFile;
class M_WPPif;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPPif Class */
class M_WPPif;
SOMEXTERN M_WPPif * SOMLINK WPPifNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPPif class object, and the methods it introduces. */
SOMEXTERN struct WPPifClassDataStructure {
	M_WPPif *classObject;
} SOMDLINK WPPifClassData;
#define _WPPif WPPifClassData.classObject

/* The API to parentMtabs for WPPif, and the instance data it introduces. */
SOMEXTERN struct WPPifCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPPifCClassData;

/*
 * -- Typedefs for WPPif Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPPif*   SOMLINK somTP_WPPif_somGetClass(WPPif *somSelf);
typedef somTP_WPPif_somGetClass *somTD_WPPif_somGetClass;
}

#endif /* WPPif_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPPif
 */
class WPPif : public WPDataFile
{
public:

// WPPif::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPPif) WPPifNewClass(WPPif_MajorVersion,WPPif_MinorVersion);
   return (void*)
      SOM_Resolve(_WPPif,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPPif));
}

// WPPif::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPPif& operator=(WPPif& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPPif()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPPifCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPPif(WPPif* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPPifCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPPif(const WPPif* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPPifCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPPif*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPPif,SOMObject,somGetClass)
	(this);
}



};   /* WPPif */



#endif       /* SOM_WPPif_xh */

#ifndef SOM_M_WPPif_xh
#define SOM_M_WPPif_xh

class M_WPPif;

#define M_WPPif_MajorVersion 1
#define M_WPPif_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPDataFile_xh
#include <wpdataf.xh>
#endif

#ifndef M_WPPif_API
#define M_WPPif_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPPif is a metaclass for WPPif. Make sure WPPif is known.
 */
class WPPif;


/* A procedure to create the M_WPPif Class */
SOMEXTERN SOMClass * SOMLINK M_WPPifNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPPif class object, and the methods it introduces. */
SOMEXTERN struct M_WPPifClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPPifClassData;
#define _M_WPPif M_WPPifClassData.classObject

/* The API to parentMtabs for M_WPPif, and the instance data it introduces. */
SOMEXTERN struct M_WPPifCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPPifCClassData;

/*
 * -- Typedefs for M_WPPif Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPPif*   SOMLINK somTP_M_WPPif_somNew(M_WPPif *somSelf);
typedef somTP_M_WPPif_somNew *somTD_M_WPPif_somNew;
}

#endif /* M_WPPif_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPPif
 */
class M_WPPif : public M_WPDataFile
{
public:

// M_WPPif::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPPif) M_WPPifNewClass(M_WPPif_MajorVersion,M_WPPif_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPPif,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPPif));
}

// M_WPPif::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPPif& operator=(M_WPPif& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPPif()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPPifCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPPif(M_WPPif* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPPifCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPPif(const M_WPPif* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPPifCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPPif*  somNew()
{
   return SOM_ResolveD(this,M_WPPif,SOMClass,somNew)
	(this);
}



};   /* M_WPPif */



#endif       /* SOM_M_WPPif_xh */

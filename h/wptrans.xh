
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wptrans.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPTRANS
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPTransient_xh
#define SOM_WPTransient_xh

class WPTransient;

#define WPTransient_MajorVersion 1
#define WPTransient_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPObject_xh
#include <wpobject.xh>
#endif

#ifndef WPTransient_API
#define WPTransient_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPTransient;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPTransient Class */
class M_WPTransient;
SOMEXTERN M_WPTransient * SOMLINK WPTransientNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPTransient class object, and the methods it introduces. */
SOMEXTERN struct WPTransientClassDataStructure {
	M_WPTransient *classObject;
} SOMDLINK WPTransientClassData;
#define _WPTransient WPTransientClassData.classObject

/* The API to parentMtabs for WPTransient, and the instance data it introduces. */
SOMEXTERN struct WPTransientCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPTransientCClassData;

/*
 * -- Typedefs for WPTransient Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPTransient*   SOMLINK somTP_WPTransient_somGetClass(WPTransient *somSelf);
typedef somTP_WPTransient_somGetClass *somTD_WPTransient_somGetClass;
}

#endif /* WPTransient_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPTransient
 */
class WPTransient : public WPObject
{
public:

// WPTransient::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPTransient) WPTransientNewClass(WPTransient_MajorVersion,WPTransient_MinorVersion);
   return (void*)
      SOM_Resolve(_WPTransient,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPTransient));
}

// WPTransient::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPTransient& operator=(WPTransient& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPTransient()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPTransientCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPTransient(WPTransient* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPTransientCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPTransient(const WPTransient* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPTransientCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPTransient*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPTransient,SOMObject,somGetClass)
	(this);
}



};   /* WPTransient */



#endif       /* SOM_WPTransient_xh */

#ifndef SOM_M_WPTransient_xh
#define SOM_M_WPTransient_xh

class M_WPTransient;

#define M_WPTransient_MajorVersion 1
#define M_WPTransient_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPObject_xh
#include <wpobject.xh>
#endif

#ifndef M_WPTransient_API
#define M_WPTransient_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPTransient is a metaclass for WPTransient. Make sure WPTransient is known.
 */
class WPTransient;


/* A procedure to create the M_WPTransient Class */
SOMEXTERN SOMClass * SOMLINK M_WPTransientNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPTransient class object, and the methods it introduces. */
SOMEXTERN struct M_WPTransientClassDataStructure {
	SOMClass *classObject;
	somMToken wpclsTransientPrivate1;
	somMToken wpclsTransientPrivate2;
} SOMDLINK M_WPTransientClassData;
#define _M_WPTransient M_WPTransientClassData.classObject

/* The API to parentMtabs for M_WPTransient, and the instance data it introduces. */
SOMEXTERN struct M_WPTransientCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPTransientCClassData;

/*
 * -- Typedefs for M_WPTransient Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPTransient*   SOMLINK somTP_M_WPTransient_somNew(M_WPTransient *somSelf);
typedef somTP_M_WPTransient_somNew *somTD_M_WPTransient_somNew;
}

#endif /* M_WPTransient_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPTransient
 */
class M_WPTransient : public M_WPObject
{
public:

// M_WPTransient::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPTransient) M_WPTransientNewClass(M_WPTransient_MajorVersion,M_WPTransient_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPTransient,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPTransient));
}

// M_WPTransient::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPTransient& operator=(M_WPTransient& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPTransient()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPTransientCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPTransient(M_WPTransient* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPTransientCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPTransient(const M_WPTransient* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPTransientCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPTransient*  somNew()
{
   return SOM_ResolveD(this,M_WPTransient,SOMClass,somNew)
	(this);
}



};   /* M_WPTransient */



#endif       /* SOM_M_WPTransient_xh */

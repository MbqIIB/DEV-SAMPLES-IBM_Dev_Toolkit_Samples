
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wptimer.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPTIMER
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPDevTimer_xh
#define SOM_WPDevTimer_xh

class WPDevTimer;

#define WPDevTimer_MajorVersion 1
#define WPDevTimer_MinorVersion 2

/*
 * Passthru lines: File: "C.h", "before"
 */



/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef WPDevTimer_API
#define WPDevTimer_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPTransient;
class M_WPDevice;
class M_WPDevTimer;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPDevTimer Class */
class M_WPDevTimer;
SOMEXTERN M_WPDevTimer * SOMLINK WPDevTimerNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPDevTimer class object, and the methods it introduces. */
SOMEXTERN struct WPDevTimerClassDataStructure {
	M_WPDevTimer *classObject;
} SOMDLINK WPDevTimerClassData;
#define _WPDevTimer WPDevTimerClassData.classObject

/* The API to parentMtabs for WPDevTimer, and the instance data it introduces. */
SOMEXTERN struct WPDevTimerCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPDevTimerCClassData;

/*
 * -- Typedefs for WPDevTimer Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPDevTimer*   SOMLINK somTP_WPDevTimer_somGetClass(WPDevTimer *somSelf);
typedef somTP_WPDevTimer_somGetClass *somTD_WPDevTimer_somGetClass;
}

#endif /* WPDevTimer_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPDevTimer
 */
class WPDevTimer : public WPDevice
{
public:

// WPDevTimer::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPDevTimer) WPDevTimerNewClass(WPDevTimer_MajorVersion,WPDevTimer_MinorVersion);
   return (void*)
      SOM_Resolve(_WPDevTimer,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPDevTimer));
}

// WPDevTimer::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPDevTimer& operator=(WPDevTimer& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPDevTimer()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevTimerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPDevTimer(WPDevTimer* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevTimerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPDevTimer(const WPDevTimer* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevTimerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPDevTimer*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPDevTimer,SOMObject,somGetClass)
	(this);
}



};   /* WPDevTimer */



#endif       /* SOM_WPDevTimer_xh */

#ifndef SOM_M_WPDevTimer_xh
#define SOM_M_WPDevTimer_xh

class M_WPDevTimer;

/*
 *  New class methods section
 */

#define M_WPDevTimer_MajorVersion 1
#define M_WPDevTimer_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef M_WPDevTimer_API
#define M_WPDevTimer_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPDevTimer is a metaclass for WPDevTimer. Make sure WPDevTimer is known.
 */
class WPDevTimer;


/* A procedure to create the M_WPDevTimer Class */
SOMEXTERN SOMClass * SOMLINK M_WPDevTimerNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPDevTimer class object, and the methods it introduces. */
SOMEXTERN struct M_WPDevTimerClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPDevTimerClassData;
#define _M_WPDevTimer M_WPDevTimerClassData.classObject

/* The API to parentMtabs for M_WPDevTimer, and the instance data it introduces. */
SOMEXTERN struct M_WPDevTimerCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPDevTimerCClassData;

/*
 * -- Typedefs for M_WPDevTimer Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPDevTimer*   SOMLINK somTP_M_WPDevTimer_somNew(M_WPDevTimer *somSelf);
typedef somTP_M_WPDevTimer_somNew *somTD_M_WPDevTimer_somNew;
}

#endif /* M_WPDevTimer_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPDevTimer
 */
class M_WPDevTimer : public M_WPDevice
{
/*
 *  New class methods section
 */
public:

// M_WPDevTimer::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPDevTimer) M_WPDevTimerNewClass(M_WPDevTimer_MajorVersion,M_WPDevTimer_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPDevTimer,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPDevTimer));
}

// M_WPDevTimer::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPDevTimer& operator=(M_WPDevTimer& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPDevTimer()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevTimerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPDevTimer(M_WPDevTimer* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevTimerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPDevTimer(const M_WPDevTimer* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevTimerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPDevTimer*  somNew()
{
   return SOM_ResolveD(this,M_WPDevTimer,SOMClass,somNew)
	(this);
}



};   /* M_WPDevTimer */



#endif       /* SOM_M_WPDevTimer_xh */

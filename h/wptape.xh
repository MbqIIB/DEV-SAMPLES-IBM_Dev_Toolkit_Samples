
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wptape.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPTAPE
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPDevTape_xh
#define SOM_WPDevTape_xh

class WPDevTape;

#define WPDevTape_MajorVersion 1
#define WPDevTape_MinorVersion 2

/*
 * Passthru lines: File: "C.h", "before"
 */



/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef WPDevTape_API
#define WPDevTape_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPTransient;
class M_WPDevice;
class M_WPDevTape;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPDevTape Class */
class M_WPDevTape;
SOMEXTERN M_WPDevTape * SOMLINK WPDevTapeNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPDevTape class object, and the methods it introduces. */
SOMEXTERN struct WPDevTapeClassDataStructure {
	M_WPDevTape *classObject;
} SOMDLINK WPDevTapeClassData;
#define _WPDevTape WPDevTapeClassData.classObject

/* The API to parentMtabs for WPDevTape, and the instance data it introduces. */
SOMEXTERN struct WPDevTapeCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPDevTapeCClassData;

/*
 * -- Typedefs for WPDevTape Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPDevTape*   SOMLINK somTP_WPDevTape_somGetClass(WPDevTape *somSelf);
typedef somTP_WPDevTape_somGetClass *somTD_WPDevTape_somGetClass;
}

#endif /* WPDevTape_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPDevTape
 */
class WPDevTape : public WPDevice
{
public:

// WPDevTape::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPDevTape) WPDevTapeNewClass(WPDevTape_MajorVersion,WPDevTape_MinorVersion);
   return (void*)
      SOM_Resolve(_WPDevTape,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPDevTape));
}

// WPDevTape::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPDevTape& operator=(WPDevTape& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPDevTape()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevTapeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPDevTape(WPDevTape* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevTapeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPDevTape(const WPDevTape* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevTapeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPDevTape*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPDevTape,SOMObject,somGetClass)
	(this);
}



};   /* WPDevTape */



#endif       /* SOM_WPDevTape_xh */

#ifndef SOM_M_WPDevTape_xh
#define SOM_M_WPDevTape_xh

class M_WPDevTape;

/*
 *  New class methods section
 */

#define M_WPDevTape_MajorVersion 1
#define M_WPDevTape_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef M_WPDevTape_API
#define M_WPDevTape_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPDevTape is a metaclass for WPDevTape. Make sure WPDevTape is known.
 */
class WPDevTape;


/* A procedure to create the M_WPDevTape Class */
SOMEXTERN SOMClass * SOMLINK M_WPDevTapeNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPDevTape class object, and the methods it introduces. */
SOMEXTERN struct M_WPDevTapeClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPDevTapeClassData;
#define _M_WPDevTape M_WPDevTapeClassData.classObject

/* The API to parentMtabs for M_WPDevTape, and the instance data it introduces. */
SOMEXTERN struct M_WPDevTapeCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPDevTapeCClassData;

/*
 * -- Typedefs for M_WPDevTape Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPDevTape*   SOMLINK somTP_M_WPDevTape_somNew(M_WPDevTape *somSelf);
typedef somTP_M_WPDevTape_somNew *somTD_M_WPDevTape_somNew;
}

#endif /* M_WPDevTape_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPDevTape
 */
class M_WPDevTape : public M_WPDevice
{
/*
 *  New class methods section
 */
public:

// M_WPDevTape::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPDevTape) M_WPDevTapeNewClass(M_WPDevTape_MajorVersion,M_WPDevTape_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPDevTape,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPDevTape));
}

// M_WPDevTape::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPDevTape& operator=(M_WPDevTape& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPDevTape()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevTapeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPDevTape(M_WPDevTape* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevTapeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPDevTape(const M_WPDevTape* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevTapeCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPDevTape*  somNew()
{
   return SOM_ResolveD(this,M_WPDevTape,SOMClass,somNew)
	(this);
}



};   /* M_WPDevTape */



#endif       /* SOM_M_WPDevTape_xh */

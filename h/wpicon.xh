
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpicon.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPICON
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPIcon_xh
#define SOM_WPIcon_xh

class WPIcon;

#define WPIcon_MajorVersion 1
#define WPIcon_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPDataFile_xh
#include <wpdataf.xh>
#endif

#ifndef WPIcon_API
#define WPIcon_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPDataFile;
class M_WPIcon;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPIcon Class */
class M_WPIcon;
SOMEXTERN M_WPIcon * SOMLINK WPIconNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPIcon class object, and the methods it introduces. */
SOMEXTERN struct WPIconClassDataStructure {
	M_WPIcon *classObject;
} SOMDLINK WPIconClassData;
#define _WPIcon WPIconClassData.classObject

/* The API to parentMtabs for WPIcon, and the instance data it introduces. */
SOMEXTERN struct WPIconCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPIconCClassData;

/*
 * -- Typedefs for WPIcon Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPIcon*   SOMLINK somTP_WPIcon_somGetClass(WPIcon *somSelf);
typedef somTP_WPIcon_somGetClass *somTD_WPIcon_somGetClass;
}

#endif /* WPIcon_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPIcon
 */
class WPIcon : public WPDataFile
{
public:

// WPIcon::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPIcon) WPIconNewClass(WPIcon_MajorVersion,WPIcon_MinorVersion);
   return (void*)
      SOM_Resolve(_WPIcon,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPIcon));
}

// WPIcon::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPIcon& operator=(WPIcon& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPIcon()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPIconCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPIcon(WPIcon* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPIconCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPIcon(const WPIcon* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPIconCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPIcon*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPIcon,SOMObject,somGetClass)
	(this);
}



};   /* WPIcon */



#endif       /* SOM_WPIcon_xh */

#ifndef SOM_M_WPIcon_xh
#define SOM_M_WPIcon_xh

class M_WPIcon;

#define M_WPIcon_MajorVersion 1
#define M_WPIcon_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPDataFile_xh
#include <wpdataf.xh>
#endif

#ifndef M_WPIcon_API
#define M_WPIcon_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPIcon is a metaclass for WPIcon. Make sure WPIcon is known.
 */
class WPIcon;


/* A procedure to create the M_WPIcon Class */
SOMEXTERN SOMClass * SOMLINK M_WPIconNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPIcon class object, and the methods it introduces. */
SOMEXTERN struct M_WPIconClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPIconClassData;
#define _M_WPIcon M_WPIconClassData.classObject

/* The API to parentMtabs for M_WPIcon, and the instance data it introduces. */
SOMEXTERN struct M_WPIconCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPIconCClassData;

/*
 * -- Typedefs for M_WPIcon Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPIcon*   SOMLINK somTP_M_WPIcon_somNew(M_WPIcon *somSelf);
typedef somTP_M_WPIcon_somNew *somTD_M_WPIcon_somNew;
}

#endif /* M_WPIcon_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPIcon
 */
class M_WPIcon : public M_WPDataFile
{
public:

// M_WPIcon::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPIcon) M_WPIconNewClass(M_WPIcon_MajorVersion,M_WPIcon_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPIcon,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPIcon));
}

// M_WPIcon::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPIcon& operator=(M_WPIcon& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPIcon()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPIconCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPIcon(M_WPIcon* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPIconCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPIcon(const M_WPIcon* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPIconCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPIcon*  somNew()
{
   return SOM_ResolveD(this,M_WPIcon,SOMClass,somNew)
	(this);
}



};   /* M_WPIcon */



#endif       /* SOM_M_WPIcon_xh */

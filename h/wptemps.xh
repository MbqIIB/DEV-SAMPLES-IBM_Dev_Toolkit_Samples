
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wptemps.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPTEMPS
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPTemplates_xh
#define SOM_WPTemplates_xh

class WPTemplates;

#define WPTemplates_MajorVersion 1
#define WPTemplates_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef WPTemplates_API
#define WPTemplates_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPFolder;
class M_WPTemplates;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPTemplates Class */
class M_WPTemplates;
SOMEXTERN M_WPTemplates * SOMLINK WPTemplatesNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPTemplates class object, and the methods it introduces. */
SOMEXTERN struct WPTemplatesClassDataStructure {
	M_WPTemplates *classObject;
} SOMDLINK WPTemplatesClassData;
#define _WPTemplates WPTemplatesClassData.classObject

/* The API to parentMtabs for WPTemplates, and the instance data it introduces. */
SOMEXTERN struct WPTemplatesCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPTemplatesCClassData;

/*
 * -- Typedefs for WPTemplates Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPTemplates*   SOMLINK somTP_WPTemplates_somGetClass(WPTemplates *somSelf);
typedef somTP_WPTemplates_somGetClass *somTD_WPTemplates_somGetClass;
}

#endif /* WPTemplates_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPTemplates
 */
class WPTemplates : public WPFolder
{
public:

// WPTemplates::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPTemplates) WPTemplatesNewClass(WPTemplates_MajorVersion,WPTemplates_MinorVersion);
   return (void*)
      SOM_Resolve(_WPTemplates,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPTemplates));
}

// WPTemplates::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPTemplates& operator=(WPTemplates& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPTemplates()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPTemplatesCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPTemplates(WPTemplates* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPTemplatesCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPTemplates(const WPTemplates* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPTemplatesCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPTemplates*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPTemplates,SOMObject,somGetClass)
	(this);
}



};   /* WPTemplates */



#endif       /* SOM_WPTemplates_xh */

#ifndef SOM_M_WPTemplates_xh
#define SOM_M_WPTemplates_xh

class M_WPTemplates;

#define M_WPTemplates_MajorVersion 1
#define M_WPTemplates_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef M_WPTemplates_API
#define M_WPTemplates_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPTemplates is a metaclass for WPTemplates. Make sure WPTemplates is known.
 */
class WPTemplates;


/* A procedure to create the M_WPTemplates Class */
SOMEXTERN SOMClass * SOMLINK M_WPTemplatesNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPTemplates class object, and the methods it introduces. */
SOMEXTERN struct M_WPTemplatesClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPTemplatesClassData;
#define _M_WPTemplates M_WPTemplatesClassData.classObject

/* The API to parentMtabs for M_WPTemplates, and the instance data it introduces. */
SOMEXTERN struct M_WPTemplatesCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPTemplatesCClassData;

/*
 * -- Typedefs for M_WPTemplates Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPTemplates*   SOMLINK somTP_M_WPTemplates_somNew(M_WPTemplates *somSelf);
typedef somTP_M_WPTemplates_somNew *somTD_M_WPTemplates_somNew;
}

#endif /* M_WPTemplates_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPTemplates
 */
class M_WPTemplates : public M_WPFolder
{
public:

// M_WPTemplates::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPTemplates) M_WPTemplatesNewClass(M_WPTemplates_MajorVersion,M_WPTemplates_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPTemplates,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPTemplates));
}

// M_WPTemplates::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPTemplates& operator=(M_WPTemplates& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPTemplates()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPTemplatesCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPTemplates(M_WPTemplates* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPTemplatesCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPTemplates(const M_WPTemplates* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPTemplatesCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPTemplates*  somNew()
{
   return SOM_ResolveD(this,M_WPTemplates,SOMClass,somNew)
	(this);
}



};   /* M_WPTemplates */



#endif       /* SOM_M_WPTemplates_xh */

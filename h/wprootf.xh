
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wprootf.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPROOTF
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPRootFolder_xh
#define SOM_WPRootFolder_xh

class WPRootFolder;

#define WPRootFolder_MajorVersion 1
#define WPRootFolder_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef WPRootFolder_API
#define WPRootFolder_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPFolder;
class M_WPRootFolder;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPRootFolder Class */
class M_WPRootFolder;
SOMEXTERN M_WPRootFolder * SOMLINK WPRootFolderNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPRootFolder class object, and the methods it introduces. */
SOMEXTERN struct WPRootFolderClassDataStructure {
	M_WPRootFolder *classObject;
	somMToken wpRootFolderPrivate1;
	somMToken wpRefresh;
} SOMDLINK WPRootFolderClassData;
#define _WPRootFolder WPRootFolderClassData.classObject

/* The API to parentMtabs for WPRootFolder, and the instance data it introduces. */
SOMEXTERN struct WPRootFolderCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPRootFolderCClassData;

/*
 * -- Typedefs for WPRootFolder Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPRootFolder*   SOMLINK somTP_WPRootFolder_somGetClass(WPRootFolder *somSelf);
typedef somTP_WPRootFolder_somGetClass *somTD_WPRootFolder_somGetClass;
}

#endif /* WPRootFolder_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPRootFolder
 */
class WPRootFolder : public WPFolder
{
public:

// WPRootFolder::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPRootFolder) WPRootFolderNewClass(WPRootFolder_MajorVersion,WPRootFolder_MinorVersion);
   return (void*)
      SOM_Resolve(_WPRootFolder,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPRootFolder));
}

// WPRootFolder::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPRootFolder& operator=(WPRootFolder& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPRootFolder()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPRootFolderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPRootFolder(WPRootFolder* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPRootFolderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPRootFolder(const WPRootFolder* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPRootFolderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPRootFolder*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPRootFolder,SOMObject,somGetClass)
	(this);
}



};   /* WPRootFolder */



#endif       /* SOM_WPRootFolder_xh */

#ifndef SOM_M_WPRootFolder_xh
#define SOM_M_WPRootFolder_xh

class M_WPRootFolder;

#define M_WPRootFolder_MajorVersion 1
#define M_WPRootFolder_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef M_WPRootFolder_API
#define M_WPRootFolder_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPRootFolder is a metaclass for WPRootFolder. Make sure WPRootFolder is known.
 */
class WPRootFolder;


/* A procedure to create the M_WPRootFolder Class */
SOMEXTERN SOMClass * SOMLINK M_WPRootFolderNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPRootFolder class object, and the methods it introduces. */
SOMEXTERN struct M_WPRootFolderClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPRootFolderClassData;
#define _M_WPRootFolder M_WPRootFolderClassData.classObject

/* The API to parentMtabs for M_WPRootFolder, and the instance data it introduces. */
SOMEXTERN struct M_WPRootFolderCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPRootFolderCClassData;

/*
 * -- Typedefs for M_WPRootFolder Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPRootFolder*   SOMLINK somTP_M_WPRootFolder_somNew(M_WPRootFolder *somSelf);
typedef somTP_M_WPRootFolder_somNew *somTD_M_WPRootFolder_somNew;
}

#endif /* M_WPRootFolder_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPRootFolder
 */
class M_WPRootFolder : public M_WPFolder
{
public:

// M_WPRootFolder::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPRootFolder) M_WPRootFolderNewClass(M_WPRootFolder_MajorVersion,M_WPRootFolder_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPRootFolder,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPRootFolder));
}

// M_WPRootFolder::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPRootFolder& operator=(M_WPRootFolder& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPRootFolder()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPRootFolderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPRootFolder(M_WPRootFolder* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPRootFolderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPRootFolder(const M_WPRootFolder* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPRootFolderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPRootFolder*  somNew()
{
   return SOM_ResolveD(this,M_WPRootFolder,SOMClass,somNew)
	(this);
}



};   /* M_WPRootFolder */



#endif       /* SOM_M_WPRootFolder_xh */

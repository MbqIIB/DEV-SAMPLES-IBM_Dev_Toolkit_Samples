
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpurl.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *    Module Name: WPURL
 * 
 *    OS/2 Work Place Shell - Base URL object class
 * 
 *    Copyright (C) 1996 IBM Corporation
 * 
 */


#ifndef SOM_WPUrl_xh
#define SOM_WPUrl_xh

class WPUrl;

#define WPUrl_MajorVersion 1
#define WPUrl_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPDataFile_xh
#include <wpdataf.xh>
#endif

#ifndef WPUrl_API
#define WPUrl_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPDataFile;
class M_WPUrl;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPUrl Class */
class M_WPUrl;
SOMEXTERN M_WPUrl * SOMLINK WPUrlNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPUrl class object, and the methods it introduces. */
SOMEXTERN struct WPUrlClassDataStructure {
	M_WPUrl *classObject;
	somMToken WPUrlPrivate1;
	somMToken WPUrlPrivate2;
	somMToken WPUrlPrivate3;
	somMToken WPUrlPrivate4;
	somMToken WPUrlPrivate5;
} SOMDLINK WPUrlClassData;
#define _WPUrl WPUrlClassData.classObject

/* The API to parentMtabs for WPUrl, and the instance data it introduces. */
SOMEXTERN struct WPUrlCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPUrlCClassData;

/*
 * -- Typedefs for WPUrl Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPUrl*   SOMLINK somTP_WPUrl_somGetClass(WPUrl *somSelf);
typedef somTP_WPUrl_somGetClass *somTD_WPUrl_somGetClass;
}

#endif /* WPUrl_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPUrl
 */
class WPUrl : public WPDataFile
{
public:

// WPUrl::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPUrl) WPUrlNewClass(WPUrl_MajorVersion,WPUrl_MinorVersion);
   return (void*)
      SOM_Resolve(_WPUrl,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPUrl));
}

// WPUrl::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPUrl& operator=(WPUrl& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPUrl()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPUrlCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPUrl(WPUrl* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPUrlCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPUrl(const WPUrl* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPUrlCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPUrl*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPUrl,SOMObject,somGetClass)
	(this);
}



};   /* WPUrl */



#endif       /* SOM_WPUrl_xh */

#ifndef SOM_M_WPUrl_xh
#define SOM_M_WPUrl_xh

class M_WPUrl;

#define M_WPUrl_MajorVersion 1
#define M_WPUrl_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPDataFile_xh
#include <wpdataf.xh>
#endif

#ifndef M_WPUrl_API
#define M_WPUrl_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPUrl is a metaclass for WPUrl. Make sure WPUrl is known.
 */
class WPUrl;


/* A procedure to create the M_WPUrl Class */
SOMEXTERN SOMClass * SOMLINK M_WPUrlNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPUrl class object, and the methods it introduces. */
SOMEXTERN struct M_WPUrlClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPUrlClassData;
#define _M_WPUrl M_WPUrlClassData.classObject

/* The API to parentMtabs for M_WPUrl, and the instance data it introduces. */
SOMEXTERN struct M_WPUrlCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPUrlCClassData;

/*
 * -- Typedefs for M_WPUrl Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPUrl*   SOMLINK somTP_M_WPUrl_somNew(M_WPUrl *somSelf);
typedef somTP_M_WPUrl_somNew *somTD_M_WPUrl_somNew;
}

#endif /* M_WPUrl_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPUrl
 */
class M_WPUrl : public M_WPDataFile
{
public:

// M_WPUrl::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPUrl) M_WPUrlNewClass(M_WPUrl_MajorVersion,M_WPUrl_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPUrl,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPUrl));
}

// M_WPUrl::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPUrl& operator=(M_WPUrl& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPUrl()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPUrlCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPUrl(M_WPUrl* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPUrlCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPUrl(const M_WPUrl* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPUrlCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPUrl*  somNew()
{
   return SOM_ResolveD(this,M_WPUrl,SOMClass,somNew)
	(this);
}



};   /* M_WPUrl */



#endif       /* SOM_M_WPUrl_xh */

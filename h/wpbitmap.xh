
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpbitmap.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPBITMAP
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPBitmap_xh
#define SOM_WPBitmap_xh

class WPBitmap;

#define WPBitmap_MajorVersion 1
#define WPBitmap_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPImageFile_xh
#include <wpimage.xh>
#endif

#ifndef WPBitmap_API
#define WPBitmap_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPDataFile;
class M_WPImageFile;
class M_WPBitmap;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPBitmap Class */
class M_WPBitmap;
SOMEXTERN M_WPBitmap * SOMLINK WPBitmapNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPBitmap class object, and the methods it introduces. */
SOMEXTERN struct WPBitmapClassDataStructure {
	M_WPBitmap *classObject;
} SOMDLINK WPBitmapClassData;
#define _WPBitmap WPBitmapClassData.classObject

/* The API to parentMtabs for WPBitmap, and the instance data it introduces. */
SOMEXTERN struct WPBitmapCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPBitmapCClassData;

/*
 * -- Typedefs for WPBitmap Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPBitmap*   SOMLINK somTP_WPBitmap_somGetClass(WPBitmap *somSelf);
typedef somTP_WPBitmap_somGetClass *somTD_WPBitmap_somGetClass;
}

#endif /* WPBitmap_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPBitmap
 */
class WPBitmap : public WPImageFile
{
public:

// WPBitmap::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPBitmap) WPBitmapNewClass(WPBitmap_MajorVersion,WPBitmap_MinorVersion);
   return (void*)
      SOM_Resolve(_WPBitmap,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPBitmap));
}

// WPBitmap::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPBitmap& operator=(WPBitmap& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPBitmap()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPBitmapCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPBitmap(WPBitmap* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPBitmapCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPBitmap(const WPBitmap* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPBitmapCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPBitmap*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPBitmap,SOMObject,somGetClass)
	(this);
}



};   /* WPBitmap */



#endif       /* SOM_WPBitmap_xh */

#ifndef SOM_M_WPBitmap_xh
#define SOM_M_WPBitmap_xh

class M_WPBitmap;

#define M_WPBitmap_MajorVersion 1
#define M_WPBitmap_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPImageFile_xh
#include <wpimage.xh>
#endif

#ifndef M_WPBitmap_API
#define M_WPBitmap_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPBitmap is a metaclass for WPBitmap. Make sure WPBitmap is known.
 */
class WPBitmap;


/* A procedure to create the M_WPBitmap Class */
SOMEXTERN SOMClass * SOMLINK M_WPBitmapNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPBitmap class object, and the methods it introduces. */
SOMEXTERN struct M_WPBitmapClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPBitmapClassData;
#define _M_WPBitmap M_WPBitmapClassData.classObject

/* The API to parentMtabs for M_WPBitmap, and the instance data it introduces. */
SOMEXTERN struct M_WPBitmapCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPBitmapCClassData;

/*
 * -- Typedefs for M_WPBitmap Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPBitmap*   SOMLINK somTP_M_WPBitmap_somNew(M_WPBitmap *somSelf);
typedef somTP_M_WPBitmap_somNew *somTD_M_WPBitmap_somNew;
}

#endif /* M_WPBitmap_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPBitmap
 */
class M_WPBitmap : public M_WPImageFile
{
public:

// M_WPBitmap::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPBitmap) M_WPBitmapNewClass(M_WPBitmap_MajorVersion,M_WPBitmap_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPBitmap,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPBitmap));
}

// M_WPBitmap::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPBitmap& operator=(M_WPBitmap& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPBitmap()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPBitmapCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPBitmap(M_WPBitmap* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPBitmapCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPBitmap(const M_WPBitmap* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPBitmapCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPBitmap*  somNew()
{
   return SOM_ResolveD(this,M_WPBitmap,SOMClass,somNew)
	(this);
}



};   /* M_WPBitmap */



#endif       /* SOM_M_WPBitmap_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpkeybdd.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPKEYBDD
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPDevKeyboard_xh
#define SOM_WPDevKeyboard_xh

class WPDevKeyboard;

#define WPDevKeyboard_MajorVersion 1
#define WPDevKeyboard_MinorVersion 2

/*
 * Passthru lines: File: "C.h", "before"
 */



/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef WPDevKeyboard_API
#define WPDevKeyboard_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPTransient;
class M_WPDevice;
class M_WPDevKeyboard;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPDevKeyboard Class */
class M_WPDevKeyboard;
SOMEXTERN M_WPDevKeyboard * SOMLINK WPDevKeyboardNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPDevKeyboard class object, and the methods it introduces. */
SOMEXTERN struct WPDevKeyboardClassDataStructure {
	M_WPDevKeyboard *classObject;
} SOMDLINK WPDevKeyboardClassData;
#define _WPDevKeyboard WPDevKeyboardClassData.classObject

/* The API to parentMtabs for WPDevKeyboard, and the instance data it introduces. */
SOMEXTERN struct WPDevKeyboardCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPDevKeyboardCClassData;

/*
 * -- Typedefs for WPDevKeyboard Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPDevKeyboard*   SOMLINK somTP_WPDevKeyboard_somGetClass(WPDevKeyboard *somSelf);
typedef somTP_WPDevKeyboard_somGetClass *somTD_WPDevKeyboard_somGetClass;
}

#endif /* WPDevKeyboard_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPDevKeyboard
 */
class WPDevKeyboard : public WPDevice
{
public:

// WPDevKeyboard::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPDevKeyboard) WPDevKeyboardNewClass(WPDevKeyboard_MajorVersion,WPDevKeyboard_MinorVersion);
   return (void*)
      SOM_Resolve(_WPDevKeyboard,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPDevKeyboard));
}

// WPDevKeyboard::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPDevKeyboard& operator=(WPDevKeyboard& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPDevKeyboard()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevKeyboardCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPDevKeyboard(WPDevKeyboard* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevKeyboardCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPDevKeyboard(const WPDevKeyboard* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevKeyboardCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPDevKeyboard*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPDevKeyboard,SOMObject,somGetClass)
	(this);
}



};   /* WPDevKeyboard */



#endif       /* SOM_WPDevKeyboard_xh */

#ifndef SOM_M_WPDevKeyboard_xh
#define SOM_M_WPDevKeyboard_xh

class M_WPDevKeyboard;

/*
 *  New class methods section
 */

#define M_WPDevKeyboard_MajorVersion 1
#define M_WPDevKeyboard_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef M_WPDevKeyboard_API
#define M_WPDevKeyboard_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPDevKeyboard is a metaclass for WPDevKeyboard. Make sure WPDevKeyboard is known.
 */
class WPDevKeyboard;


/* A procedure to create the M_WPDevKeyboard Class */
SOMEXTERN SOMClass * SOMLINK M_WPDevKeyboardNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPDevKeyboard class object, and the methods it introduces. */
SOMEXTERN struct M_WPDevKeyboardClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPDevKeyboardClassData;
#define _M_WPDevKeyboard M_WPDevKeyboardClassData.classObject

/* The API to parentMtabs for M_WPDevKeyboard, and the instance data it introduces. */
SOMEXTERN struct M_WPDevKeyboardCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPDevKeyboardCClassData;

/*
 * -- Typedefs for M_WPDevKeyboard Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPDevKeyboard*   SOMLINK somTP_M_WPDevKeyboard_somNew(M_WPDevKeyboard *somSelf);
typedef somTP_M_WPDevKeyboard_somNew *somTD_M_WPDevKeyboard_somNew;
}

#endif /* M_WPDevKeyboard_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPDevKeyboard
 */
class M_WPDevKeyboard : public M_WPDevice
{
/*
 *  New class methods section
 */
public:

// M_WPDevKeyboard::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPDevKeyboard) M_WPDevKeyboardNewClass(M_WPDevKeyboard_MajorVersion,M_WPDevKeyboard_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPDevKeyboard,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPDevKeyboard));
}

// M_WPDevKeyboard::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPDevKeyboard& operator=(M_WPDevKeyboard& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPDevKeyboard()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevKeyboardCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPDevKeyboard(M_WPDevKeyboard* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevKeyboardCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPDevKeyboard(const M_WPDevKeyboard* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevKeyboardCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPDevKeyboard*  somNew()
{
   return SOM_ResolveD(this,M_WPDevKeyboard,SOMClass,somNew)
	(this);
}



};   /* M_WPDevKeyboard */



#endif       /* SOM_M_WPDevKeyboard_xh */

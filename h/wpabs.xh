
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpabs.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPABS
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPAbstract_xh
#define SOM_WPAbstract_xh

class WPAbstract;

#define WPAbstract_MajorVersion 1
#define WPAbstract_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPObject_xh
#include <wpobject.xh>
#endif

#ifndef WPAbstract_API
#define WPAbstract_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPAbstract;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPAbstract Class */
class M_WPAbstract;
SOMEXTERN M_WPAbstract * SOMLINK WPAbstractNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPAbstract class object, and the methods it introduces. */
SOMEXTERN struct WPAbstractClassDataStructure {
	M_WPAbstract *classObject;
} SOMDLINK WPAbstractClassData;
#define _WPAbstract WPAbstractClassData.classObject

/* The API to parentMtabs for WPAbstract, and the instance data it introduces. */
SOMEXTERN struct WPAbstractCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPAbstractCClassData;

/*
 * -- Typedefs for WPAbstract Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPAbstract*   SOMLINK somTP_WPAbstract_somGetClass(WPAbstract *somSelf);
typedef somTP_WPAbstract_somGetClass *somTD_WPAbstract_somGetClass;
}

#endif /* WPAbstract_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPAbstract
 */
class WPAbstract : public WPObject
{
public:

// WPAbstract::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPAbstract) WPAbstractNewClass(WPAbstract_MajorVersion,WPAbstract_MinorVersion);
   return (void*)
      SOM_Resolve(_WPAbstract,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPAbstract));
}

// WPAbstract::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPAbstract& operator=(WPAbstract& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPAbstract()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPAbstractCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPAbstract(WPAbstract* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPAbstractCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPAbstract(const WPAbstract* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPAbstractCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPAbstract*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPAbstract,SOMObject,somGetClass)
	(this);
}



};   /* WPAbstract */



#endif       /* SOM_WPAbstract_xh */

#ifndef SOM_M_WPAbstract_xh
#define SOM_M_WPAbstract_xh

class M_WPAbstract;

#define M_WPAbstract_MajorVersion 1
#define M_WPAbstract_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPObject_xh
#include <wpobject.xh>
#endif

#ifndef M_WPAbstract_API
#define M_WPAbstract_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPAbstract is a metaclass for WPAbstract. Make sure WPAbstract is known.
 */
class WPAbstract;


/* A procedure to create the M_WPAbstract Class */
SOMEXTERN SOMClass * SOMLINK M_WPAbstractNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPAbstract class object, and the methods it introduces. */
SOMEXTERN struct M_WPAbstractClassDataStructure {
	SOMClass *classObject;
	somMToken wpclsAbsPrivate1;
	somMToken wpclsAbsPrivate2;
	somMToken wpclsAbsPrivate3;
	somMToken wpclsQuerySetting;
	somMToken wpclsSetSetting;
} SOMDLINK M_WPAbstractClassData;
#define _M_WPAbstract M_WPAbstractClassData.classObject

/* The API to parentMtabs for M_WPAbstract, and the instance data it introduces. */
SOMEXTERN struct M_WPAbstractCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPAbstractCClassData;

/*
 * -- Typedefs for M_WPAbstract Method Procedures
 */
SOMEXTERN {
typedef ULONG   SOMLINK somTP_M_WPAbstract_wpclsQuerySetting(M_WPAbstract *somSelf, 
		PSZ pszSetting, 
		PVOID pValue, 
		ULONG ulValueLen);
typedef somTP_M_WPAbstract_wpclsQuerySetting *somTD_M_WPAbstract_wpclsQuerySetting;
typedef BOOL   SOMLINK somTP_M_WPAbstract_wpclsSetSetting(M_WPAbstract *somSelf, 
		PSZ pszSetting, 
		PVOID pValue);
typedef somTP_M_WPAbstract_wpclsSetSetting *somTD_M_WPAbstract_wpclsSetSetting;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPAbstract*   SOMLINK somTP_M_WPAbstract_somNew(M_WPAbstract *somSelf);
typedef somTP_M_WPAbstract_somNew *somTD_M_WPAbstract_somNew;
}

#endif /* M_WPAbstract_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPAbstract
 */
class M_WPAbstract : public M_WPObject
{
public:

// M_WPAbstract::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPAbstract) M_WPAbstractNewClass(M_WPAbstract_MajorVersion,M_WPAbstract_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPAbstract,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPAbstract));
}

// M_WPAbstract::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPAbstract& operator=(M_WPAbstract& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPAbstract()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPAbstractCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPAbstract(M_WPAbstract* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPAbstractCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPAbstract(const M_WPAbstract* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPAbstractCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: wpclsQuerySetting */
ULONG   wpclsQuerySetting(PSZ pszSetting, 
		PVOID pValue, 
		ULONG ulValueLen)
{
   return SOM_ResolveD(this,M_WPAbstract,M_WPAbstract,wpclsQuerySetting)
	(this,pszSetting,pValue,ulValueLen);
}


/* method: wpclsSetSetting */
BOOL   wpclsSetSetting(PSZ pszSetting, 
		PVOID pValue)
{
   return SOM_ResolveD(this,M_WPAbstract,M_WPAbstract,wpclsSetSetting)
	(this,pszSetting,pValue);
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPAbstract*  somNew()
{
   return SOM_ResolveD(this,M_WPAbstract,SOMClass,somNew)
	(this);
}



};   /* M_WPAbstract */



#endif       /* SOM_M_WPAbstract_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpdevice.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPDEVICE
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPDevice_xh
#define SOM_WPDevice_xh

class WPDevice;

#define WPDevice_MajorVersion 1
#define WPDevice_MinorVersion 2

/*
 * Passthru lines: File: "C.h", "before"
 */



/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPTransient_xh
#include <wptrans.xh>
#endif

#ifndef WPDevice_API
#define WPDevice_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPTransient;
class M_WPDevice;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPDevice Class */
class M_WPDevice;
SOMEXTERN M_WPDevice * SOMLINK WPDeviceNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPDevice class object, and the methods it introduces. */
SOMEXTERN struct WPDeviceClassDataStructure {
	M_WPDevice *classObject;
	somMToken wpDevicePrivate1;
	somMToken wpDevicePrivate2;
	somMToken wpDevicePrivate3;
	somMToken wpDevicePrivate4;
	somMToken wpDevicePrivate5;
	somMToken wpDevicePrivate6;
	somMToken wpDevicePrivate7;
	somMToken wpDevicePrivate8;
	somMToken wpDevicePrivate9;
	somMToken wpDevicePrivate10;
	somMToken wpDevicePrivate11;
	somMToken wpDevicePrivate12;
	somMToken wpDevicePrivate13;
	somMToken wpDevicePrivate14;
	somMToken wpDevicePrivate15;
	somMToken wpDevicePrivate16;
	somMToken wpDevicePrivate17;
	somMToken wpDevicePrivate18;
	somMToken wpDevicePrivate19;
	somMToken wpDevicePrivate20;
	somMToken wpDevicePrivate21;
	somMToken wpDevicePrivate22;
	somMToken wpDevicePrivate23;
	somMToken wpDevicePrivate24;
	somMToken wpDevicePrivate25;
	somMToken wpDevicePrivate26;
	somMToken wpDevicePrivate27;
	somMToken wpDevicePrivate28;
	somMToken wpDevicePrivate29;
	somMToken wpDevicePrivate30;
	somMToken wpDevicePrivate31;
	somMToken wpDevicePrivate32;
	somMToken wpDevicePrivate33;
	somMToken wpDevicePrivate34;
	somMToken wpDevicePrivate35;
	somMToken wpDevicePrivate36;
	somMToken wpDevicePrivate37;
	somMToken wpDevicePrivate38;
	somMToken wpDevicePrivate39;
	somMToken wpDevicePrivate40;
	somMToken wpDevicePrivate41;
	somMToken wpDevicePrivate42;
	somMToken wpDevicePrivate43;
	somMToken wpDevicePrivate44;
	somMToken wpDevicePrivate45;
	somMToken wpDevicePrivate46;
	somMToken wpDevicePrivate47;
	somMToken wpDevicePrivate48;
	somMToken wpDevicePrivate49;
	somMToken wpDevicePrivate50;
	somMToken wpDevicePrivate51;
	somMToken wpDevicePrivate52;
	somMToken wpAddDeviceDevice1Page;
	somMToken wpAddDeviceDevice2Page;
	somMToken wpAddDeviceDMA1Page;
	somMToken wpAddDeviceIRQ1Page;
	somMToken wpAddDeviceMemory1Page;
	somMToken wpAddDeviceIO1Page;
} SOMDLINK WPDeviceClassData;
#define _WPDevice WPDeviceClassData.classObject

/* The API to parentMtabs for WPDevice, and the instance data it introduces. */
SOMEXTERN struct WPDeviceCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPDeviceCClassData;

/*
 * -- Typedefs for WPDevice Method Procedures
 */
SOMEXTERN {
typedef ULONG   SOMLINK somTP_WPDevice_wpAddDeviceDevice1Page(WPDevice *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPDevice_wpAddDeviceDevice1Page *somTD_WPDevice_wpAddDeviceDevice1Page;
typedef ULONG   SOMLINK somTP_WPDevice_wpAddDeviceDevice2Page(WPDevice *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPDevice_wpAddDeviceDevice2Page *somTD_WPDevice_wpAddDeviceDevice2Page;
typedef ULONG   SOMLINK somTP_WPDevice_wpAddDeviceDMA1Page(WPDevice *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPDevice_wpAddDeviceDMA1Page *somTD_WPDevice_wpAddDeviceDMA1Page;
typedef ULONG   SOMLINK somTP_WPDevice_wpAddDeviceIRQ1Page(WPDevice *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPDevice_wpAddDeviceIRQ1Page *somTD_WPDevice_wpAddDeviceIRQ1Page;
typedef ULONG   SOMLINK somTP_WPDevice_wpAddDeviceMemory1Page(WPDevice *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPDevice_wpAddDeviceMemory1Page *somTD_WPDevice_wpAddDeviceMemory1Page;
typedef ULONG   SOMLINK somTP_WPDevice_wpAddDeviceIO1Page(WPDevice *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPDevice_wpAddDeviceIO1Page *somTD_WPDevice_wpAddDeviceIO1Page;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPDevice*   SOMLINK somTP_WPDevice_somGetClass(WPDevice *somSelf);
typedef somTP_WPDevice_somGetClass *somTD_WPDevice_somGetClass;
}

#endif /* WPDevice_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPDevice
 */
class WPDevice : public WPTransient
{
public:

// WPDevice::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPDevice) WPDeviceNewClass(WPDevice_MajorVersion,WPDevice_MinorVersion);
   return (void*)
      SOM_Resolve(_WPDevice,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPDevice));
}

// WPDevice::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPDevice& operator=(WPDevice& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPDevice()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDeviceCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPDevice(WPDevice* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDeviceCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPDevice(const WPDevice* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDeviceCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: wpAddDeviceDevice1Page */
ULONG   wpAddDeviceDevice1Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPDevice,WPDevice,wpAddDeviceDevice1Page)
	(this,hwndNotebook);
}


/* method: wpAddDeviceDevice2Page */
ULONG   wpAddDeviceDevice2Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPDevice,WPDevice,wpAddDeviceDevice2Page)
	(this,hwndNotebook);
}


/* method: wpAddDeviceDMA1Page */
ULONG   wpAddDeviceDMA1Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPDevice,WPDevice,wpAddDeviceDMA1Page)
	(this,hwndNotebook);
}


/* method: wpAddDeviceIRQ1Page */
ULONG   wpAddDeviceIRQ1Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPDevice,WPDevice,wpAddDeviceIRQ1Page)
	(this,hwndNotebook);
}


/* method: wpAddDeviceMemory1Page */
ULONG   wpAddDeviceMemory1Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPDevice,WPDevice,wpAddDeviceMemory1Page)
	(this,hwndNotebook);
}


/* method: wpAddDeviceIO1Page */
ULONG   wpAddDeviceIO1Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPDevice,WPDevice,wpAddDeviceIO1Page)
	(this,hwndNotebook);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPDevice*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPDevice,SOMObject,somGetClass)
	(this);
}



};   /* WPDevice */



#endif       /* SOM_WPDevice_xh */

#ifndef SOM_M_WPDevice_xh
#define SOM_M_WPDevice_xh

class M_WPDevice;

#define M_WPDevice_MajorVersion 1
#define M_WPDevice_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPTransient_xh
#include <wptrans.xh>
#endif

#ifndef M_WPDevice_API
#define M_WPDevice_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPDevice is a metaclass for WPDevice. Make sure WPDevice is known.
 */
class WPDevice;


/* A procedure to create the M_WPDevice Class */
SOMEXTERN SOMClass * SOMLINK M_WPDeviceNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPDevice class object, and the methods it introduces. */
SOMEXTERN struct M_WPDeviceClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPDeviceClassData;
#define _M_WPDevice M_WPDeviceClassData.classObject

/* The API to parentMtabs for M_WPDevice, and the instance data it introduces. */
SOMEXTERN struct M_WPDeviceCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPDeviceCClassData;

/*
 * -- Typedefs for M_WPDevice Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPDevice*   SOMLINK somTP_M_WPDevice_somNew(M_WPDevice *somSelf);
typedef somTP_M_WPDevice_somNew *somTD_M_WPDevice_somNew;
}

#endif /* M_WPDevice_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPDevice
 */
class M_WPDevice : public M_WPTransient
{
public:

// M_WPDevice::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPDevice) M_WPDeviceNewClass(M_WPDevice_MajorVersion,M_WPDevice_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPDevice,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPDevice));
}

// M_WPDevice::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPDevice& operator=(M_WPDevice& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPDevice()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDeviceCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPDevice(M_WPDevice* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDeviceCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPDevice(const M_WPDevice* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDeviceCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPDevice*  somNew()
{
   return SOM_ResolveD(this,M_WPDevice,SOMClass,somNew)
	(this);
}



};   /* M_WPDevice */



#endif       /* SOM_M_WPDevice_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wphtml.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *    Module Name: WPHTML
 * 
 *    OS/2 Work Place Shell - HTML data file object
 * 
 *    Copyright (C) 1996 IBM Corporation
 * 
 */


#ifndef SOM_WPHtml_xh
#define SOM_WPHtml_xh

class WPHtml;

#define WPHtml_MajorVersion 1
#define WPHtml_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPDataFile_xh
#include <wpdataf.xh>
#endif

#ifndef WPHtml_API
#define WPHtml_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPDataFile;
class M_WPHtml;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPHtml Class */
class M_WPHtml;
SOMEXTERN M_WPHtml * SOMLINK WPHtmlNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPHtml class object, and the methods it introduces. */
SOMEXTERN struct WPHtmlClassDataStructure {
	M_WPHtml *classObject;
} SOMDLINK WPHtmlClassData;
#define _WPHtml WPHtmlClassData.classObject

/* The API to parentMtabs for WPHtml, and the instance data it introduces. */
SOMEXTERN struct WPHtmlCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPHtmlCClassData;

/*
 * -- Typedefs for WPHtml Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPHtml*   SOMLINK somTP_WPHtml_somGetClass(WPHtml *somSelf);
typedef somTP_WPHtml_somGetClass *somTD_WPHtml_somGetClass;
}

#endif /* WPHtml_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPHtml
 */
class WPHtml : public WPDataFile
{
public:

// WPHtml::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPHtml) WPHtmlNewClass(WPHtml_MajorVersion,WPHtml_MinorVersion);
   return (void*)
      SOM_Resolve(_WPHtml,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPHtml));
}

// WPHtml::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPHtml& operator=(WPHtml& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPHtml()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPHtmlCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPHtml(WPHtml* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPHtmlCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPHtml(const WPHtml* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPHtmlCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPHtml*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPHtml,SOMObject,somGetClass)
	(this);
}



};   /* WPHtml */



#endif       /* SOM_WPHtml_xh */

#ifndef SOM_M_WPHtml_xh
#define SOM_M_WPHtml_xh

class M_WPHtml;

#define M_WPHtml_MajorVersion 1
#define M_WPHtml_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPDataFile_xh
#include <wpdataf.xh>
#endif

#ifndef M_WPHtml_API
#define M_WPHtml_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPHtml is a metaclass for WPHtml. Make sure WPHtml is known.
 */
class WPHtml;


/* A procedure to create the M_WPHtml Class */
SOMEXTERN SOMClass * SOMLINK M_WPHtmlNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPHtml class object, and the methods it introduces. */
SOMEXTERN struct M_WPHtmlClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPHtmlClassData;
#define _M_WPHtml M_WPHtmlClassData.classObject

/* The API to parentMtabs for M_WPHtml, and the instance data it introduces. */
SOMEXTERN struct M_WPHtmlCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPHtmlCClassData;

/*
 * -- Typedefs for M_WPHtml Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPHtml*   SOMLINK somTP_M_WPHtml_somNew(M_WPHtml *somSelf);
typedef somTP_M_WPHtml_somNew *somTD_M_WPHtml_somNew;
}

#endif /* M_WPHtml_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPHtml
 */
class M_WPHtml : public M_WPDataFile
{
public:

// M_WPHtml::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPHtml) M_WPHtmlNewClass(M_WPHtml_MajorVersion,M_WPHtml_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPHtml,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPHtml));
}

// M_WPHtml::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPHtml& operator=(M_WPHtml& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPHtml()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPHtmlCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPHtml(M_WPHtml* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPHtmlCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPHtml(const M_WPHtml* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPHtmlCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPHtml*  somNew()
{
   return SOM_ResolveD(this,M_WPHtml,SOMClass,somNew)
	(this);
}



};   /* M_WPHtml */



#endif       /* SOM_M_WPHtml_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpspneed.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPSPNEED
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPSpecialNeeds_xh
#define SOM_WPSpecialNeeds_xh

class WPSpecialNeeds;

#define WPSpecialNeeds_MajorVersion 1
#define WPSpecialNeeds_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef WPSpecialNeeds_API
#define WPSpecialNeeds_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPAbstract;
class M_WPSpecialNeeds;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPSpecialNeeds Class */
class M_WPSpecialNeeds;
SOMEXTERN M_WPSpecialNeeds * SOMLINK WPSpecialNeedsNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPSpecialNeeds class object, and the methods it introduces. */
SOMEXTERN struct WPSpecialNeedsClassDataStructure {
	M_WPSpecialNeeds *classObject;
} SOMDLINK WPSpecialNeedsClassData;
#define _WPSpecialNeeds WPSpecialNeedsClassData.classObject

/* The API to parentMtabs for WPSpecialNeeds, and the instance data it introduces. */
SOMEXTERN struct WPSpecialNeedsCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPSpecialNeedsCClassData;

/*
 * -- Typedefs for WPSpecialNeeds Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPSpecialNeeds*   SOMLINK somTP_WPSpecialNeeds_somGetClass(WPSpecialNeeds *somSelf);
typedef somTP_WPSpecialNeeds_somGetClass *somTD_WPSpecialNeeds_somGetClass;
}

#endif /* WPSpecialNeeds_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPSpecialNeeds
 */
class WPSpecialNeeds : public WPAbstract
{
public:

// WPSpecialNeeds::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPSpecialNeeds) WPSpecialNeedsNewClass(WPSpecialNeeds_MajorVersion,WPSpecialNeeds_MinorVersion);
   return (void*)
      SOM_Resolve(_WPSpecialNeeds,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPSpecialNeeds));
}

// WPSpecialNeeds::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPSpecialNeeds& operator=(WPSpecialNeeds& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPSpecialNeeds()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPSpecialNeedsCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPSpecialNeeds(WPSpecialNeeds* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPSpecialNeedsCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPSpecialNeeds(const WPSpecialNeeds* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPSpecialNeedsCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPSpecialNeeds*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPSpecialNeeds,SOMObject,somGetClass)
	(this);
}



};   /* WPSpecialNeeds */



#endif       /* SOM_WPSpecialNeeds_xh */

#ifndef SOM_M_WPSpecialNeeds_xh
#define SOM_M_WPSpecialNeeds_xh

class M_WPSpecialNeeds;

#define M_WPSpecialNeeds_MajorVersion 1
#define M_WPSpecialNeeds_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef M_WPSpecialNeeds_API
#define M_WPSpecialNeeds_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPSpecialNeeds is a metaclass for WPSpecialNeeds. Make sure WPSpecialNeeds is known.
 */
class WPSpecialNeeds;


/* A procedure to create the M_WPSpecialNeeds Class */
SOMEXTERN SOMClass * SOMLINK M_WPSpecialNeedsNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPSpecialNeeds class object, and the methods it introduces. */
SOMEXTERN struct M_WPSpecialNeedsClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPSpecialNeedsClassData;
#define _M_WPSpecialNeeds M_WPSpecialNeedsClassData.classObject

/* The API to parentMtabs for M_WPSpecialNeeds, and the instance data it introduces. */
SOMEXTERN struct M_WPSpecialNeedsCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPSpecialNeedsCClassData;

/*
 * -- Typedefs for M_WPSpecialNeeds Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPSpecialNeeds*   SOMLINK somTP_M_WPSpecialNeeds_somNew(M_WPSpecialNeeds *somSelf);
typedef somTP_M_WPSpecialNeeds_somNew *somTD_M_WPSpecialNeeds_somNew;
}

#endif /* M_WPSpecialNeeds_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPSpecialNeeds
 */
class M_WPSpecialNeeds : public M_WPAbstract
{
public:

// M_WPSpecialNeeds::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPSpecialNeeds) M_WPSpecialNeedsNewClass(M_WPSpecialNeeds_MajorVersion,M_WPSpecialNeeds_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPSpecialNeeds,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPSpecialNeeds));
}

// M_WPSpecialNeeds::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPSpecialNeeds& operator=(M_WPSpecialNeeds& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPSpecialNeeds()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPSpecialNeedsCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPSpecialNeeds(M_WPSpecialNeeds* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPSpecialNeedsCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPSpecialNeeds(const M_WPSpecialNeeds* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPSpecialNeedsCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPSpecialNeeds*  somNew()
{
   return SOM_ResolveD(this,M_WPSpecialNeeds,SOMClass,somNew)
	(this);
}



};   /* M_WPSpecialNeeds */



#endif       /* SOM_M_WPSpecialNeeds_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpctry.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPCTRY
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPCountry_xh
#define SOM_WPCountry_xh

class WPCountry;

#define WPCountry_MajorVersion 1
#define WPCountry_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef WPCountry_API
#define WPCountry_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPAbstract;
class M_WPCountry;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPCountry Class */
class M_WPCountry;
SOMEXTERN M_WPCountry * SOMLINK WPCountryNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPCountry class object, and the methods it introduces. */
SOMEXTERN struct WPCountryClassDataStructure {
	M_WPCountry *classObject;
	somMToken wpAddCountryTimePage;
	somMToken wpAddCountryDatePage;
	somMToken withdrawn;
	somMToken wpAddCountryPage;
	somMToken wpAddCountryNumbersPage;
} SOMDLINK WPCountryClassData;
#define _WPCountry WPCountryClassData.classObject

/* The API to parentMtabs for WPCountry, and the instance data it introduces. */
SOMEXTERN struct WPCountryCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPCountryCClassData;

/*
 * -- Typedefs for WPCountry Method Procedures
 */
SOMEXTERN {
typedef ULONG   SOMLINK somTP_WPCountry_wpAddCountryTimePage(WPCountry *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPCountry_wpAddCountryTimePage *somTD_WPCountry_wpAddCountryTimePage;
typedef ULONG   SOMLINK somTP_WPCountry_wpAddCountryDatePage(WPCountry *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPCountry_wpAddCountryDatePage *somTD_WPCountry_wpAddCountryDatePage;
typedef ULONG   SOMLINK somTP_WPCountry_wpAddCountryNumbersPage(WPCountry *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPCountry_wpAddCountryNumbersPage *somTD_WPCountry_wpAddCountryNumbersPage;
typedef ULONG   SOMLINK somTP_WPCountry_wpAddCountryPage(WPCountry *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPCountry_wpAddCountryPage *somTD_WPCountry_wpAddCountryPage;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPCountry*   SOMLINK somTP_WPCountry_somGetClass(WPCountry *somSelf);
typedef somTP_WPCountry_somGetClass *somTD_WPCountry_somGetClass;
}

#endif /* WPCountry_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPCountry
 */
class WPCountry : public WPAbstract
{
public:

// WPCountry::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPCountry) WPCountryNewClass(WPCountry_MajorVersion,WPCountry_MinorVersion);
   return (void*)
      SOM_Resolve(_WPCountry,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPCountry));
}

// WPCountry::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPCountry& operator=(WPCountry& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPCountry()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPCountryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPCountry(WPCountry* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPCountryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPCountry(const WPCountry* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPCountryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: wpAddCountryTimePage */
ULONG   wpAddCountryTimePage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPCountry,WPCountry,wpAddCountryTimePage)
	(this,hwndNotebook);
}


/* method: wpAddCountryDatePage */
ULONG   wpAddCountryDatePage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPCountry,WPCountry,wpAddCountryDatePage)
	(this,hwndNotebook);
}


/* method: wpAddCountryNumbersPage */
ULONG   wpAddCountryNumbersPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPCountry,WPCountry,wpAddCountryNumbersPage)
	(this,hwndNotebook);
}


/* method: wpAddCountryPage */
ULONG   wpAddCountryPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPCountry,WPCountry,wpAddCountryPage)
	(this,hwndNotebook);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPCountry*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPCountry,SOMObject,somGetClass)
	(this);
}



};   /* WPCountry */



#endif       /* SOM_WPCountry_xh */

#ifndef SOM_M_WPCountry_xh
#define SOM_M_WPCountry_xh

class M_WPCountry;

#define M_WPCountry_MajorVersion 1
#define M_WPCountry_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef M_WPCountry_API
#define M_WPCountry_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPCountry is a metaclass for WPCountry. Make sure WPCountry is known.
 */
class WPCountry;


/* A procedure to create the M_WPCountry Class */
SOMEXTERN SOMClass * SOMLINK M_WPCountryNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPCountry class object, and the methods it introduces. */
SOMEXTERN struct M_WPCountryClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPCountryClassData;
#define _M_WPCountry M_WPCountryClassData.classObject

/* The API to parentMtabs for M_WPCountry, and the instance data it introduces. */
SOMEXTERN struct M_WPCountryCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPCountryCClassData;

/*
 * -- Typedefs for M_WPCountry Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPCountry*   SOMLINK somTP_M_WPCountry_somNew(M_WPCountry *somSelf);
typedef somTP_M_WPCountry_somNew *somTD_M_WPCountry_somNew;
}

#endif /* M_WPCountry_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPCountry
 */
class M_WPCountry : public M_WPAbstract
{
public:

// M_WPCountry::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPCountry) M_WPCountryNewClass(M_WPCountry_MajorVersion,M_WPCountry_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPCountry,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPCountry));
}

// M_WPCountry::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPCountry& operator=(M_WPCountry& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPCountry()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPCountryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPCountry(M_WPCountry* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPCountryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPCountry(const M_WPCountry* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPCountryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPCountry*  somNew()
{
   return SOM_ResolveD(this,M_WPCountry,SOMClass,somNew)
	(this);
}



};   /* M_WPCountry */



#endif       /* SOM_M_WPCountry_xh */

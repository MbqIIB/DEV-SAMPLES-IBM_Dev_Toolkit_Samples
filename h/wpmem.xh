
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpmem.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPMEM
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPDevMemory_xh
#define SOM_WPDevMemory_xh

class WPDevMemory;

#define WPDevMemory_MajorVersion 1
#define WPDevMemory_MinorVersion 2

/*
 * Passthru lines: File: "C.h", "before"
 */



/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef WPDevMemory_API
#define WPDevMemory_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPTransient;
class M_WPDevice;
class M_WPDevMemory;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPDevMemory Class */
class M_WPDevMemory;
SOMEXTERN M_WPDevMemory * SOMLINK WPDevMemoryNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPDevMemory class object, and the methods it introduces. */
SOMEXTERN struct WPDevMemoryClassDataStructure {
	M_WPDevMemory *classObject;
} SOMDLINK WPDevMemoryClassData;
#define _WPDevMemory WPDevMemoryClassData.classObject

/* The API to parentMtabs for WPDevMemory, and the instance data it introduces. */
SOMEXTERN struct WPDevMemoryCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPDevMemoryCClassData;

/*
 * -- Typedefs for WPDevMemory Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPDevMemory*   SOMLINK somTP_WPDevMemory_somGetClass(WPDevMemory *somSelf);
typedef somTP_WPDevMemory_somGetClass *somTD_WPDevMemory_somGetClass;
}

#endif /* WPDevMemory_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPDevMemory
 */
class WPDevMemory : public WPDevice
{
public:

// WPDevMemory::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPDevMemory) WPDevMemoryNewClass(WPDevMemory_MajorVersion,WPDevMemory_MinorVersion);
   return (void*)
      SOM_Resolve(_WPDevMemory,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPDevMemory));
}

// WPDevMemory::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPDevMemory& operator=(WPDevMemory& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPDevMemory()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevMemoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPDevMemory(WPDevMemory* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevMemoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPDevMemory(const WPDevMemory* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevMemoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPDevMemory*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPDevMemory,SOMObject,somGetClass)
	(this);
}



};   /* WPDevMemory */



#endif       /* SOM_WPDevMemory_xh */

#ifndef SOM_M_WPDevMemory_xh
#define SOM_M_WPDevMemory_xh

class M_WPDevMemory;

/*
 *  New class methods section
 */

#define M_WPDevMemory_MajorVersion 1
#define M_WPDevMemory_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef M_WPDevMemory_API
#define M_WPDevMemory_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPDevMemory is a metaclass for WPDevMemory. Make sure WPDevMemory is known.
 */
class WPDevMemory;


/* A procedure to create the M_WPDevMemory Class */
SOMEXTERN SOMClass * SOMLINK M_WPDevMemoryNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPDevMemory class object, and the methods it introduces. */
SOMEXTERN struct M_WPDevMemoryClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPDevMemoryClassData;
#define _M_WPDevMemory M_WPDevMemoryClassData.classObject

/* The API to parentMtabs for M_WPDevMemory, and the instance data it introduces. */
SOMEXTERN struct M_WPDevMemoryCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPDevMemoryCClassData;

/*
 * -- Typedefs for M_WPDevMemory Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPDevMemory*   SOMLINK somTP_M_WPDevMemory_somNew(M_WPDevMemory *somSelf);
typedef somTP_M_WPDevMemory_somNew *somTD_M_WPDevMemory_somNew;
}

#endif /* M_WPDevMemory_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPDevMemory
 */
class M_WPDevMemory : public M_WPDevice
{
/*
 *  New class methods section
 */
public:

// M_WPDevMemory::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPDevMemory) M_WPDevMemoryNewClass(M_WPDevMemory_MajorVersion,M_WPDevMemory_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPDevMemory,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPDevMemory));
}

// M_WPDevMemory::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPDevMemory& operator=(M_WPDevMemory& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPDevMemory()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevMemoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPDevMemory(M_WPDevMemory* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevMemoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPDevMemory(const M_WPDevMemory* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevMemoryCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPDevMemory*  somNew()
{
   return SOM_ResolveD(this,M_WPDevMemory,SOMClass,somNew)
	(this);
}



};   /* M_WPDevMemory */



#endif       /* SOM_M_WPDevMemory_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpnetwrk.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPNETWRK
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPNetwork_xh
#define SOM_WPNetwork_xh

class WPNetwork;

#define WPNetwork_MajorVersion 1
#define WPNetwork_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef WPNetwork_API
#define WPNetwork_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPFolder;
class M_WPNetwork;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPNetwork Class */
class M_WPNetwork;
SOMEXTERN M_WPNetwork * SOMLINK WPNetworkNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPNetwork class object, and the methods it introduces. */
SOMEXTERN struct WPNetworkClassDataStructure {
	M_WPNetwork *classObject;
} SOMDLINK WPNetworkClassData;
#define _WPNetwork WPNetworkClassData.classObject

/* The API to parentMtabs for WPNetwork, and the instance data it introduces. */
SOMEXTERN struct WPNetworkCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPNetworkCClassData;

/*
 * -- Typedefs for WPNetwork Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPNetwork*   SOMLINK somTP_WPNetwork_somGetClass(WPNetwork *somSelf);
typedef somTP_WPNetwork_somGetClass *somTD_WPNetwork_somGetClass;
}

#endif /* WPNetwork_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPNetwork
 */
class WPNetwork : public WPFolder
{
public:

// WPNetwork::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPNetwork) WPNetworkNewClass(WPNetwork_MajorVersion,WPNetwork_MinorVersion);
   return (void*)
      SOM_Resolve(_WPNetwork,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPNetwork));
}

// WPNetwork::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPNetwork& operator=(WPNetwork& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPNetwork()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPNetworkCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPNetwork(WPNetwork* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPNetworkCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPNetwork(const WPNetwork* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPNetworkCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPNetwork*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPNetwork,SOMObject,somGetClass)
	(this);
}



};   /* WPNetwork */



#endif       /* SOM_WPNetwork_xh */

#ifndef SOM_M_WPNetwork_xh
#define SOM_M_WPNetwork_xh

class M_WPNetwork;

#define M_WPNetwork_MajorVersion 1
#define M_WPNetwork_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef M_WPNetwork_API
#define M_WPNetwork_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPNetwork is a metaclass for WPNetwork. Make sure WPNetwork is known.
 */
class WPNetwork;


/* A procedure to create the M_WPNetwork Class */
SOMEXTERN SOMClass * SOMLINK M_WPNetworkNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPNetwork class object, and the methods it introduces. */
SOMEXTERN struct M_WPNetworkClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPNetworkClassData;
#define _M_WPNetwork M_WPNetworkClassData.classObject

/* The API to parentMtabs for M_WPNetwork, and the instance data it introduces. */
SOMEXTERN struct M_WPNetworkCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPNetworkCClassData;

/*
 * -- Typedefs for M_WPNetwork Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPNetwork*   SOMLINK somTP_M_WPNetwork_somNew(M_WPNetwork *somSelf);
typedef somTP_M_WPNetwork_somNew *somTD_M_WPNetwork_somNew;
}

#endif /* M_WPNetwork_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPNetwork
 */
class M_WPNetwork : public M_WPFolder
{
public:

// M_WPNetwork::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPNetwork) M_WPNetworkNewClass(M_WPNetwork_MajorVersion,M_WPNetwork_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPNetwork,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPNetwork));
}

// M_WPNetwork::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPNetwork& operator=(M_WPNetwork& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPNetwork()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPNetworkCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPNetwork(M_WPNetwork* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPNetworkCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPNetwork(const M_WPNetwork* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPNetworkCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPNetwork*  somNew()
{
   return SOM_ResolveD(this,M_WPNetwork,SOMClass,somNew)
	(this);
}



};   /* M_WPNetwork */



#endif       /* SOM_M_WPNetwork_xh */

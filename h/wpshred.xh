
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpshred.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPSHRED
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPShredder_xh
#define SOM_WPShredder_xh

class WPShredder;

#define WPShredder_MajorVersion 1
#define WPShredder_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef WPShredder_API
#define WPShredder_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPAbstract;
class M_WPShredder;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPShredder Class */
class M_WPShredder;
SOMEXTERN M_WPShredder * SOMLINK WPShredderNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPShredder class object, and the methods it introduces. */
SOMEXTERN struct WPShredderClassDataStructure {
	M_WPShredder *classObject;
} SOMDLINK WPShredderClassData;
#define _WPShredder WPShredderClassData.classObject

/* The API to parentMtabs for WPShredder, and the instance data it introduces. */
SOMEXTERN struct WPShredderCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPShredderCClassData;

/*
 * -- Typedefs for WPShredder Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPShredder*   SOMLINK somTP_WPShredder_somGetClass(WPShredder *somSelf);
typedef somTP_WPShredder_somGetClass *somTD_WPShredder_somGetClass;
}

#endif /* WPShredder_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPShredder
 */
class WPShredder : public WPAbstract
{
public:

// WPShredder::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPShredder) WPShredderNewClass(WPShredder_MajorVersion,WPShredder_MinorVersion);
   return (void*)
      SOM_Resolve(_WPShredder,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPShredder));
}

// WPShredder::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPShredder& operator=(WPShredder& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPShredder()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPShredderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPShredder(WPShredder* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPShredderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPShredder(const WPShredder* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPShredderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPShredder*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPShredder,SOMObject,somGetClass)
	(this);
}



};   /* WPShredder */



#endif       /* SOM_WPShredder_xh */

#ifndef SOM_M_WPShredder_xh
#define SOM_M_WPShredder_xh

class M_WPShredder;

#define M_WPShredder_MajorVersion 1
#define M_WPShredder_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef M_WPShredder_API
#define M_WPShredder_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPShredder is a metaclass for WPShredder. Make sure WPShredder is known.
 */
class WPShredder;


/* A procedure to create the M_WPShredder Class */
SOMEXTERN SOMClass * SOMLINK M_WPShredderNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPShredder class object, and the methods it introduces. */
SOMEXTERN struct M_WPShredderClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPShredderClassData;
#define _M_WPShredder M_WPShredderClassData.classObject

/* The API to parentMtabs for M_WPShredder, and the instance data it introduces. */
SOMEXTERN struct M_WPShredderCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPShredderCClassData;

/*
 * -- Typedefs for M_WPShredder Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPShredder*   SOMLINK somTP_M_WPShredder_somNew(M_WPShredder *somSelf);
typedef somTP_M_WPShredder_somNew *somTD_M_WPShredder_somNew;
}

#endif /* M_WPShredder_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPShredder
 */
class M_WPShredder : public M_WPAbstract
{
public:

// M_WPShredder::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPShredder) M_WPShredderNewClass(M_WPShredder_MajorVersion,M_WPShredder_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPShredder,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPShredder));
}

// M_WPShredder::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPShredder& operator=(M_WPShredder& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPShredder()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPShredderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPShredder(M_WPShredder* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPShredderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPShredder(const M_WPShredder* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPShredderCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPShredder*  somNew()
{
   return SOM_ResolveD(this,M_WPShredder,SOMClass,somNew)
	(this);
}



};   /* M_WPShredder */



#endif       /* SOM_M_WPShredder_xh */

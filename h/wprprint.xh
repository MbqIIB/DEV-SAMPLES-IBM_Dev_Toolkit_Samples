
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wprprint.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPRPRINT
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPRPrinter_xh
#define SOM_WPRPrinter_xh

class WPRPrinter;

#define WPRPrinter_MajorVersion 1
#define WPRPrinter_MinorVersion 1

/*
 * Passthru lines: File: "C.h", "before"
 */

 /* common context menu ids */ 
#define WPPOICM_RPRTMENU            9017
#define WPPOIDM_RPRTACCESSANOTHER   9018
#define WPPOIDM_RPRTCONNECT         9019
#define WPPOIDM_RPRTDISCONNECT      9020
#define WPPOIDM_RPRTLOGON           9021
#define WPPOIDM_RPRTLOGOFF          9022
#define WPPOIDM_RPRTREMADMIN        9024
#define WPPOIDM_RPRTREMADMIN_COPY   9025
#define WPPOIDM_RPRTREMADMIN_CREATE 9026
#define WPPOIDM_RPRTREMADMIN_DELETE 9027
#define WPPOIDM_PPRTINSTALL         8001


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPPrinter_xh
#include <wpprint.xh>
#endif

#ifndef WPRPrinter_API
#define WPRPrinter_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPAbstract;
class M_WPPrinter;
class M_WPRPrinter;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPRPrinter Class */
class M_WPRPrinter;
SOMEXTERN M_WPRPrinter * SOMLINK WPRPrinterNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPRPrinter class object, and the methods it introduces. */
SOMEXTERN struct WPRPrinterClassDataStructure {
	M_WPRPrinter *classObject;
	somMToken wpSetResNetIdentity;
	somMToken wpQueryResNetIdentity;
	somMToken wpAddNetworkPage;
	somMToken wpCreateAnotherPrinter;
	somMToken wpNetworkConnect;
	somMToken wpNetworkDisconnect;
	somMToken wpNetworkLogoff;
	somMToken wpNetworkLogon;
	somMToken wpAuthenticate;
	somMToken wpQueryNetworkName;
	somMToken wpQueryServerName;
	somMToken wpQueryResourceName;
	somMToken wpParseNetId;
	somMToken wpAddObjectGeneralPage;
	somMToken wpQueryNetworkId;
	somMToken wpQueryLocalAlias;
} SOMDLINK WPRPrinterClassData;
#define _WPRPrinter WPRPrinterClassData.classObject

/* The API to parentMtabs for WPRPrinter, and the instance data it introduces. */
SOMEXTERN struct WPRPrinterCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPRPrinterCClassData;

/*
 * -- Typedefs for WPRPrinter Method Procedures
 */
SOMEXTERN {
typedef BOOL   SOMLINK somTP_WPRPrinter_wpAddNetworkPage(WPRPrinter *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPRPrinter_wpAddNetworkPage *somTD_WPRPrinter_wpAddNetworkPage;
typedef BOOL   SOMLINK somTP_WPRPrinter_wpQueryNetworkId(WPRPrinter *somSelf, 
		PSZ pBuf, 
		PULONG pcbBuf);
typedef somTP_WPRPrinter_wpQueryNetworkId *somTD_WPRPrinter_wpQueryNetworkId;
typedef BOOL   SOMLINK somTP_WPRPrinter_wpQueryLocalAlias(WPRPrinter *somSelf, 
		PSZ pBuf, 
		PULONG pcbBuf);
typedef somTP_WPRPrinter_wpQueryLocalAlias *somTD_WPRPrinter_wpQueryLocalAlias;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPRPrinter*   SOMLINK somTP_WPRPrinter_somGetClass(WPRPrinter *somSelf);
typedef somTP_WPRPrinter_somGetClass *somTD_WPRPrinter_somGetClass;
}

#endif /* WPRPrinter_API */


/*
 * -- This emitter normally treats Method Tokens as Thunks,
 * -- but the sc modifier "nothunks" was used, so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for WPRPrinter
 */
class WPRPrinter : public WPPrinter
{
public:

// WPRPrinter::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPRPrinter) WPRPrinterNewClass(WPRPrinter_MajorVersion,WPRPrinter_MinorVersion);
   return (void*)
      SOM_Resolve(_WPRPrinter,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPRPrinter));
}

// WPRPrinter::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPRPrinter& operator=(WPRPrinter& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPRPrinter()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPRPrinterCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPRPrinter(WPRPrinter* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPRPrinterCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPRPrinter(const WPRPrinter* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPRPrinterCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: wpAddNetworkPage */
BOOL   wpAddNetworkPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPRPrinter,WPRPrinter,wpAddNetworkPage)
	(this,hwndNotebook);
}


/* method: wpQueryNetworkId */
BOOL   wpQueryNetworkId(PSZ pBuf, 
		PULONG pcbBuf)
{
   return SOM_ResolveD(this,WPRPrinter,WPRPrinter,wpQueryNetworkId)
	(this,pBuf,pcbBuf);
}


/* method: wpQueryLocalAlias */
BOOL   wpQueryLocalAlias(PSZ pBuf, 
		PULONG pcbBuf)
{
   return SOM_ResolveD(this,WPRPrinter,WPRPrinter,wpQueryLocalAlias)
	(this,pBuf,pcbBuf);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPRPrinter*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPRPrinter,SOMObject,somGetClass)
	(this);
}



};   /* WPRPrinter */



#endif       /* SOM_WPRPrinter_xh */

#ifndef SOM_M_WPRPrinter_xh
#define SOM_M_WPRPrinter_xh

class M_WPRPrinter;

#define M_WPRPrinter_MajorVersion 1
#define M_WPRPrinter_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPPrinter_xh
#include <wpprint.xh>
#endif

#ifndef M_WPRPrinter_API
#define M_WPRPrinter_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPRPrinter is a metaclass for WPRPrinter. Make sure WPRPrinter is known.
 */
class WPRPrinter;


/* A procedure to create the M_WPRPrinter Class */
SOMEXTERN SOMClass * SOMLINK M_WPRPrinterNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPRPrinter class object, and the methods it introduces. */
SOMEXTERN struct M_WPRPrinterClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPRPrinterClassData;
#define _M_WPRPrinter M_WPRPrinterClassData.classObject

/* The API to parentMtabs for M_WPRPrinter, and the instance data it introduces. */
SOMEXTERN struct M_WPRPrinterCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPRPrinterCClassData;

/*
 * -- Typedefs for M_WPRPrinter Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPRPrinter*   SOMLINK somTP_M_WPRPrinter_somNew(M_WPRPrinter *somSelf);
typedef somTP_M_WPRPrinter_somNew *somTD_M_WPRPrinter_somNew;
}

#endif /* M_WPRPrinter_API */


/*
 * -- This emitter normally treats Method Tokens as Thunks,
 * -- but the sc modifier "nothunks" was used, so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for M_WPRPrinter
 */
class M_WPRPrinter : public M_WPPrinter
{
public:

// M_WPRPrinter::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPRPrinter) M_WPRPrinterNewClass(M_WPRPrinter_MajorVersion,M_WPRPrinter_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPRPrinter,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPRPrinter));
}

// M_WPRPrinter::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPRPrinter& operator=(M_WPRPrinter& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPRPrinter()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPRPrinterCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPRPrinter(M_WPRPrinter* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPRPrinterCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPRPrinter(const M_WPRPrinter* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPRPrinterCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPRPrinter*  somNew()
{
   return SOM_ResolveD(this,M_WPRPrinter,SOMClass,somNew)
	(this);
}



};   /* M_WPRPrinter */



#endif       /* SOM_M_WPRPrinter_xh */

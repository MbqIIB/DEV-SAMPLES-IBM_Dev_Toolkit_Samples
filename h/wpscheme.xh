
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpscheme.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPSCHEME
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPSchemePalette_xh
#define SOM_WPSchemePalette_xh

class WPSchemePalette;

#define WPSchemePalette_MajorVersion 1
#define WPSchemePalette_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPPalette_xh
#include <wppalet.xh>
#endif

#ifndef WPSchemePalette_API
#define WPSchemePalette_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPAbstract;
class M_WPPalette;
class M_WPSchemePalette;

/*
 * End of bindings for IDL types.
 */

/*
 * Passthru lines: File: "C.h", "after"
 */



/* A procedure to create the WPSchemePalette Class */
class M_WPSchemePalette;
SOMEXTERN M_WPSchemePalette * SOMLINK WPSchemePaletteNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPSchemePalette class object, and the methods it introduces. */
SOMEXTERN struct WPSchemePaletteClassDataStructure {
	M_WPSchemePalette *classObject;
} SOMDLINK WPSchemePaletteClassData;
#define _WPSchemePalette WPSchemePaletteClassData.classObject

/* The API to parentMtabs for WPSchemePalette, and the instance data it introduces. */
SOMEXTERN struct WPSchemePaletteCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPSchemePaletteCClassData;

/*
 * -- Typedefs for WPSchemePalette Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPSchemePalette*   SOMLINK somTP_WPSchemePalette_somGetClass(WPSchemePalette *somSelf);
typedef somTP_WPSchemePalette_somGetClass *somTD_WPSchemePalette_somGetClass;
}

#endif /* WPSchemePalette_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPSchemePalette
 */
class WPSchemePalette : public WPPalette
{
public:

// WPSchemePalette::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPSchemePalette) WPSchemePaletteNewClass(WPSchemePalette_MajorVersion,WPSchemePalette_MinorVersion);
   return (void*)
      SOM_Resolve(_WPSchemePalette,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPSchemePalette));
}

// WPSchemePalette::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPSchemePalette& operator=(WPSchemePalette& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPSchemePalette()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPSchemePaletteCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPSchemePalette(WPSchemePalette* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPSchemePaletteCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPSchemePalette(const WPSchemePalette* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPSchemePaletteCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPSchemePalette*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPSchemePalette,SOMObject,somGetClass)
	(this);
}



};   /* WPSchemePalette */



#endif       /* SOM_WPSchemePalette_xh */

#ifndef SOM_M_WPSchemePalette_xh
#define SOM_M_WPSchemePalette_xh

class M_WPSchemePalette;

#define M_WPSchemePalette_MajorVersion 1
#define M_WPSchemePalette_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPPalette_xh
#include <wppalet.xh>
#endif

#ifndef M_WPSchemePalette_API
#define M_WPSchemePalette_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPSchemePalette is a metaclass for WPSchemePalette. Make sure WPSchemePalette is known.
 */
class WPSchemePalette;


/* A procedure to create the M_WPSchemePalette Class */
SOMEXTERN SOMClass * SOMLINK M_WPSchemePaletteNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPSchemePalette class object, and the methods it introduces. */
SOMEXTERN struct M_WPSchemePaletteClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPSchemePaletteClassData;
#define _M_WPSchemePalette M_WPSchemePaletteClassData.classObject

/* The API to parentMtabs for M_WPSchemePalette, and the instance data it introduces. */
SOMEXTERN struct M_WPSchemePaletteCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPSchemePaletteCClassData;

/*
 * -- Typedefs for M_WPSchemePalette Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPSchemePalette*   SOMLINK somTP_M_WPSchemePalette_somNew(M_WPSchemePalette *somSelf);
typedef somTP_M_WPSchemePalette_somNew *somTD_M_WPSchemePalette_somNew;
}

#endif /* M_WPSchemePalette_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPSchemePalette
 */
class M_WPSchemePalette : public M_WPPalette
{
public:

// M_WPSchemePalette::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPSchemePalette) M_WPSchemePaletteNewClass(M_WPSchemePalette_MajorVersion,M_WPSchemePalette_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPSchemePalette,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPSchemePalette));
}

// M_WPSchemePalette::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPSchemePalette& operator=(M_WPSchemePalette& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPSchemePalette()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPSchemePaletteCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPSchemePalette(M_WPSchemePalette* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPSchemePaletteCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPSchemePalette(const M_WPSchemePalette* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPSchemePaletteCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPSchemePalette*  somNew()
{
   return SOM_ResolveD(this,M_WPSchemePalette,SOMClass,somNew)
	(this);
}



};   /* M_WPSchemePalette */



#endif       /* SOM_M_WPSchemePalette_xh */

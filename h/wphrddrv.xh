
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wphrddrv.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPHRDDRV
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPDevHarddrive_xh
#define SOM_WPDevHarddrive_xh

class WPDevHarddrive;

#define WPDevHarddrive_MajorVersion 1
#define WPDevHarddrive_MinorVersion 2

/*
 * Passthru lines: File: "C.h", "before"
 */



/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef WPDevHarddrive_API
#define WPDevHarddrive_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPTransient;
class M_WPDevice;
class M_WPDevHarddrive;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPDevHarddrive Class */
class M_WPDevHarddrive;
SOMEXTERN M_WPDevHarddrive * SOMLINK WPDevHarddriveNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPDevHarddrive class object, and the methods it introduces. */
SOMEXTERN struct WPDevHarddriveClassDataStructure {
	M_WPDevHarddrive *classObject;
} SOMDLINK WPDevHarddriveClassData;
#define _WPDevHarddrive WPDevHarddriveClassData.classObject

/* The API to parentMtabs for WPDevHarddrive, and the instance data it introduces. */
SOMEXTERN struct WPDevHarddriveCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPDevHarddriveCClassData;

/*
 * -- Typedefs for WPDevHarddrive Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPDevHarddrive*   SOMLINK somTP_WPDevHarddrive_somGetClass(WPDevHarddrive *somSelf);
typedef somTP_WPDevHarddrive_somGetClass *somTD_WPDevHarddrive_somGetClass;
}

#endif /* WPDevHarddrive_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPDevHarddrive
 */
class WPDevHarddrive : public WPDevice
{
public:

// WPDevHarddrive::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPDevHarddrive) WPDevHarddriveNewClass(WPDevHarddrive_MajorVersion,WPDevHarddrive_MinorVersion);
   return (void*)
      SOM_Resolve(_WPDevHarddrive,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPDevHarddrive));
}

// WPDevHarddrive::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPDevHarddrive& operator=(WPDevHarddrive& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPDevHarddrive()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevHarddriveCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPDevHarddrive(WPDevHarddrive* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevHarddriveCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPDevHarddrive(const WPDevHarddrive* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevHarddriveCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPDevHarddrive*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPDevHarddrive,SOMObject,somGetClass)
	(this);
}



};   /* WPDevHarddrive */



#endif       /* SOM_WPDevHarddrive_xh */

#ifndef SOM_M_WPDevHarddrive_xh
#define SOM_M_WPDevHarddrive_xh

class M_WPDevHarddrive;

/*
 *  New class methods section
 */

#define M_WPDevHarddrive_MajorVersion 1
#define M_WPDevHarddrive_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef M_WPDevHarddrive_API
#define M_WPDevHarddrive_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPDevHarddrive is a metaclass for WPDevHarddrive. Make sure WPDevHarddrive is known.
 */
class WPDevHarddrive;


/* A procedure to create the M_WPDevHarddrive Class */
SOMEXTERN SOMClass * SOMLINK M_WPDevHarddriveNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPDevHarddrive class object, and the methods it introduces. */
SOMEXTERN struct M_WPDevHarddriveClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPDevHarddriveClassData;
#define _M_WPDevHarddrive M_WPDevHarddriveClassData.classObject

/* The API to parentMtabs for M_WPDevHarddrive, and the instance data it introduces. */
SOMEXTERN struct M_WPDevHarddriveCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPDevHarddriveCClassData;

/*
 * -- Typedefs for M_WPDevHarddrive Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPDevHarddrive*   SOMLINK somTP_M_WPDevHarddrive_somNew(M_WPDevHarddrive *somSelf);
typedef somTP_M_WPDevHarddrive_somNew *somTD_M_WPDevHarddrive_somNew;
}

#endif /* M_WPDevHarddrive_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPDevHarddrive
 */
class M_WPDevHarddrive : public M_WPDevice
{
/*
 *  New class methods section
 */
public:

// M_WPDevHarddrive::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPDevHarddrive) M_WPDevHarddriveNewClass(M_WPDevHarddrive_MajorVersion,M_WPDevHarddrive_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPDevHarddrive,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPDevHarddrive));
}

// M_WPDevHarddrive::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPDevHarddrive& operator=(M_WPDevHarddrive& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPDevHarddrive()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevHarddriveCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPDevHarddrive(M_WPDevHarddrive* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevHarddriveCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPDevHarddrive(const M_WPDevHarddrive* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevHarddriveCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPDevHarddrive*  somNew()
{
   return SOM_ResolveD(this,M_WPDevHarddrive,SOMClass,somNew)
	(this);
}



};   /* M_WPDevHarddrive */



#endif       /* SOM_M_WPDevHarddrive_xh */

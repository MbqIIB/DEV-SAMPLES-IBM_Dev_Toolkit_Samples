
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpcpu.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPCPU
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPDevCPU_xh
#define SOM_WPDevCPU_xh

class WPDevCPU;

#define WPDevCPU_MajorVersion 1
#define WPDevCPU_MinorVersion 2

/*
 * Passthru lines: File: "C.h", "before"
 */



/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef WPDevCPU_API
#define WPDevCPU_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPTransient;
class M_WPDevice;
class M_WPDevCPU;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPDevCPU Class */
class M_WPDevCPU;
SOMEXTERN M_WPDevCPU * SOMLINK WPDevCPUNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPDevCPU class object, and the methods it introduces. */
SOMEXTERN struct WPDevCPUClassDataStructure {
	M_WPDevCPU *classObject;
} SOMDLINK WPDevCPUClassData;
#define _WPDevCPU WPDevCPUClassData.classObject

/* The API to parentMtabs for WPDevCPU, and the instance data it introduces. */
SOMEXTERN struct WPDevCPUCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPDevCPUCClassData;

/*
 * -- Typedefs for WPDevCPU Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPDevCPU*   SOMLINK somTP_WPDevCPU_somGetClass(WPDevCPU *somSelf);
typedef somTP_WPDevCPU_somGetClass *somTD_WPDevCPU_somGetClass;
}

#endif /* WPDevCPU_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPDevCPU
 */
class WPDevCPU : public WPDevice
{
public:

// WPDevCPU::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPDevCPU) WPDevCPUNewClass(WPDevCPU_MajorVersion,WPDevCPU_MinorVersion);
   return (void*)
      SOM_Resolve(_WPDevCPU,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPDevCPU));
}

// WPDevCPU::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPDevCPU& operator=(WPDevCPU& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPDevCPU()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevCPUCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPDevCPU(WPDevCPU* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevCPUCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPDevCPU(const WPDevCPU* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPDevCPUCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPDevCPU*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPDevCPU,SOMObject,somGetClass)
	(this);
}



};   /* WPDevCPU */



#endif       /* SOM_WPDevCPU_xh */

#ifndef SOM_M_WPDevCPU_xh
#define SOM_M_WPDevCPU_xh

class M_WPDevCPU;

/*
 *  New class methods section
 */

#define M_WPDevCPU_MajorVersion 1
#define M_WPDevCPU_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPDevice_xh
#include <wpdevice.xh>
#endif

#ifndef M_WPDevCPU_API
#define M_WPDevCPU_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPDevCPU is a metaclass for WPDevCPU. Make sure WPDevCPU is known.
 */
class WPDevCPU;


/* A procedure to create the M_WPDevCPU Class */
SOMEXTERN SOMClass * SOMLINK M_WPDevCPUNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPDevCPU class object, and the methods it introduces. */
SOMEXTERN struct M_WPDevCPUClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPDevCPUClassData;
#define _M_WPDevCPU M_WPDevCPUClassData.classObject

/* The API to parentMtabs for M_WPDevCPU, and the instance data it introduces. */
SOMEXTERN struct M_WPDevCPUCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPDevCPUCClassData;

/*
 * -- Typedefs for M_WPDevCPU Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPDevCPU*   SOMLINK somTP_M_WPDevCPU_somNew(M_WPDevCPU *somSelf);
typedef somTP_M_WPDevCPU_somNew *somTD_M_WPDevCPU_somNew;
}

#endif /* M_WPDevCPU_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPDevCPU
 */
class M_WPDevCPU : public M_WPDevice
{
/*
 *  New class methods section
 */
public:

// M_WPDevCPU::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPDevCPU) M_WPDevCPUNewClass(M_WPDevCPU_MajorVersion,M_WPDevCPU_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPDevCPU,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPDevCPU));
}

// M_WPDevCPU::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPDevCPU& operator=(M_WPDevCPU& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPDevCPU()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevCPUCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPDevCPU(M_WPDevCPU* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevCPUCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPDevCPU(const M_WPDevCPU* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPDevCPUCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPDevCPU*  somNew()
{
   return SOM_ResolveD(this,M_WPDevCPU,SOMClass,somNew)
	(this);
}



};   /* M_WPDevCPU */



#endif       /* SOM_M_WPDevCPU_xh */

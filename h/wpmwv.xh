
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpmwv.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

#ifndef SOM_WPMinWinViewer_xh
#define SOM_WPMinWinViewer_xh

class WPMinWinViewer;

#define WPMinWinViewer_MajorVersion 1
#define WPMinWinViewer_MinorVersion 2

/*
 * Passthru lines: File: "C.h", "before"
 */



/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef WPMinWinViewer_API
#define WPMinWinViewer_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPFolder;
class M_WPMinWinViewer;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPMinWinViewer Class */
class M_WPMinWinViewer;
SOMEXTERN M_WPMinWinViewer * SOMLINK WPMinWinViewerNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPMinWinViewer class object, and the methods it introduces. */
SOMEXTERN struct WPMinWinViewerClassDataStructure {
	M_WPMinWinViewer *classObject;
	somMToken wpFindMinWindow;
} SOMDLINK WPMinWinViewerClassData;
#define _WPMinWinViewer WPMinWinViewerClassData.classObject

/* The API to parentMtabs for WPMinWinViewer, and the instance data it introduces. */
SOMEXTERN struct WPMinWinViewerCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPMinWinViewerCClassData;

/*
 * -- Typedefs for WPMinWinViewer Method Procedures
 */
SOMEXTERN {
typedef WPObject*   SOMLINK somTP_WPMinWinViewer_wpFindMinWindow(WPMinWinViewer *somSelf, 
		HWND hwndFrame);
typedef somTP_WPMinWinViewer_wpFindMinWindow *somTD_WPMinWinViewer_wpFindMinWindow;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPMinWinViewer*   SOMLINK somTP_WPMinWinViewer_somGetClass(WPMinWinViewer *somSelf);
typedef somTP_WPMinWinViewer_somGetClass *somTD_WPMinWinViewer_somGetClass;
}

#endif /* WPMinWinViewer_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPMinWinViewer
 */
class WPMinWinViewer : public WPFolder
{
public:

// WPMinWinViewer::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPMinWinViewer) WPMinWinViewerNewClass(WPMinWinViewer_MajorVersion,WPMinWinViewer_MinorVersion);
   return (void*)
      SOM_Resolve(_WPMinWinViewer,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPMinWinViewer));
}

// WPMinWinViewer::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPMinWinViewer& operator=(WPMinWinViewer& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPMinWinViewer()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPMinWinViewerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPMinWinViewer(WPMinWinViewer* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPMinWinViewerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPMinWinViewer(const WPMinWinViewer* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPMinWinViewerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: wpFindMinWindow */
WPObject*   wpFindMinWindow(HWND hwndFrame)
{
   return SOM_ResolveD(this,WPMinWinViewer,WPMinWinViewer,wpFindMinWindow)
	(this,hwndFrame);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPMinWinViewer*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPMinWinViewer,SOMObject,somGetClass)
	(this);
}



};   /* WPMinWinViewer */



#endif       /* SOM_WPMinWinViewer_xh */

#ifndef SOM_M_WPMinWinViewer_xh
#define SOM_M_WPMinWinViewer_xh

class M_WPMinWinViewer;

#define M_WPMinWinViewer_MajorVersion 1
#define M_WPMinWinViewer_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef M_WPMinWinViewer_API
#define M_WPMinWinViewer_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPMinWinViewer is a metaclass for WPMinWinViewer. Make sure WPMinWinViewer is known.
 */
class WPMinWinViewer;


/* A procedure to create the M_WPMinWinViewer Class */
SOMEXTERN SOMClass * SOMLINK M_WPMinWinViewerNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPMinWinViewer class object, and the methods it introduces. */
SOMEXTERN struct M_WPMinWinViewerClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPMinWinViewerClassData;
#define _M_WPMinWinViewer M_WPMinWinViewerClassData.classObject

/* The API to parentMtabs for M_WPMinWinViewer, and the instance data it introduces. */
SOMEXTERN struct M_WPMinWinViewerCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPMinWinViewerCClassData;

/*
 * -- Typedefs for M_WPMinWinViewer Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPMinWinViewer*   SOMLINK somTP_M_WPMinWinViewer_somNew(M_WPMinWinViewer *somSelf);
typedef somTP_M_WPMinWinViewer_somNew *somTD_M_WPMinWinViewer_somNew;
}

#endif /* M_WPMinWinViewer_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPMinWinViewer
 */
class M_WPMinWinViewer : public M_WPFolder
{
public:

// M_WPMinWinViewer::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPMinWinViewer) M_WPMinWinViewerNewClass(M_WPMinWinViewer_MajorVersion,M_WPMinWinViewer_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPMinWinViewer,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPMinWinViewer));
}

// M_WPMinWinViewer::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPMinWinViewer& operator=(M_WPMinWinViewer& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPMinWinViewer()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPMinWinViewerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPMinWinViewer(M_WPMinWinViewer* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPMinWinViewerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPMinWinViewer(const M_WPMinWinViewer* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPMinWinViewerCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPMinWinViewer*  somNew()
{
   return SOM_ResolveD(this,M_WPMinWinViewer,SOMClass,somNew)
	(this);
}



};   /* M_WPMinWinViewer */



#endif       /* SOM_M_WPMinWinViewer_xh */

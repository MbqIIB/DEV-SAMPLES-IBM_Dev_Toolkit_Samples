
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpnetlnk.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPNETLNK
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPNetLink_xh
#define SOM_WPNetLink_xh

class WPNetLink;

#define WPNetLink_MajorVersion 1
#define WPNetLink_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPShadow_xh
#include <wpshadow.xh>
#endif

#ifndef WPNetLink_API
#define WPNetLink_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPAbstract;
class M_WPShadow;
class M_WPNetLink;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPNetLink Class */
class M_WPNetLink;
SOMEXTERN M_WPNetLink * SOMLINK WPNetLinkNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPNetLink class object, and the methods it introduces. */
SOMEXTERN struct WPNetLinkClassDataStructure {
	M_WPNetLink *classObject;
	somMToken wpSetObjectNetId;
	somMToken wpQueryObjectNetId;
} SOMDLINK WPNetLinkClassData;
#define _WPNetLink WPNetLinkClassData.classObject

/* The API to parentMtabs for WPNetLink, and the instance data it introduces. */
SOMEXTERN struct WPNetLinkCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPNetLinkCClassData;

/*
 * -- Typedefs for WPNetLink Method Procedures
 */
SOMEXTERN {
typedef BOOL   SOMLINK somTP_WPNetLink_wpSetObjectNetId(WPNetLink *somSelf, 
		PSZ pszNetIdentity);
typedef somTP_WPNetLink_wpSetObjectNetId *somTD_WPNetLink_wpSetObjectNetId;
typedef PSZ   SOMLINK somTP_WPNetLink_wpQueryObjectNetId(WPNetLink *somSelf);
typedef somTP_WPNetLink_wpQueryObjectNetId *somTD_WPNetLink_wpQueryObjectNetId;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPNetLink*   SOMLINK somTP_WPNetLink_somGetClass(WPNetLink *somSelf);
typedef somTP_WPNetLink_somGetClass *somTD_WPNetLink_somGetClass;
}

#endif /* WPNetLink_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPNetLink
 */
class WPNetLink : public WPShadow
{
public:

// WPNetLink::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPNetLink) WPNetLinkNewClass(WPNetLink_MajorVersion,WPNetLink_MinorVersion);
   return (void*)
      SOM_Resolve(_WPNetLink,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPNetLink));
}

// WPNetLink::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPNetLink& operator=(WPNetLink& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPNetLink()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPNetLinkCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPNetLink(WPNetLink* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPNetLinkCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPNetLink(const WPNetLink* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPNetLinkCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: wpSetObjectNetId */
BOOL   wpSetObjectNetId(PSZ pszNetIdentity)
{
   return SOM_ResolveD(this,WPNetLink,WPNetLink,wpSetObjectNetId)
	(this,pszNetIdentity);
}


/* method: wpQueryObjectNetId */
PSZ   wpQueryObjectNetId()
{
   return SOM_ResolveD(this,WPNetLink,WPNetLink,wpQueryObjectNetId)
	(this);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPNetLink*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPNetLink,SOMObject,somGetClass)
	(this);
}



};   /* WPNetLink */



#endif       /* SOM_WPNetLink_xh */

#ifndef SOM_M_WPNetLink_xh
#define SOM_M_WPNetLink_xh

class M_WPNetLink;

#define M_WPNetLink_MajorVersion 1
#define M_WPNetLink_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPShadow_xh
#include <wpshadow.xh>
#endif

#ifndef M_WPNetLink_API
#define M_WPNetLink_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPNetLink is a metaclass for WPNetLink. Make sure WPNetLink is known.
 */
class WPNetLink;


/* A procedure to create the M_WPNetLink Class */
SOMEXTERN SOMClass * SOMLINK M_WPNetLinkNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPNetLink class object, and the methods it introduces. */
SOMEXTERN struct M_WPNetLinkClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPNetLinkClassData;
#define _M_WPNetLink M_WPNetLinkClassData.classObject

/* The API to parentMtabs for M_WPNetLink, and the instance data it introduces. */
SOMEXTERN struct M_WPNetLinkCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPNetLinkCClassData;

/*
 * -- Typedefs for M_WPNetLink Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPNetLink*   SOMLINK somTP_M_WPNetLink_somNew(M_WPNetLink *somSelf);
typedef somTP_M_WPNetLink_somNew *somTD_M_WPNetLink_somNew;
}

#endif /* M_WPNetLink_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPNetLink
 */
class M_WPNetLink : public M_WPShadow
{
public:

// M_WPNetLink::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPNetLink) M_WPNetLinkNewClass(M_WPNetLink_MajorVersion,M_WPNetLink_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPNetLink,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPNetLink));
}

// M_WPNetLink::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPNetLink& operator=(M_WPNetLink& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPNetLink()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPNetLinkCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPNetLink(M_WPNetLink* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPNetLinkCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPNetLink(const M_WPNetLink* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPNetLinkCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPNetLink*  somNew()
{
   return SOM_ResolveD(this,M_WPNetLink,SOMClass,somNew)
	(this);
}



};   /* M_WPNetLink */



#endif       /* SOM_M_WPNetLink_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpclock.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPCLOCK
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPClock_xh
#define SOM_WPClock_xh

class WPClock;

#define WPClock_MajorVersion 1
#define WPClock_MinorVersion 2

/*
 * Passthru lines: File: "C.h", "before"
 */

     /* None right now */

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef WPClock_API
#define WPClock_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPAbstract;
class M_WPClock;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPClock Class */
class M_WPClock;
SOMEXTERN M_WPClock * SOMLINK WPClockNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPClock class object, and the methods it introduces. */
SOMEXTERN struct WPClockClassDataStructure {
	M_WPClock *classObject;
	somMToken wpAddClockView1Page;
	somMToken wpAddClockView2Page;
	somMToken wpAddClockDateTimePage;
	somMToken wpAddClockAlarmPage;
} SOMDLINK WPClockClassData;
#define _WPClock WPClockClassData.classObject

/* The API to parentMtabs for WPClock, and the instance data it introduces. */
SOMEXTERN struct WPClockCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPClockCClassData;

/*
 * -- Typedefs for WPClock Method Procedures
 */
SOMEXTERN {
typedef ULONG   SOMLINK somTP_WPClock_wpAddClockView1Page(WPClock *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPClock_wpAddClockView1Page *somTD_WPClock_wpAddClockView1Page;
typedef ULONG   SOMLINK somTP_WPClock_wpAddClockView2Page(WPClock *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPClock_wpAddClockView2Page *somTD_WPClock_wpAddClockView2Page;
typedef ULONG   SOMLINK somTP_WPClock_wpAddClockDateTimePage(WPClock *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPClock_wpAddClockDateTimePage *somTD_WPClock_wpAddClockDateTimePage;
typedef ULONG   SOMLINK somTP_WPClock_wpAddClockAlarmPage(WPClock *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPClock_wpAddClockAlarmPage *somTD_WPClock_wpAddClockAlarmPage;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPClock*   SOMLINK somTP_WPClock_somGetClass(WPClock *somSelf);
typedef somTP_WPClock_somGetClass *somTD_WPClock_somGetClass;
}

#endif /* WPClock_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPClock
 */
class WPClock : public WPAbstract
{
public:

// WPClock::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPClock) WPClockNewClass(WPClock_MajorVersion,WPClock_MinorVersion);
   return (void*)
      SOM_Resolve(_WPClock,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPClock));
}

// WPClock::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPClock& operator=(WPClock& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPClock()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPClockCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPClock(WPClock* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPClockCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPClock(const WPClock* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPClockCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: wpAddClockView1Page */
ULONG   wpAddClockView1Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPClock,WPClock,wpAddClockView1Page)
	(this,hwndNotebook);
}


/* method: wpAddClockView2Page */
ULONG   wpAddClockView2Page(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPClock,WPClock,wpAddClockView2Page)
	(this,hwndNotebook);
}


/* method: wpAddClockDateTimePage */
ULONG   wpAddClockDateTimePage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPClock,WPClock,wpAddClockDateTimePage)
	(this,hwndNotebook);
}


/* method: wpAddClockAlarmPage */
ULONG   wpAddClockAlarmPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPClock,WPClock,wpAddClockAlarmPage)
	(this,hwndNotebook);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPClock*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPClock,SOMObject,somGetClass)
	(this);
}



};   /* WPClock */



#endif       /* SOM_WPClock_xh */

#ifndef SOM_M_WPClock_xh
#define SOM_M_WPClock_xh

class M_WPClock;

#define M_WPClock_MajorVersion 1
#define M_WPClock_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef M_WPClock_API
#define M_WPClock_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPClock is a metaclass for WPClock. Make sure WPClock is known.
 */
class WPClock;


/* A procedure to create the M_WPClock Class */
SOMEXTERN SOMClass * SOMLINK M_WPClockNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPClock class object, and the methods it introduces. */
SOMEXTERN struct M_WPClockClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPClockClassData;
#define _M_WPClock M_WPClockClassData.classObject

/* The API to parentMtabs for M_WPClock, and the instance data it introduces. */
SOMEXTERN struct M_WPClockCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPClockCClassData;

/*
 * -- Typedefs for M_WPClock Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPClock*   SOMLINK somTP_M_WPClock_somNew(M_WPClock *somSelf);
typedef somTP_M_WPClock_somNew *somTD_M_WPClock_somNew;
}

#endif /* M_WPClock_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPClock
 */
class M_WPClock : public M_WPAbstract
{
public:

// M_WPClock::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPClock) M_WPClockNewClass(M_WPClock_MajorVersion,M_WPClock_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPClock,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPClock));
}

// M_WPClock::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPClock& operator=(M_WPClock& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPClock()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPClockCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPClock(M_WPClock* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPClockCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPClock(const M_WPClock* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPClockCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPClock*  somNew()
{
   return SOM_ResolveD(this,M_WPClock,SOMClass,somNew)
	(this);
}



};   /* M_WPClock */



#endif       /* SOM_M_WPClock_xh */

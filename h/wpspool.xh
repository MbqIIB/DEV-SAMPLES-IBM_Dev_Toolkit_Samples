
/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpspool.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPSPOOL
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPSpool_xh
#define SOM_WPSpool_xh

class WPSpool;

#define WPSpool_MajorVersion 1
#define WPSpool_MinorVersion 1

/*
 * Passthru lines: File: "C.h", "before"
 */

/* common context menu ids */
#define WPPOICM_SPOOL_ENABLE        5001
#define WPPOIDM_SPOOL_ENABLE        5101
#define WPPOICM_SPOOL_DISABLE       5002
#define WPPOIDM_SPOOL_DISABLE       5102


/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef WPSpool_API
#define WPSpool_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPAbstract;
class M_WPSpool;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPSpool Class */
class M_WPSpool;
SOMEXTERN M_WPSpool * SOMLINK WPSpoolNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPSpool class object, and the methods it introduces. */
SOMEXTERN struct WPSpoolClassDataStructure {
	M_WPSpool *classObject;
	somMToken wpAddSetPathPage;
	somMToken wpAddSetPriorityPage;
	somMToken pdvQueryXSplitBarAllJobs;
	somMToken pdvSetXSplitBarAllJobs;
	somMToken wpAddSetPortRedirPage;
	somMToken wpAddSetViewPage;
	somMToken splSetDetailsColumnVisibility;
	somMToken splIsDetailsColumnVisible;
	somMToken wpAddSetSyncPage;
} SOMDLINK WPSpoolClassData;
#define _WPSpool WPSpoolClassData.classObject

/* The API to parentMtabs for WPSpool, and the instance data it introduces. */
SOMEXTERN struct WPSpoolCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPSpoolCClassData;

/*
 * -- Typedefs for WPSpool Method Procedures
 */
SOMEXTERN {
typedef ULONG   SOMLINK somTP_WPSpool_wpAddSetPathPage(WPSpool *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPSpool_wpAddSetPathPage *somTD_WPSpool_wpAddSetPathPage;
typedef ULONG   SOMLINK somTP_WPSpool_wpAddSetPriorityPage(WPSpool *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPSpool_wpAddSetPriorityPage *somTD_WPSpool_wpAddSetPriorityPage;
typedef ULONG   SOMLINK somTP_WPSpool_wpAddSetPortRedirPage(WPSpool *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPSpool_wpAddSetPortRedirPage *somTD_WPSpool_wpAddSetPortRedirPage;
typedef ULONG   SOMLINK somTP_WPSpool_wpAddSetViewPage(WPSpool *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPSpool_wpAddSetViewPage *somTD_WPSpool_wpAddSetViewPage;
typedef ULONG   SOMLINK somTP_WPSpool_wpAddSetSyncPage(WPSpool *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPSpool_wpAddSetSyncPage *somTD_WPSpool_wpAddSetSyncPage;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPSpool*   SOMLINK somTP_WPSpool_somGetClass(WPSpool *somSelf);
typedef somTP_WPSpool_somGetClass *somTD_WPSpool_somGetClass;
}

#endif /* WPSpool_API */


/*
 * -- This emitter normally treats Method Tokens as Thunks,
 * -- but the sc modifier "nothunks" was used, so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for WPSpool
 */
class WPSpool : public WPAbstract
{
public:

// WPSpool::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPSpool) WPSpoolNewClass(WPSpool_MajorVersion,WPSpool_MinorVersion);
   return (void*)
      SOM_Resolve(_WPSpool,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPSpool));
}

// WPSpool::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPSpool& operator=(WPSpool& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPSpool()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPSpoolCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPSpool(WPSpool* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPSpoolCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPSpool(const WPSpool* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPSpoolCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: wpAddSetPathPage */
ULONG   wpAddSetPathPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPSpool,WPSpool,wpAddSetPathPage)
	(this,hwndNotebook);
}


/* method: wpAddSetPriorityPage */
ULONG   wpAddSetPriorityPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPSpool,WPSpool,wpAddSetPriorityPage)
	(this,hwndNotebook);
}


/* method: wpAddSetPortRedirPage */
ULONG   wpAddSetPortRedirPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPSpool,WPSpool,wpAddSetPortRedirPage)
	(this,hwndNotebook);
}


/* method: wpAddSetViewPage */
ULONG   wpAddSetViewPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPSpool,WPSpool,wpAddSetViewPage)
	(this,hwndNotebook);
}


/* method: wpAddSetSyncPage */
ULONG   wpAddSetSyncPage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPSpool,WPSpool,wpAddSetSyncPage)
	(this,hwndNotebook);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPSpool*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPSpool,SOMObject,somGetClass)
	(this);
}



};   /* WPSpool */



#endif       /* SOM_WPSpool_xh */

#ifndef SOM_M_WPSpool_xh
#define SOM_M_WPSpool_xh

class M_WPSpool;

#define M_WPSpool_MajorVersion 1
#define M_WPSpool_MinorVersion 1

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPAbstract_xh
#include <wpabs.xh>
#endif

#ifndef M_WPSpool_API
#define M_WPSpool_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPSpool is a metaclass for WPSpool. Make sure WPSpool is known.
 */
class WPSpool;


/* A procedure to create the M_WPSpool Class */
SOMEXTERN SOMClass * SOMLINK M_WPSpoolNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPSpool class object, and the methods it introduces. */
SOMEXTERN struct M_WPSpoolClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPSpoolClassData;
#define _M_WPSpool M_WPSpoolClassData.classObject

/* The API to parentMtabs for M_WPSpool, and the instance data it introduces. */
SOMEXTERN struct M_WPSpoolCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPSpoolCClassData;

/*
 * -- Typedefs for M_WPSpool Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPSpool*   SOMLINK somTP_M_WPSpool_somNew(M_WPSpool *somSelf);
typedef somTP_M_WPSpool_somNew *somTD_M_WPSpool_somNew;
}

#endif /* M_WPSpool_API */


/*
 * -- This emitter normally treats Method Tokens as Thunks,
 * -- but the sc modifier "nothunks" was used, so somResolve will be called.
 */
#undef somresolve_
#define somresolve_(obj,mToken) (somResolve(obj,mToken))

/*
 * -- The C++ Wrapper Class for M_WPSpool
 */
class M_WPSpool : public M_WPAbstract
{
public:

// M_WPSpool::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPSpool) M_WPSpoolNewClass(M_WPSpool_MajorVersion,M_WPSpool_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPSpool,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPSpool));
}

// M_WPSpool::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPSpool& operator=(M_WPSpool& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPSpool()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPSpoolCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPSpool(M_WPSpool* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPSpoolCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPSpool(const M_WPSpool* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPSpoolCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPSpool*  somNew()
{
   return SOM_ResolveD(this,M_WPSpool,SOMClass,somNew)
	(this);
}



};   /* M_WPSpool */



#endif       /* SOM_M_WPSpool_xh */


/*
 * This file was generated by the SOM Compiler.
 * FileName: G:\cwpsh\rel\os2c\include\base\os2\wpshdir.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.29.1.14
 *     SOM Emitter emitxh: 2.43
 */

/*
 *   Module Header
 * 
 *   Module Name: WPSHDIR
 * 
 *   OS/2 Presentation Manager Workplace class definitions
 * 
 *   Copyright (c) International Business Machines Corporation 1991, 1992
 * 
 */


#ifndef SOM_WPSharedDir_xh
#define SOM_WPSharedDir_xh

class WPSharedDir;

#define WPSharedDir_MajorVersion 1
#define WPSharedDir_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef WPSharedDir_API
#define WPSharedDir_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */

class SOMClass;
class SOMObject;
class WPFolder;
class M_WPObject;
class WPObject;
class WPImageFile;
class M_WPFileSystem;
class M_WPFolder;
class M_WPSharedDir;

/*
 * End of bindings for IDL types.
 */

/* A procedure to create the WPSharedDir Class */
class M_WPSharedDir;
SOMEXTERN M_WPSharedDir * SOMLINK WPSharedDirNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the WPSharedDir class object, and the methods it introduces. */
SOMEXTERN struct WPSharedDirClassDataStructure {
	M_WPSharedDir *classObject;
	somMToken wpAddResourcePage;
} SOMDLINK WPSharedDirClassData;
#define _WPSharedDir WPSharedDirClassData.classObject

/* The API to parentMtabs for WPSharedDir, and the instance data it introduces. */
SOMEXTERN struct WPSharedDirCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK WPSharedDirCClassData;

/*
 * -- Typedefs for WPSharedDir Method Procedures
 */
SOMEXTERN {
typedef ULONG   SOMLINK somTP_WPSharedDir_wpAddResourcePage(WPSharedDir *somSelf, 
		HWND hwndNotebook);
typedef somTP_WPSharedDir_wpAddResourcePage *somTD_WPSharedDir_wpAddResourcePage;

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef M_WPSharedDir*   SOMLINK somTP_WPSharedDir_somGetClass(WPSharedDir *somSelf);
typedef somTP_WPSharedDir_somGetClass *somTD_WPSharedDir_somGetClass;
}

#endif /* WPSharedDir_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for WPSharedDir
 */
class WPSharedDir : public WPFolder
{
public:

// WPSharedDir::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_WPSharedDir) WPSharedDirNewClass(WPSharedDir_MajorVersion,WPSharedDir_MinorVersion);
   return (void*)
      SOM_Resolve(_WPSharedDir,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_WPSharedDir));
}

// WPSharedDir::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

WPSharedDir& operator=(WPSharedDir& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

WPSharedDir()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPSharedDirCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

WPSharedDir(WPSharedDir* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPSharedDirCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

WPSharedDir(const WPSharedDir* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (WPSharedDirCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/* method: wpAddResourcePage */
ULONG   wpAddResourcePage(HWND hwndNotebook)
{
   return SOM_ResolveD(this,WPSharedDir,WPSharedDir,wpAddResourcePage)
	(this,hwndNotebook);
}


/*
 * Reintroduce inherited methods
 */

/* method: somGetClass */
M_WPSharedDir*  somGetClass()
{
/*
 *  Return the receiver's class.
 */
   return SOM_ResolveD(this,WPSharedDir,SOMObject,somGetClass)
	(this);
}



};   /* WPSharedDir */



#endif       /* SOM_WPSharedDir_xh */

#ifndef SOM_M_WPSharedDir_xh
#define SOM_M_WPSharedDir_xh

class M_WPSharedDir;

#define M_WPSharedDir_MajorVersion 1
#define M_WPSharedDir_MinorVersion 2

/* C++ SOM defs */
#include <somcls.xh>
#include <somcm.xh>

/* C++ parent defs */
#ifndef SOM_M_WPFolder_xh
#include <wpfolder.xh>
#endif

#ifndef M_WPSharedDir_API
#define M_WPSharedDir_API
/*
 * -- The Class API
 */

/*
 * Start of bindings for IDL types
 */


/*
 * End of bindings for IDL types.
 */

/*
 * -- M_WPSharedDir is a metaclass for WPSharedDir. Make sure WPSharedDir is known.
 */
class WPSharedDir;


/* A procedure to create the M_WPSharedDir Class */
SOMEXTERN SOMClass * SOMLINK M_WPSharedDirNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the M_WPSharedDir class object, and the methods it introduces. */
SOMEXTERN struct M_WPSharedDirClassDataStructure {
	SOMClass *classObject;
} SOMDLINK M_WPSharedDirClassData;
#define _M_WPSharedDir M_WPSharedDirClassData.classObject

/* The API to parentMtabs for M_WPSharedDir, and the instance data it introduces. */
SOMEXTERN struct M_WPSharedDirCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken              instanceDataToken;
} SOMDLINK M_WPSharedDirCClassData;

/*
 * -- Typedefs for M_WPSharedDir Method Procedures
 */
SOMEXTERN {

/*
 * -- Typedefs for Reintroduced Wrapper Methods
 */
typedef WPSharedDir*   SOMLINK somTP_M_WPSharedDir_somNew(M_WPSharedDir *somSelf);
typedef somTP_M_WPSharedDir_somNew *somTD_M_WPSharedDir_somNew;
}

#endif /* M_WPSharedDir_API */


/*
 * -- This emitter treats Method Tokens as Thunks by default.
 * -- Use the sc modifier "nothunks" to change this default
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for M_WPSharedDir
 */
class M_WPSharedDir : public M_WPFolder
{
public:

// M_WPSharedDir::new creates the class object if necessary, and then uses somNewNoInit
// to allocate memory and create the object. Initialization is in ctors.
void *operator new(size_t)
{
   if (!_M_WPSharedDir) M_WPSharedDirNewClass(M_WPSharedDir_MajorVersion,M_WPSharedDir_MinorVersion);
   return (void*)
      SOM_Resolve(_M_WPSharedDir,SOMClass,somNewNoInit)
         ((SOMClass *)((void*)_M_WPSharedDir));
}

// M_WPSharedDir::delete uses somDestruct.
void operator delete(void * obj)
{
   if (obj && *(void**)obj) {
      SOM_Resolve(obj,SOMObject,somDestruct)
         ((SOMObject*)obj, 1, 0);
   }
}

M_WPSharedDir& operator=(M_WPSharedDir& fromObj)
{
   this->somDefaultAssign(0,(SOMObject*)((void*)&fromObj));
   return *this;
}

M_WPSharedDir()
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPSharedDirCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultInit(0);
}

M_WPSharedDir(M_WPSharedDir* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPSharedDirCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultCopyInit(0,((SOMObject*)((void*)fromObj)));
}

M_WPSharedDir(const M_WPSharedDir* fromObj)
{
   if (*(void**)this != 
       ((somParentMtabStructPtr)
        (M_WPSharedDirCClassData.parentMtab))->mtab)
      return;
   ((SOMObject*)((void*)this))->somDefaultConstCopyInit(0,((SOMObject*)((void*)fromObj)));
}


/*
 * Reintroduce inherited methods
 */

/* method: somNew */
WPSharedDir*  somNew()
{
   return SOM_ResolveD(this,M_WPSharedDir,SOMClass,somNew)
	(this);
}



};   /* M_WPSharedDir */



#endif       /* SOM_M_WPSharedDir_xh */
